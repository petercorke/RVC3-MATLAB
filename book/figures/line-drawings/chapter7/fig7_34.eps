%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig7_walking_robot.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Remo Pillat
%%CreationDate: 1/21/2022
%%BoundingBox: 0 0 111 281
%%HiResBoundingBox: 0 0 111 281
%%CropBox: 0 0 111 281
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.3 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2022-01-21T13:23:36-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2022-01-21T13:23:36-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2022-01-21T13:23:36-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>104</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAABoAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqwz82/O2oeTf&#xA;J8msafDFPdmaOCMT8ii+pX4iFKk049K5l6LTjLk4TyYyNBBfkd5x1PzV5Gju9RVBcWMxsPUQsTIs&#xA;EUZEj8ix5tz+LJ9oYBjyUOu6IGw9AzBZuxV2KuxV2KuxV2KuxV2KuxV2KvPfz112TRPIjXsVna3k&#xA;31qKOFLyITxo7BqSCNvhLr+zWo9szuzsfHkqyNujCZoMX/KXz0bD8pZtWmsYFlt9QFlS1haMSHhC&#xA;vrziJZCzhD8RC/FxA+0a5PtSHDl5nl+tcfJnPlX8y9F1mOK2nP1fWVtIrm6s1DOA7wCaSOIgcmMd&#xA;SCKVqDStDTXM0H5M/NS31/UUsLmze0uLyVxYDiwUxxWsVw/qNKI6tWZlXgDy4swHH4iqz3FXYq7F&#xA;XYq7FXYq7FXYq7FXnv5569qmieR/rulrGb/65AkDyRJOUY8iHjVwwDinwmm2Z3Z+OM8lS5UwmaCV&#xA;fkPcS+Y/y0vLTWY0dDcSWEwjQW7yQrbQqBI0PpszcDxLn4iKVOT7TgI5du79JXGdnplnpOmWT+pa&#xA;2scU3ppCZwo9Vo41CoryH42oFH2jmuZqen6DpOnySy2tuFlmmluXldmkf1LgqZSrSFiofgtVWg26&#xA;Yqj8VdirsVdirsVdirsVdirsVUIbm1uZZ4o2DyWcoimBB+CQxrKBUj+SVTUeOILKUCACev8AYlfl&#xA;yazsvLWhRsRH69tawwihPJ/QHEEiv7KdThlKzZWMCbroneBi7FXYq7FXYq7FXYq7FXYq7FXYqxeT&#xA;W7LQrbzhrN63G10+5+sS+JEem2rcR/lN0HvkRzLkZvph/V/30mC6P5j1/UdI8s+ZdNglvtETTbdL&#xA;bTklhEcmpoDFKtBE9wpio4YjlUKSBVeMhLXC967nsKEsikihIBI8MLW3irsVdirsVdirsVdirsVd&#xA;irsVedfmb5c1R/L2vXqXUJ0yOQa3c2bo/KY6fbIVt3YNT02e1Rjt7dMgbFlzMXBkMIG7+n5k/rSf&#xA;8kfKupx+SNAu0uoU0q4MGpLZCNy8ci2ot3COWp+9dfVbb7RNMdygyhAEC7MR9tF67k3EdirsVdir&#xA;sVdirsVdirsVdirGfN3mibRb6xTnHBZvbX95d3EoqoWzhDKteS9Wk5U6kKdxirynzJ+Ys+t6FPov&#xA;mH4Lu90y9ItrRXgEN7HBCIGkaG5n5Qu00lVdiOPp8krXKjISmMf8Rr7br7kw18dLLxJco89gdvK+&#xA;rJfyF13y9D5N0PRbdp/0nParNcLI0skfMR8jw5syoOI+ygA9sicsYZfCP17H5ji+4sDr45yAP4fT&#xA;yA+n0nlz3D1ckAEk0A3JOXsmlZXUOhDKwqrDcEHoQcVbxV2KuxV2KuxVakkcgJjYOASpKkGhHUbY&#xA;ql50q/JJGs3gr2CWe332+Ku/RN//ANXq8/4Cz/7J8VS7VvL9hNLZHVdYlaT1WjsRcLYjnLJGwaNA&#xA;1v8AGWj5Hhv0rTbFXgn5rvBJ5qm07yvcG9mtLf6vdXKpapb27Fi0kX7qKNGkO1VXv9oima7JIQ1M&#xA;ZEiNVXv+6h5uBrIxIPH9Pxv7HflJoPmOXVtLhsfME2nH6uwhZba1lKIsRoP3isD8PjgyZoS1uws8&#xA;I9V90AK7tuX7WGloTIqvVLv/AJx7+/8As2ezXXk/z81tMp873NwCjAwHTtN/eVH2PijC/F032zZO&#xA;yeaaJ5T8/eRGj1zUtZu9I0W5n9NtA05bS6+OQMUUxMsdpA0jqEUQRv8AEwFcUvabO3kvI2ktvMFz&#xA;KI3aKUR/UH4SoaPGxSBgHQ7MK7YoYL+cv5e+a/Muh2lppFy+o3EVwJKXJtofSUIwYrJHHEx5cgOP&#xA;Tvmw7P1EMUiZMJi3n99+SP5mSeSNK0r93cXtvd3U4iNwgFrFKIxwVz9r1WXmQDQU8Scz49oYfEMu&#xA;lDpzYcBpdrn5I/mVceU/L2nRtHdXtj9aM4aWKNbdJpAyQrJs0o2LmuwJoMcfaGETkeQNfFTA09Z8&#xA;meS/Mdh+W48uatqzrfy2T2ySxhXNoZA4URvsX4BwNz2+EjNTq8sZ5CYig2RFBT/Lfyn5i0VllvWN&#xA;tayJeevp7PGazzXzzQyrHbgQIRbsqNRmrRQAnE8sZkz3FUq13zJY6K1kt1HPI+oTG2tVgjMnKbgz&#xA;qhI2UvwIFdvoxV5l+YXlL8z/ADh54gfTlgsPLOlRvDb3EtyI3mkmHG4kT6uJZU2/c/sNx5UZeWKW&#xA;E/mcLny1q+naPDBZQC206EPHZQtDbhy8nIxozuwBO/xMSTuThHZeHP6pg373baLsvDnhxzBu+9f+&#xA;RurXU3nbS7VgoiW3lAoDWiwNTvj/ACbhh+9APH7+9jn7MwwwjKL46HXvfSuB1SXX+h2t/qFleXUk&#xA;kiWDGWCzqPQM37EzrTkzx78KtQHenKhCqtpek6fpVp9UsIvRtw7yCPkz0aRi7ULljuzHboMVReKu&#xA;xV2KuxV2KuxVLtU8uaDq08E+p6fBey21fq7TosnCrq54hqgHlGuKoOPTLTy15ftNP0hfQt4bm2jW&#xA;vxsRcXaCUsWrVn9Rqt13rirwv/nIP/lPI/8AmBh/4nJmx0v0PUdj/wBz/nFLvyG/8mDpn/GCf/kw&#xA;2DL/AHXyYaz/ABMe6P6H1FmveadirsVdirsVdirsVdirsVdiqW+Yf94Iv+Yyx/6jIcVeAf8AOQf/&#xA;ACnkf/MDD/xOTNjpfoeo7H/uf84sQ/KfzLa6B55i1O9W4ktLSzlPowRmRmcwOTx2A/lFSwHjlWQ+&#xA;j4BxNVM+BW9cMPn+KfXVldR3dnBdREGO4jSVCNxxdQw/XmG6JWxV2KuxV2KuxV2KuxV2KoHRNb07&#xA;W9Ni1LTnkks5iwjeWGWBjwYo37uZY3HxKeq4qp+Yf94Iv+Yyx/6jIcVeAf8AOQf/ACnkf/MDD/xO&#xA;TNjpfoeo7H/uf84pZ+RUaSeftOjkUPG9vcK6MKggwMCCD2wZf7r5MNZ/iY90f0PqTNe807FXYq7F&#xA;XYq7FXYq7FVO6S4e2lS2kWG4ZGEMzL6io5FFYpVeQB3pUV8cVYTpPljzV5cXRFbW1vdC0aFoLq0W&#xA;D6uzRJbrFHIaNL6jBwZJCzgbkgdBgkaFpG6D1z8zrCSyjH1OVQt1aOSWWlEuo2P6s5mHtPjka4Jd&#xA;fsFu1l2TID6g8j/ODWrbXvMFrrFqONvPbLEgJBr6TMeQI2IPPbOl7D7TGpjICJiYEc/N3PZ+Hw8d&#xA;Xe7vyG/8mDpn/GCf/kw2bLL/AHXycXWf4mPdH9D6izXvNOxVRury1tEV7mVYld1iQsacnc0VV8ST&#xA;2GKpd5l83eXfLNrFda7eCyt5n9KKVkdgXoW4/ArU2B65biwzyGoi0E0lM/5sfl5BpdrqkutRCwvX&#xA;kjtpwkrBnhp6ikBCykch9oDrXLRo8pJjw7hHEG7z81vy+srCxv7nWI47PUld7GfhKyyCJuD04oaF&#xA;W2IOCOjykkCO4XiCf2Ot6TfaRHrFrdxy6XLEZ0uwaR+mBUsSaceNDWvTvlE4GJo8wyCno3mHR9Zi&#xA;eTTrj1RG7xyIyPFIrRsUascqo9OQpWlDkVSxpvJvI8tao1dx+lpxQ/L18VS3zFrfkXStFvL6XV3m&#xA;EUTFLeLVLh5JXI+GNEE5qWO369sjIWCEjm+fbprO+s4pX1JIrZp4OGnSXLSMYTKu8wMmzL1oPsgb&#xA;knccZhxSxTlHwzKXDL1iNerhP0+n7evkNjvZzE4g8QAsem+l9d/7EP51fSXltPq136wCuG43Ly03&#xA;FP22pm79kxOEcniDgsxrbh7/AHOwGbCOcv8AZftRv5LvpA89aeby8+rxelNzf608FD6Lbc1dCN/f&#xA;OoyV4XycLVcP5UUd6j193R9Het5L/wCr3/3Np/8AqvmC88gNS1rybbMlva6m15fzV9G3XV51QU/b&#xA;ml9crEg8TUn9lWO2KovRvKulTqupT6hPql0S3p3UV7dGKIH4Wjt6TPxXb4viLN3PQBVKvzD/ACmt&#xA;PN2lw2MWozWHCVZZJpWnvSwRWCoBNOFXdya9czNJq/BN1bGUbYrP/wA412b+WLXQ4dekjMVzLd3V&#xA;wbfmJXdVSMLH6wWMIqnuS1fozKHap4zLh6Vz/Yx8PZq//wCcabG40HTNJh1x4PqLTy3E5tzIZ5Z2&#xA;HxcDOFjCogWi9epxj2qRIy4efn+xfDZ75Y/LbQ9D8mN5WZpLy1uLd7a/lZ3QzCXn6nFVb91X1G+w&#xA;fpPXMDUag5ZGRZxFLPJn5fW/l6SK8muPrOoxx3cPqJzVOF7eNeOD6jSyOQzKOTuTt75Qll+KpANS&#xA;0K9v9VmjikfUNFpYzSSRuAryxiURwF6JydZU5FOtV5HpkMn0n3Mo8w8Q1JCtkhbeRrq1ZyOlfrMe&#xA;w+XTPLtKbmf6k/8AcSetzD0/50f90GO/mApMlk1KgB9+1ajO09iSOHKOtx/S5MYg80Z+QX/KfaV/&#xA;zDzf8mGzsc/938nX9of4r/pX1JmueXQ9np9nZiX6tEEaeQyzvUs7u37TuxLMabCp2AAGwGKojFXY&#xA;q7FXYq7FXYq7FWDXfkTXENzNBrrlZ79tRmh9NYkJZlLK5Xk0gWOMRovJdu9aZDJ9J9zKPMPLdY/3&#xA;kj/5ibX/AKiY88s0f1n+pP8A3Enrs/0/50f90Fa98lax5tjWy0toVmgPrP67FF4/Z2IVt6tnSex+&#xA;QQ1Eyf5n6QubVRwi5dUz/KD8qfM+ia5pWv3j2xsfqxakcjNJSaAhfhKAftb753uTPGUKDqdV2hjy&#xA;YeAXez1zzVd6rZ6Bd3OlRiS8jCFavFHxjMiiaQNOUirHEWcczQ0pmI6VJ/y21/VtY8v2VxqMjXLX&#xA;Fja3q3pj4BzdmR/T5okULtEqqDwUUr8QBxVl2KuxV2KuxV2KuxV2Kqdx/vPL/qN+rIZPpPuZR5h8&#xA;8ayaWaGlf9Jtdh/zEx55bovrP9Sf+4k9dn+n/Oj/ALoJj+Tx8x6drfoWukRwpfXMsups5DN6U8ry&#xA;F0MJMamMCJf3h+IVABNK9Z2LOM85IlxVjEeuwHD395s/2um18SMYsV6ifnb3LTbMWOnWtkH9QWsM&#xA;cIcinL01C1p70zqXUJL+YXmmbyr5N1PXoIFuZrJEMcLsVUtJIsQLEAmi86079NuuX6bD4mQRO1ok&#xA;aDFPyK/MbU/OWiXsepQKl1pbxxm4R3b1VlDEFg5Yhhw68t/bMntHSjFIVyLGErem5r2bsVdirsVd&#xA;irsVdiqncf7zy/6jfqyGT6T7mUeYfPGsf7yR/wDMTa/9RMeeWaP6z/Un/uJPXZ/p/wA6P+6DOvy5&#xA;vbO01S5e7njt0aDirSuqAnmpoCxGbj2bzwx5pGchEcPU11DhdqY5SgBEE7vUFZWUMpDKwqrDcEHO&#xA;9BBFh5whiH5vajHpv5davfSWcGoLAIG+qXQZoHP1mML6iqVLAHeld++2ZeijxZQLr3e5jLkwr/nG&#xA;vXk1XSNXVtOtLO5tXgSW4tI/SM4KycTKgPHktCKgCuZnauPhkNybvmxxl7LmpbHYq7FXYq7FXYq7&#xA;FVO4/wB55f8AUb9WQyfSfcyjzD541j/eSP8A5ibX/qJjzyzR/Wf6k/8AcSeuz/T/AJ0f90EdmK3M&#xA;z0v86vL0luYEsrstZkW8rFUUF4wAeNW3GeiR7XhjhEGJ+kdzpR2LkySkRIbE9/6kp/ML839Ofydq&#xA;S2mmia5Kx+kl9FFPb8vVSjNGWIYr9paj7QGbHsntPHn1McYEhxX9xLRrOx8mHEZkxIDGvyW/NcWu&#xA;nahDq9kklwrxBbu0gihlkUK1BOV4B+H7JpXNj7Q6vHpZQ+o8V/ZTjdndnz1ANEDh73r/AJZ8/aV5&#xA;gvXs7eGaGZEMg9ULRgCAd1J8c1Gk7ThnlwgEFv1nZeTBHiJBHkybNi6x2KuxV2KuxVLTqt+CQNGv&#xA;DTuHs9/vuMVU7jVr/wBCT/cLefZb9uz8P+YjIZPpPuZR5h4Bq95cmzU/UZxxnt26wmvGdDQUkO5p&#xA;QZ5lo8ceP64/TIfxdYkfzXq88jw8jzHd3jzVrfVbyWFZDpV0hbfiTACPoaVW+8ZHJpIRkR4sD/pv&#xA;0RKY5pEXwS+z9bEo9O1KFo/TF06rc/WHDm3X7UjSSAenKlSxanxVFNqZ0JnjN2YfTX8XdQ5xcgY8&#xA;gqhP6r/g77PKQ/sTh7qZ1o+nzMuxoTARUGo6y+OYscYibGSI/wBN/wAS5ZyyPPHL/Yf8UhdIu62E&#xA;UkNnKysCPUBh3CsQNzJXbLdZGXiETluPf+pr0mQHGDGJo+79bPvyrv7qPzOzLp1xKfq0g4o1uD9p&#xA;d/imUZmdjRAzcwfSe/y8nA7bkTg5Eeod3n5sj/Nv8zvMnlDRbW/0/S1hkluBC36REUkbhkZqILa6&#xA;9QMvDeq8aHqD17nQaWOaREj8v7Hjpypg13/zkR53j8m6fra6XYR3FxeXFrI0qSGGVYkR1aBBcCYc&#xA;OfF6gr0oa7ZnR7Mx+IY2eQ/HJj4hpvWP+ciPOtp5X0LVotLsop9S+srOLiKQxSehIFEluEufU4Ub&#xA;i3NftA0J7CHZmMzlGztX4OynIaeneUPPOv67+XZ8xvorrqgtJZ7e2QqIrqWPmFEADyTBWKD7a13+&#xA;Hlms1eEY5mINs4mwt8heeNU1i9/R2pxw/WGju7lJI24SrFbXr2aCS3HqKOfplwyzPToexbGZM5xV&#xA;TuP955f9Rv1ZDJ9J9zKPMPnvU/8AeZP+M9v/AMn0zyjB9X+bL/cl7HJy+I+9F5SzUbnyt5htbGS+&#xA;uLGWO0iQyyTMBxCAV5HfpTOqxdm6iZAjAm+TbPtTTxBJmNmPnVdMIIM6EHYg5nD2c14/yZ+cf1uK&#xA;faDRH/KD5S/UgdE1DTYtMgT1UQgNVRtvyOXajsLW5ZmYgSD5j9bj6XtrR4sYiZgEeR/U9U/Jy0mu&#xA;tUn1WAB7CKN7dpwRT1TwbgO9eO+Wdn9mZ9Pm/ex4fT5fo9zR2p2lgz4axy4vV5/peq3um6dfoqX1&#xA;rDdIh5Is8ayAHpUBgc6CMzHkaedUJPL+gyQRW8mm2r29vy9CFoIykfM1bgpWi8juaYRlld2UU6by&#xA;/oM0cUU2m2skcAKwI8EbKinchAV+EfLEZZDqVpGxRRQxJDCixxRqEjjQBVVVFAqgbAAZEm0qdlY2&#xA;VjbJa2VvHa2sdfTghRY415Es1FUACrEk4FVsVU7j/eeX/Ub9WQyfSfcyjzD571P/AHmT/jPb/wDJ&#xA;9M8owfV/my/3JexycviPvZD5c8vTa5dS28UywtEnqFnBIIqBTb55l9m9nS1UzEHhoW0arVDDEEi3&#xA;oXnqIw/l7rERNTHp8iEjvxjpnqnZ8OGcB3U8fqjcZH3vk/OvefQ1rNCEjhMiiVgWWMkciATuB1zG&#xA;00xwAXu3ZoniJ6Po7/nHn/lC73/tpS/8mIM1Ha396P6v6S7DQfQff+p6hmrc52KuxV2KuxV2Kqdx&#xA;/vPL/qN+rIZPpPuZR5h896n/ALzJ/wAZ7f8A5PpnlGD6v82X+5L2OTl8R97Pvyv/AOOvd/8AMP8A&#xA;8brnQ+y399L+r+kOs7X/ALse9lP5h/8AKC67/wAwU3/EDnoOk/vY+95nUfQfc+S86x0KXRQXZIni&#xA;K0EZRa/aFWJaldt6DMHDCXCJDucrJKNkHvfSf/OOfqf4FuvU/vP0g/Pp9r6vBXptmr7TvjjfPhH6&#xA;XO0VcJr+c9TzWuY7FXYq7FXYq7FXYqpXNrDcxiOYckWSOUAEj4onWRDt4MgxVVxVj35h/wDKC67/&#xA;AMwU3/EDmRpP72PvadR9B9z5LzrHQqNn/vOn0/rOUab+7Dbm+svov/nHn/lC73/tpS/8mIM03a39&#xA;6P6v6S7HQfQff+p6hmrc52KuxV2KuxV2KuxV2KuxVj35h/8AKC67/wAwU3/EDmRpP72PvadR9B9z&#xA;5LzrHQpZHqkMK28ezLIrOX5AUUE706nMHFqBGMR5OVkxGRJfS/8Azjs6v5Iu3Q1RtRkZT4g28BGa&#xA;ztQg5AR/N/SXN0IqBHm9RzWOa7FXYq7FXYq7FXYq7FXYqx78w/8AlBdd/wCYKb/iBzI0n97H3tOo&#xA;+g+58h6h9Z+pyLbCszgIh/l5Hjy/2Na50+fi4Dw83S4q4hfJLPLUDfo/0pow0NKwyGhqr1DL9DV+&#xA;/MPQQPh0Rt0/U5Grl6rB3fT/APzjuqr5JvFUAKuoyAAbAAQQZr+1RWQf1f0ly9Cbgfe9RzWOa7FX&#xA;Yq7FXYq7FXYq7FXYqx78w/8AlBdd/wCYKb/iBzI0n97H3tOo+g+58l51joUBoP8AxyLf5H/iRzG0&#xA;f90G/U/3hfSn/OPP/KF3v/bSl/5MQZqO1v70f1f0lz9B9B9/6nqGatznYq7FXYq7FXYq7FXYq7FW&#xA;PfmH/wAoLrv/ADBTf8QOZGk/vY+9p1H0H3PkvOsdCgNB/wCORb/I/wDEjmNo/wC6Dfqf7wvpT/nH&#xA;n/lC73/tpS/8mIM1Ha396P6v6S5+g+g+/wDU9QzVuc7FXYq7FXYq7FXYq7FXmPnP88LDQdTutJtN&#xA;Nlu721YxyySusUQalfhpzZh9AzZ6fs05IiRNAuFm1oiaA3eW+Zfze8569bzWk08dpYTqUltbeMAM&#xA;p2ozvzfp1+LNph0GPGb5lwcmrnLbowrM1xkBoP8AxyLf5H/iRzG0f90G/U/3hZn5V/MLzT5XjaDS&#xA;bpUtZHMslrIivGzkBSdxyGyjoRjn0mPLvIboxZ5w5PSdE/5yKQ8U1zSiv809k1R/yKkP/G+a7J2T&#xA;/Nl83Mh2h/OD2KyvLe9tIbu3YPDOgeNhQ7MK9s0xFGnYg2rYEuxV2KpadKvySRrN4K9glnt99vir&#xA;v0Tf/wDV6vP+As/+yfFXfom//wCr1ef8BZ/9k+KsL1f8jPLOr6ncale6lqTXV0/qTMr2ygsdtgLf&#xA;bMzHr8sIiIOwcaelhI2UH/0Lv5M/6uGp/wDIy2/7J8n/ACnm7/sY/ksfcxDXPyt8ry6nJ5d8o3F/&#xA;qmvxkC9nklgFhp4P7V3IkFS/8sKHme/Eb4/ynm7/ALE/ksfcx1Py08raTp8iXWsarKLAOLprNbKi&#xA;iCBru6fhKhKrFDwNOZYlqUpvlcNdliKB29wZy0uORsj72X6L+QGhapbzyLr+pxPbXVxaTREWTEPb&#xA;ytHXaHo4AdagGhGS/lHN/O+wfqY/lMXd96Yf9C06N/1Mep/8BZ/9UMf5Rz/zvsH6l/KYu772P2f5&#xA;f+dfKF43maXXrry1oKTww3lrbmxmZklmWH6zPBHFb2UYHMMzBZXzCJtyQ9f0C5OtWZnttbvkliIi&#xA;vLWRLISwT8QzwygW5Xmhbi3EkVBFdsVTP9E3/wD1erz/AICz/wCyfFVazsbqCUvLqFxdqRQRzLbh&#xA;Qaj4v3UUTV+nFUZirsVdiqSebvNumeV9Mjv7+rCaeK2ghUqrO8rb/E5VFCIGkZmIAVSa4qxw6t5h&#xA;89sYdAkl0byiSVm18DheXq9CtgrCsUZ/3+wqf2B+1irL9C0DR9B0yLTNItUtLKKpWNKkljuzuxqz&#xA;ux3ZmJJ74qxjTvIWg6pYPNfo0sV4zSSQqzR1YxvazBmjKl0mg4o6t4fKirJ9G0iHS7eaGN2kNxc3&#xA;F3LIwAJe5laVhsBsvLivsBiqPxVL9V0S01R7T628jW9pMLj6orAQyyJvGZlpVxG3xqtacgCa0GKq&#xA;1jpen2DXLWcCQG7ma5ueApzmenJz7tTfFUVirsVdirsVSDzvresaNobXmj2T6jqAkQR2aQyzmRRV&#xA;5F/dU9M+mrcXbblQUZiFKrCdX8kad+aGqxz65e38Ft5dP1YWMMQtI5bh0V5Z2Sb1pE5fDxjY8lXi&#xA;1fixV6JoHl/T9C08WFiZ2h5F2e5nmuZGdqVJknaRu3StMVTHFVK1tYbWBYIRxjSvEEk9SSevzxVV&#xA;xV2KuxV2KuxV2Kv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>111.000000</stDim:w>
            <stDim:h>281.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">fig7_28</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:0C475A166C7AEC11A6E39626A530DB14</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0C475A166C7AEC11A6E39626A530DB14</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:412e19c5-fc95-4109-9ebc-da3ff2eb8e43</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:85fe6d1e-92e4-400d-8240-2310ffd212bc</stRef:instanceID>
            <stRef:documentID>uuid:412e19c5-fc95-4109-9ebc-da3ff2eb8e43</stRef:documentID>
            <stRef:originalDocumentID>uuid:412e19c5-fc95-4109-9ebc-da3ff2eb8e43</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0C475A166C7AEC11A6E39626A530DB14</stEvt:instanceID>
                  <stEvt:when>2022-01-21T13:23:36-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -281 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 281 li
111 281 li
111 0 li
cp
clp
.850123 lw
2 lc
0 lj
2.6131 ml
[] 0 dsh
true sadj
35.4448 27.8589 mo
35.4448 1.28516 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.180392 .188235 .568627 rgb
@
35.4448 3.125 mo
32.688 4.47314 li
32.688 9.92188 li
35.4448 8.57422 li
38.1372 9.92188 li
38.1372 4.47314 li
35.4448 3.125 li
35.4448 11.3911 mo
32.688 12.7339 li
32.688 18.1841 li
35.4448 16.8398 li
38.1372 18.1841 li
38.1372 12.7339 li
35.4448 11.3911 li
cp
35.4448 19.5938 mo
32.688 20.9409 li
32.688 26.3911 li
35.4448 25.043 li
38.1372 26.3911 li
38.1372 20.9409 li
35.4448 19.5938 li
cp
ef
.56665 lw
0 lc
1 lj
35.4448 3.125 mo
32.688 4.47314 li
32.688 9.92188 li
35.4448 8.57422 li
38.1372 9.92188 li
38.1372 4.47314 li
35.4448 3.125 li
cp
35.4448 11.3911 mo
32.688 12.7339 li
32.688 18.1841 li
35.4448 16.8398 li
38.1372 18.1841 li
38.1372 12.7339 li
35.4448 11.3911 li
35.4448 19.5938 mo
32.688 20.9409 li
32.688 26.3911 li
35.4448 25.043 li
38.1372 26.3911 li
38.1372 20.9409 li
35.4448 19.5938 li
cp
@
.850123 lw
2 lc
0 lj
74.0273 64.5313 mo
100.598 64.5313 li
@
98.7617 64.5313 mo
97.4141 61.7729 li
91.9648 61.7729 li
93.3125 64.5313 li
91.9648 67.2231 li
97.4141 67.2231 li
98.7617 64.5313 li
90.4961 64.5313 mo
89.1484 61.7729 li
83.6992 61.7729 li
85.0469 64.5313 li
83.6992 67.2231 li
89.1484 67.2231 li
90.4961 64.5313 li
cp
82.2891 64.5313 mo
80.9453 61.7729 li
75.4961 61.7729 li
76.8438 64.5313 li
75.4961 67.2231 li
80.9453 67.2231 li
82.2891 64.5313 li
cp
ef
.56665 lw
0 lc
1 lj
98.7617 64.5313 mo
97.4141 61.7729 li
91.9648 61.7729 li
93.3125 64.5313 li
91.9648 67.2231 li
97.4141 67.2231 li
98.7617 64.5313 li
cp
90.4961 64.5313 mo
89.1484 61.7729 li
83.6992 61.7729 li
85.0469 64.5313 li
83.6992 67.2231 li
89.1484 67.2231 li
90.4961 64.5313 li
82.2891 64.5313 mo
80.9453 61.7729 li
75.4961 61.7729 li
76.8438 64.5313 li
75.4961 67.2231 li
80.9453 67.2231 li
82.2891 64.5313 li
cp
@
.85011 lw
29.3242 33.1841 mo
29.3242 48.063 li
41.5039 48.063 li
41.5039 33.1841 li
.65098 .0666667 .129412 rgb
@
2.83465 lw
35.4141 48.0391 mo
35.4141 58.4688 li
@
1.41704 lw
32.2622 54.1211 mo
38.5659 54.1211 li
@
29.5039 58.8359 mo
41.3198 58.8359 li
41.3198 73.0391 li
29.5039 73.0391 li
29.5039 58.8359 li
cp
.407843 .658824 .180392 rgb
ef
29.5039 73.0391 mo
41.3198 73.0391 li
41.3198 137.262 li
29.5039 137.262 li
29.5039 73.0391 li
cp
.639216 .168627 .509804 rgb
ef
30.3789 110.508 mo
17.4771 110.508 li
17.4771 201.914 li
31.5122 201.914 li
31.5122 189.09 li
35.4141 189.09 li
35.4141 157.16 li
31.5122 157.16 li
31.5122 131.324 li
30.3789 131.324 li
30.3789 110.508 li
.890196 .611765 .0470588 rgb
ef
35.23 163.484 mo
65.5352 163.484 li
66.3906 163.484 67.0898 164.184 67.0898 165.035 cv
67.0898 181.191 li
67.0898 182.047 66.3867 182.746 65.5352 182.746 cv
35.23 182.746 li
35.23 163.484 li
.909804 .45098 .137255 rgb
ef
42.5698 182.75 mo
64.7344 182.75 li
64.7344 247.57 li
79.3086 251.934 li
79.3086 257.648 li
28.0039 257.648 li
28.0039 251.934 li
42.5698 247.523 li
42.5698 182.75 li
.2 .4 .690196 rgb
ef
gsave
0 281 mo
111 281 li
111 0 li
0 0 li
0 281 li
cp
clp
3.68504 lw
35.4141 58.4688 mo
35.4141 68.7539 li
0 .670588 .933333 rgb
@
.42491 lw
53.6519 124.773 mo
69.3242 112.773 li
.332031 122.395 mo
63.7383 122.395 li
.332031 115.426 mo
74.0273 115.426 li
.332031 64.5313 mo
74.0273 64.5313 li
.129412 .117647 .117647 rgb
@
grestore
1.41732 lw
35.4141 64.5313 mo
21.2769 75.3521 li
.129412 .117647 .117647 rgb
@
1.41392 lw
0 lj
27.7339 74.0859 mo
20.4063 76.02 li
24.1841 69.4531 li
@
1.41732 lw
1 lj
53.6519 257.648 mo
31.375 274.703 li
@
1.41392 lw
0 lj
37.832 273.438 mo
30.5078 275.371 li
34.2813 268.801 li
@
gsave
0 281 mo
111 281 li
111 0 li
0 0 li
0 281 li
cp
clp
.42491 lw
1 lj
53.6519 168.711 mo
53.6519 274.637 li
.332031 257.648 mo
110.883 257.648 li
.332031 173.113 mo
74.0273 173.113 li
35.4448 27.8589 mo
35.4141 144.547 li
24.4922 81.4258 mo
24.4922 204.363 li
12.293 124.773 mo
27.9648 112.773 li
@
grestore
.85039 lw
1 lj
24.4922 115.434 mo
17.168 121.039 li
.298039 .290196 .290196 rgb
@
18.8979 121.461 mo
15.395 122.398 li
17.2109 119.262 li
18.8979 121.461 li
cp
ef
53.6519 173.113 mo
26.7271 173.113 li
@
27.8438 174.5 mo
24.4922 173.113 li
27.8438 171.727 li
27.8438 174.5 li
cp
ef
15.395 122.398 mo
33.1802 122.398 li
@
32.063 121.012 mo
35.4141 122.398 li
32.063 123.785 li
32.063 121.012 li
cp
ef
24.4922 173.113 mo
24.4922 117.664 li
@
23.105 118.781 mo
24.4922 115.434 li
25.8789 118.781 li
23.105 118.781 li
cp
ef
53.6519 218.492 mo
53.6519 175.348 li
@
52.2661 176.465 mo
53.6519 173.113 li
55.0391 176.465 li
52.2661 176.465 li
cp
ef
.850123 lw
2 lc
0 lj
53.6519 168.711 mo
53.6519 142.141 li
.180392 .188235 .568627 rgb
@
53.6519 143.977 mo
50.8979 145.324 li
50.8979 150.773 li
53.6519 149.426 li
56.3477 150.773 li
56.3477 145.324 li
53.6519 143.977 li
53.6519 152.242 mo
50.8979 153.59 li
50.8979 159.035 li
53.6519 157.691 li
56.3438 159.039 li
56.3477 153.59 li
53.6519 152.242 li
cp
53.6519 160.445 mo
50.8979 161.793 li
50.8979 167.242 li
53.6519 165.895 li
56.3477 167.242 li
56.3477 161.793 li
53.6519 160.445 li
cp
ef
.56665 lw
0 lc
1 lj
53.6519 143.977 mo
50.8979 145.324 li
50.8979 150.773 li
53.6519 149.426 li
56.3477 150.773 li
56.3477 145.324 li
53.6519 143.977 li
cp
53.6519 152.242 mo
50.8979 153.59 li
50.8979 159.035 li
53.6519 157.691 li
56.3438 159.039 li
56.3477 153.59 li
53.6519 152.242 li
53.6519 160.445 mo
50.8979 161.793 li
50.8979 167.242 li
53.6519 165.895 li
56.3477 167.242 li
56.3477 161.793 li
53.6519 160.445 li
cp
@
.850123 lw
2 lc
0 lj
74.0273 173.113 mo
100.598 173.113 li
@
98.7617 173.113 mo
97.4141 170.359 li
91.9648 170.359 li
93.3125 173.113 li
91.9648 175.809 li
97.4141 175.809 li
98.7617 173.113 li
90.4961 173.113 mo
89.1484 170.359 li
83.6992 170.359 li
85.0469 173.113 li
83.6992 175.809 li
89.1484 175.809 li
90.4961 173.113 li
cp
82.2891 173.113 mo
80.9453 170.359 li
75.4961 170.359 li
76.8438 173.113 li
75.4961 175.809 li
80.9453 175.809 li
82.2891 173.113 li
cp
ef
.56665 lw
0 lc
1 lj
98.7617 173.113 mo
97.4141 170.359 li
91.9648 170.359 li
93.3125 173.113 li
91.9648 175.809 li
97.4141 175.809 li
98.7617 173.113 li
cp
90.4961 173.113 mo
89.1484 170.359 li
83.6992 170.359 li
85.0469 173.113 li
83.6992 175.809 li
89.1484 175.809 li
90.4961 173.113 li
82.2891 173.113 mo
80.9453 170.359 li
75.4961 170.359 li
76.8438 173.113 li
75.4961 175.809 li
80.9453 175.809 li
82.2891 173.113 li
cp
@
.850123 lw
2 lc
0 lj
74.0273 115.426 mo
100.598 115.426 li
@
98.7617 115.426 mo
97.4141 112.672 li
91.9648 112.672 li
93.3125 115.426 li
91.9648 118.121 li
97.4141 118.121 li
98.7617 115.426 li
90.4961 115.426 mo
89.1484 112.672 li
83.6992 112.672 li
85.0469 115.426 li
83.6992 118.121 li
89.1484 118.121 li
90.4961 115.426 li
cp
82.2891 115.426 mo
80.9453 112.672 li
75.4961 112.672 li
76.8438 115.426 li
75.4961 118.121 li
80.9453 118.121 li
82.2891 115.426 li
cp
ef
.56665 lw
0 lc
1 lj
98.7617 115.426 mo
97.4141 112.672 li
91.9648 112.672 li
93.3125 115.426 li
91.9648 118.121 li
97.4141 118.121 li
98.7617 115.426 li
cp
90.4961 115.426 mo
89.1484 112.672 li
83.6992 112.672 li
85.0469 115.426 li
83.6992 118.121 li
89.1484 118.121 li
90.4961 115.426 li
82.2891 115.426 mo
80.9453 112.672 li
75.4961 112.672 li
76.8438 115.426 li
75.4961 118.121 li
80.9453 118.121 li
82.2891 115.426 li
cp
@
1.41732 lw
35.4141 64.5313 mo
58.3008 64.5313 li
.129412 .117647 .117647 rgb
@
0 lj
52.3911 61.605 mo
59.3984 64.5269 li
52.3911 67.457 li
@
1 lj
35.4141 64.5313 mo
35.438 41.7188 li
@
0 lj
32.5078 47.625 mo
35.438 40.6211 li
38.3589 47.6289 li
@
.85011 lw
1 lj
35.4141 122.398 mo
35.4141 66.7622 li
.298039 .290196 .290196 rgb
@
34.0269 67.8789 mo
35.4141 64.5313 li
36.8008 67.8789 li
34.0269 67.8789 li
cp
ef
1.41732 lw
53.6519 257.648 mo
53.6519 220.434 li
.129412 .117647 .117647 rgb
@
0 lj
50.7271 226.344 mo
53.6519 219.336 li
56.5781 226.344 li
@
1 lj
53.6519 257.648 mo
85.4727 257.648 li
@
0 lj
79.5664 254.723 mo
86.5742 257.648 li
79.5664 260.574 li
@
53.4258 16.457 mo
53.2109 16.457 53.1089 16.23 53.1089 15.8359 cv
53.1089 15.3398 53.2729 14.6563 53.5078 14.207 cv
53.688 13.8628 53.895 13.6479 54.082 13.5161 cv
54.2539 13.3789 54.4771 13.2969 54.75 13.2969 cv
55 13.2969 55.2539 13.3359 55.4058 13.4258 cv
55.3521 13.8281 55.2271 14.5391 55.0469 14.8628 cv
54.875 15.1802 54.668 15.4219 54.4258 15.6841 cv
54.082 16.0508 53.6411 16.457 53.4258 16.457 cv
55.7656 18.9141 mo
55.5313 18.8979 li
55.145 18.8711 55.0981 18.7969 55.1909 18.2969 cv
55.4839 16.582 55.8008 14.7031 56.2148 13.0269 cv
56.0547 12.9922 li
55.7734 12.9302 55.4409 12.855 55.2188 12.855 cv
55.0469 12.855 54.8481 12.875 54.6948 12.9102 cv
54.3711 12.9731 53.7852 13.2188 53.3281 13.6211 cv
52.688 14.1802 52.293 15.1519 52.293 16.0981 cv
52.293 16.645 52.5352 17.0981 52.9019 17.0981 cv
53.2188 17.0981 53.5781 16.8521 53.895 16.6172 cv
54.2729 16.332 54.6758 15.9448 54.9731 15.5859 cv
54.9922 15.5859 li
54.8398 16.332 54.6758 17.27 54.4688 18.355 cv
54.3789 18.8521 54.2891 18.9258 53.8398 18.9883 cv
53.6411 19.0161 li
53.625 19.293 li
55.7383 19.188 li
55.7656 18.9141 li
cp
49.105 15.6758 mo
48.8628 15.6758 48.6289 15.855 48.6289 16.1128 cv
48.6289 16.2852 48.7109 16.3481 48.7539 16.3672 cv
49.0781 16.4492 49.332 16.6841 49.332 17.0229 cv
49.332 17.3867 49.0698 17.6641 48.5938 17.8633 cv
48.7271 18.2031 li
49.3481 18.0078 50.0313 17.5659 50.0313 16.7729 cv
50.0313 16.0698 49.4922 15.6758 49.105 15.6758 cv
49.105 15.6758 li
cp
47.0078 16.813 mo
45.9609 16.813 li
46.2813 16.2188 46.645 15.6602 46.9961 15.125 cv
47.0078 15.125 li
47.0078 16.813 li
cp
47.52 14.4063 mo
47.2148 14.4063 li
46.625 15.2031 46.063 16.0742 45.5039 16.938 cv
45.5039 17.1211 li
47.0078 17.1211 li
47.0078 17.5313 li
47.0078 17.9219 46.98 17.9531 46.457 17.9878 cv
46.457 18.188 li
48.0161 18.188 li
48.0161 17.9878 li
47.5469 17.9531 47.52 17.9219 47.52 17.5313 cv
47.52 17.1211 li
48.0781 17.1211 li
48.0781 16.813 li
47.52 16.813 li
47.52 14.4063 li
cp
42.332 16.457 mo
42.1172 16.457 42.0161 16.23 42.0161 15.8359 cv
42.0161 15.3398 42.1802 14.6563 42.4141 14.207 cv
42.5938 13.8628 42.8008 13.6479 42.9878 13.5161 cv
43.1602 13.3789 43.3872 13.2969 43.6563 13.2969 cv
43.9058 13.2969 44.1602 13.3359 44.313 13.4258 cv
44.2578 13.8281 44.1328 14.5391 43.9531 14.8628 cv
43.7808 15.1802 43.5742 15.4219 43.332 15.6841 cv
42.9878 16.0508 42.5469 16.457 42.332 16.457 cv
42.332 16.457 li
cp
44.6719 18.9141 mo
44.438 18.8979 li
44.0508 18.8711 44.0078 18.7969 44.0981 18.2969 cv
44.395 16.582 44.707 14.7031 45.1211 13.0269 cv
44.9609 12.9922 li
44.6802 12.9302 44.3481 12.855 44.1211 12.855 cv
43.9531 12.855 43.7539 12.875 43.6021 12.9102 cv
43.2769 12.9731 42.6909 13.2188 42.2339 13.6211 cv
41.5938 14.1802 41.1992 15.1519 41.1992 16.0981 cv
41.1992 16.645 41.4409 17.0981 41.8091 17.0981 cv
42.125 17.0981 42.4839 16.8521 42.8008 16.6172 cv
43.1758 16.332 43.582 15.9448 43.8789 15.5859 cv
43.8979 15.5859 li
43.7461 16.332 43.582 17.27 43.375 18.355 cv
43.2852 18.8521 43.1948 18.9258 42.7461 18.9883 cv
42.5469 19.0161 li
42.5313 19.293 li
44.645 19.188 li
44.6719 18.9141 li
cp
f
57.8398 16.1172 mo
58.3477 16.1172 58.582 16.6128 58.582 17.1289 cv
58.582 17.5659 58.4688 18 58.0078 18 cv
57.5547 18 57.25 17.5078 57.25 16.7339 cv
57.25 16.5469 57.2578 16.3979 57.2852 16.27 cv
57.4375 16.188 57.6289 16.1172 57.8398 16.1172 cv
58.9727 14.3359 mo
58.7188 14.375 58.4492 14.4492 58.2148 14.5313 cv
57.5742 14.7617 56.6914 15.438 56.6914 16.7661 cv
56.6914 17.6992 57.2344 18.2578 57.8984 18.2578 cv
58.6133 18.2578 59.1211 17.6563 59.1211 16.9141 cv
59.1211 16.2578 58.6836 15.7539 58.0664 15.7539 cv
57.9453 15.7539 57.8281 15.7969 57.707 15.8521 cv
57.3281 16.0269 li
57.4961 15.3052 58.0117 14.9302 58.3672 14.7661 cv
58.582 14.6641 58.8164 14.605 59.0078 14.5659 cv
58.9727 14.3359 li
cp
f
109.047 62.8711 mo
108.824 64.6128 li
108.922 64.5742 109.133 64.5161 109.391 64.5161 cv
110.043 64.5161 110.355 64.8828 110.355 65.457 cv
110.355 65.938 110.086 66.3159 109.641 66.3198 cv
109.301 66.3281 109.07 66.1411 108.957 66.0391 cv
108.898 65.98 108.82 66.0122 108.754 66.0591 cv
108.695 66.1172 108.645 66.1909 108.617 66.2622 cv
108.586 66.3359 108.609 66.4102 108.676 66.4771 cv
108.785 66.5742 109.008 66.6841 109.289 66.6841 cv
109.617 66.6802 110.039 66.5269 110.363 66.2539 cv
110.723 65.9492 110.883 65.5981 110.883 65.2188 cv
110.883 64.6909 110.508 64.1328 109.73 64.1328 cv
109.574 64.1328 109.344 64.1992 109.148 64.2661 cv
109.277 63.3398 li
110.609 63.3398 li
110.766 62.9258 li
110.715 62.8711 li
109.047 62.8711 li
105.281 64.8828 mo
105.066 64.8828 104.969 64.6563 104.969 64.2622 cv
104.969 63.7661 105.129 63.082 105.363 62.6328 cv
105.547 62.2891 105.75 62.0742 105.941 61.938 cv
106.109 61.8052 106.336 61.7231 106.605 61.7231 cv
106.859 61.7231 107.109 61.7578 107.262 61.8481 cv
107.211 62.2539 107.082 62.9648 106.902 63.2891 cv
106.73 63.6021 106.523 63.8481 106.281 64.105 cv
105.941 64.4771 105.5 64.8828 105.281 64.8828 cv
105.281 64.8828 li
cp
107.621 67.3398 mo
107.391 67.3198 li
107.004 67.2969 106.957 67.2231 107.047 66.7188 cv
107.344 65.0078 107.66 63.125 108.074 61.4531 cv
107.91 61.4141 li
107.633 61.355 107.301 61.2813 107.074 61.2813 cv
106.902 61.2813 106.703 61.3008 106.551 61.3359 cv
106.227 61.3979 105.645 61.6411 105.184 62.0469 cv
104.547 62.605 104.148 63.5742 104.148 64.52 cv
104.148 65.0698 104.391 65.5229 104.762 65.5229 cv
105.074 65.5229 105.438 65.2769 105.75 65.043 cv
106.129 64.7539 106.535 64.3672 106.832 64.0078 cv
106.848 64.0078 li
106.695 64.7539 106.535 65.6909 106.328 66.7813 cv
106.238 67.2769 106.148 67.3481 105.695 67.4102 cv
105.5 67.438 li
105.48 67.7188 li
107.598 67.6089 li
107.621 67.3398 li
cp
f
109.75 113.695 mo
109.438 113.695 109.156 113.848 108.988 114.035 cv
108.746 114.398 li
108.93 114.535 li
109.043 114.332 109.277 114.051 109.602 114.051 cv
109.906 114.051 110.117 114.23 110.117 114.559 cv
110.117 114.934 109.68 115.188 109.098 115.375 cv
109.16 115.586 li
109.246 115.543 109.402 115.496 109.582 115.496 cv
109.949 115.496 110.34 115.711 110.34 116.313 cv
110.344 116.953 109.961 117.219 109.637 117.219 cv
109.301 117.219 109.109 117.063 108.977 116.941 cv
108.91 116.887 108.832 116.898 108.777 116.949 cv
108.711 117.004 108.652 117.078 108.621 117.156 cv
108.598 117.23 108.621 117.313 108.684 117.367 cv
108.801 117.469 109.023 117.578 109.281 117.578 cv
109.719 117.578 110.883 117.145 110.883 116.133 cv
110.883 115.664 110.566 115.262 110.039 115.164 cv
110.039 115.148 li
110.242 115.047 110.379 114.949 110.469 114.859 cv
110.586 114.746 110.645 114.605 110.645 114.465 cv
110.645 114.031 110.309 113.695 109.75 113.695 cv
105.32 115.777 mo
105.102 115.777 105.004 115.551 105.004 115.156 cv
105.004 114.66 105.164 113.977 105.398 113.527 cv
105.578 113.184 105.785 112.969 105.977 112.836 cv
106.148 112.699 106.371 112.617 106.641 112.617 cv
106.895 112.617 107.145 112.652 107.301 112.742 cv
107.246 113.148 107.117 113.859 106.938 114.184 cv
106.77 114.5 106.563 114.742 106.316 115.004 cv
105.977 115.371 105.535 115.777 105.32 115.777 cv
105.32 115.777 li
cp
107.66 118.234 mo
107.426 118.219 li
107.039 118.191 106.992 118.117 107.082 117.613 cv
107.379 115.902 107.695 114.023 108.109 112.348 cv
107.945 112.313 li
107.668 112.25 107.336 112.176 107.109 112.176 cv
106.938 112.176 106.742 112.195 106.59 112.23 cv
106.266 112.293 105.68 112.535 105.219 112.941 cv
104.582 113.5 104.184 114.473 104.184 115.418 cv
104.184 115.965 104.43 116.418 104.797 116.418 cv
105.113 116.418 105.473 116.172 105.785 115.938 cv
106.164 115.652 106.57 115.266 106.867 114.902 cv
106.887 114.902 li
106.73 115.652 106.57 116.59 106.363 117.676 cv
106.273 118.172 106.184 118.246 105.734 118.309 cv
105.535 118.336 li
105.516 118.613 li
107.633 118.504 li
107.66 118.234 li
cp
f
110.68 175.195 mo
110.746 174.941 110.813 174.68 110.883 174.391 cv
110.668 174.336 li
110.508 174.703 110.434 174.727 110.117 174.727 cv
109.137 174.727 li
109.875 173.891 li
110.387 173.309 110.66 172.922 110.66 172.379 cv
110.66 171.762 110.211 171.383 109.672 171.383 cv
109.328 171.383 109.047 171.535 108.867 171.738 cv
108.539 172.199 li
108.719 172.344 li
108.875 172.105 109.113 171.797 109.484 171.797 cv
109.898 171.797 110.133 172.094 110.133 172.57 cv
110.133 173.094 109.758 173.586 109.395 174.031 cv
109.113 174.379 108.785 174.727 108.465 175.031 cv
108.465 175.195 li
110.68 175.195 li
105.23 173.465 mo
105.012 173.465 104.914 173.238 104.914 172.844 cv
104.914 172.348 105.074 171.664 105.313 171.215 cv
105.492 170.871 105.695 170.656 105.887 170.523 cv
106.059 170.387 106.281 170.305 106.551 170.305 cv
106.805 170.305 107.055 170.344 107.211 170.434 cv
107.156 170.836 107.027 171.547 106.852 171.871 cv
106.68 172.188 106.473 172.43 106.23 172.691 cv
105.887 173.059 105.445 173.465 105.23 173.465 cv
105.23 173.465 li
cp
107.57 175.922 mo
107.336 175.906 li
106.949 175.879 106.902 175.809 106.992 175.305 cv
107.289 173.59 107.605 171.711 108.02 170.035 cv
107.855 170 li
107.578 169.938 107.246 169.863 107.02 169.863 cv
106.852 169.863 106.652 169.883 106.496 169.918 cv
106.176 169.98 105.59 170.227 105.129 170.629 cv
104.492 171.188 104.094 172.16 104.094 173.105 cv
104.094 173.652 104.34 174.105 104.707 174.105 cv
105.023 174.105 105.383 173.859 105.695 173.629 cv
106.074 173.34 106.48 172.953 106.777 172.594 cv
106.797 172.594 li
106.641 173.34 106.48 174.277 106.273 175.367 cv
106.184 175.859 106.094 175.934 105.645 175.996 cv
105.445 176.023 li
105.426 176.301 li
107.543 176.195 li
107.57 175.922 li
cp
f
55.9883 138.637 mo
55.9883 139.055 55.9609 139.086 55.4448 139.121 cv
55.4448 139.32 li
57.0508 139.32 li
57.0508 139.121 li
56.5313 139.086 56.5 139.055 56.5 138.637 cv
56.5 135.512 li
56.1445 135.648 55.8047 135.758 55.4341 135.82 cv
55.4341 136.016 li
55.7383 136.031 li
55.9727 136.043 55.9883 136.063 55.9883 136.332 cv
55.9883 138.637 li
51.7378 137.59 mo
51.5229 137.59 51.4258 137.367 51.4258 136.969 cv
51.4258 136.477 51.5859 135.789 51.8198 135.34 cv
52 135 52.207 134.785 52.395 134.648 cv
52.5659 134.512 52.793 134.434 53.063 134.434 cv
53.313 134.434 53.5659 134.469 53.7188 134.559 cv
53.6641 134.965 53.5391 135.676 53.3589 135.996 cv
53.188 136.313 52.98 136.555 52.7378 136.816 cv
52.395 137.188 51.957 137.59 51.7378 137.59 cv
51.7378 137.59 li
cp
54.0781 140.051 mo
53.8438 140.031 li
53.457 140.004 53.4141 139.934 53.5039 139.43 cv
53.8008 137.719 54.1128 135.836 54.5269 134.16 cv
54.3672 134.129 li
54.0898 134.063 53.7539 133.992 53.5308 133.992 cv
53.3589 133.992 53.1602 134.008 53.0078 134.047 cv
52.6841 134.109 52.0981 134.352 51.6411 134.758 cv
51 135.313 50.605 136.285 50.605 137.23 cv
50.605 137.781 50.8481 138.23 51.2188 138.23 cv
51.5313 138.23 51.8911 137.988 52.207 137.754 cv
52.5859 137.465 52.9878 137.078 53.2852 136.719 cv
53.3052 136.719 li
53.1519 137.465 52.9878 138.402 52.7808 139.492 cv
52.6909 139.988 52.6021 140.059 52.1519 140.121 cv
51.957 140.148 li
51.938 140.43 li
54.0508 140.32 li
54.0781 140.051 li
cp
f
14.2539 109.039 mo
13.2031 109.039 li
13.5269 108.445 13.8872 107.887 14.2422 107.355 cv
14.2539 107.355 li
14.2539 109.039 li
14.7661 106.633 mo
14.457 106.633 li
13.8711 107.434 13.3052 108.301 12.7461 109.164 cv
12.7461 109.352 li
14.2539 109.352 li
14.2539 109.762 li
14.2539 110.148 14.2231 110.18 13.7031 110.215 cv
13.7031 110.414 li
15.2622 110.414 li
15.2622 110.215 li
14.793 110.18 14.7661 110.148 14.7661 109.762 cv
14.7661 109.352 li
15.3242 109.352 li
15.3242 109.039 li
14.7661 109.039 li
14.7661 106.633 li
cp
8.93018 103.402 mo
8.85498 103.699 li
9.55908 103.754 9.64111 103.809 9.51611 104.453 cv
8.79297 108.164 li
8.66797 108.801 8.61279 108.867 7.91406 108.922 cv
7.83984 109.219 li
11.793 109.219 li
11.918 108.965 12.2969 108.047 12.395 107.77 cv
12.0698 107.66 li
11.8281 108.102 11.6211 108.391 11.4141 108.578 cv
11.1992 108.785 10.8281 108.84 10.4492 108.84 cv
10.0898 108.84 9.81982 108.813 9.67578 108.723 cv
9.53125 108.621 9.51611 108.379 9.57813 108.055 cv
10.27 104.453 li
10.3979 103.816 10.4688 103.754 11.1519 103.699 cv
11.2148 103.402 li
8.93018 103.402 li
cp
f
15.0039 132.797 mo
14.7813 134.535 li
14.8789 134.496 15.0859 134.438 15.3438 134.438 cv
16 134.438 16.313 134.805 16.313 135.379 cv
16.313 135.859 16.043 136.238 15.5981 136.242 cv
15.2539 136.25 15.0269 136.063 14.9141 135.961 cv
14.8521 135.902 14.7769 135.934 14.7109 135.98 cv
14.6479 136.039 14.6021 136.113 14.5698 136.184 cv
14.543 136.258 14.5659 136.336 14.6328 136.398 cv
14.7378 136.496 14.9609 136.605 15.2422 136.605 cv
15.5742 136.602 15.9922 136.449 16.3159 136.18 cv
16.6758 135.871 16.8398 135.52 16.8398 135.141 cv
16.8398 134.613 16.4609 134.055 15.688 134.055 cv
15.5313 134.055 15.2969 134.121 15.105 134.188 cv
15.23 133.262 li
16.563 133.262 li
16.7188 132.848 li
16.6719 132.797 li
15.0039 132.797 li
10.5898 129.52 mo
10.52 129.816 li
11.2188 129.871 11.3008 129.926 11.1758 130.574 cv
10.457 134.281 li
10.3281 134.922 10.2769 134.984 9.57422 135.039 cv
9.5 135.336 li
13.4531 135.336 li
13.5781 135.082 13.957 134.164 14.0552 133.887 cv
13.73 133.777 li
13.4878 134.219 13.2813 134.508 13.0742 134.695 cv
12.8589 134.902 12.4878 134.957 12.1128 134.957 cv
11.75 134.957 11.48 134.93 11.3398 134.84 cv
11.1948 134.742 11.1758 134.496 11.2378 134.176 cv
11.9302 130.574 li
12.0591 129.934 12.1289 129.871 12.813 129.816 cv
12.875 129.52 li
10.5898 129.52 li
cp
f
32.4341 143.934 mo
32.1211 143.934 31.8398 144.082 31.6719 144.273 cv
31.4302 144.633 li
31.6089 144.773 li
31.7271 144.566 31.9609 144.285 32.2808 144.285 cv
32.5898 144.285 32.8008 144.465 32.8008 144.797 cv
32.8008 145.168 32.3589 145.426 31.7808 145.613 cv
31.8438 145.82 li
31.9302 145.781 32.0859 145.73 32.2661 145.73 cv
32.6328 145.73 33.02 145.949 33.02 146.547 cv
33.0269 147.191 32.645 147.453 32.3198 147.453 cv
31.9839 147.453 31.7891 147.297 31.6602 147.18 cv
31.5938 147.125 31.5161 147.137 31.4609 147.184 cv
31.395 147.238 31.3359 147.316 31.3052 147.395 cv
31.2813 147.465 31.3052 147.551 31.3628 147.605 cv
31.4839 147.707 31.707 147.816 31.9648 147.816 cv
32.4019 147.816 33.5659 147.383 33.5659 146.367 cv
33.5659 145.898 33.25 145.496 32.7231 145.402 cv
32.7231 145.383 li
32.9258 145.281 33.063 145.188 33.1519 145.098 cv
33.2661 144.98 33.3281 144.844 33.3281 144.699 cv
33.3281 144.27 32.9922 143.934 32.4341 143.934 cv
27.355 140.73 mo
27.2808 141.027 li
27.9839 141.082 28.0659 141.137 27.9409 141.781 cv
27.2188 145.492 li
27.0938 146.129 27.0391 146.191 26.3359 146.246 cv
26.2661 146.547 li
30.2148 146.547 li
30.3438 146.293 30.7188 145.375 30.8198 145.094 cv
30.4961 144.988 li
30.2539 145.43 30.0469 145.715 29.8398 145.906 cv
29.6211 146.113 29.2539 146.164 28.875 146.164 cv
28.5161 146.164 28.2461 146.141 28.1021 146.051 cv
27.957 145.949 27.9409 145.707 28.0039 145.383 cv
28.6948 141.781 li
28.8198 141.145 28.895 141.082 29.5781 141.027 cv
29.6411 140.73 li
27.355 140.73 li
cp
f
42.6021 171.414 mo
42.668 171.16 42.73 170.898 42.8052 170.609 cv
42.5898 170.555 li
42.4258 170.922 42.355 170.945 42.0352 170.945 cv
41.0591 170.945 li
41.7969 170.113 li
42.3052 169.531 42.582 169.141 42.582 168.602 cv
42.582 167.98 42.1328 167.605 41.5938 167.605 cv
41.25 167.605 40.9688 167.754 40.7891 167.957 cv
40.457 168.422 li
40.6372 168.563 li
40.793 168.324 41.0352 168.02 41.4063 168.02 cv
41.8198 168.02 42.0552 168.313 42.0552 168.793 cv
42.0552 169.313 41.6758 169.805 41.3159 170.25 cv
41.0352 170.598 40.7031 170.945 40.3872 171.254 cv
40.3872 171.414 li
42.6021 171.414 li
36.5 164.402 mo
36.4302 164.699 li
37.1328 164.754 37.2109 164.809 37.0859 165.453 cv
36.3672 169.164 li
36.2422 169.801 36.188 169.863 35.4839 169.922 cv
35.4141 170.215 li
39.3628 170.215 li
39.4878 169.965 39.8672 169.047 39.9648 168.77 cv
39.645 168.66 li
39.3979 169.102 39.1909 169.391 38.9839 169.578 cv
38.77 169.785 38.4019 169.84 38.0229 169.84 cv
37.6641 169.84 37.395 169.813 37.25 169.723 cv
37.105 169.621 37.0859 169.379 37.1479 169.055 cv
37.8438 165.453 li
37.9688 164.816 38.0391 164.754 38.7231 164.699 cv
38.7891 164.402 li
36.5 164.402 li
cp
f
61.4102 198.625 mo
61.4102 199.047 61.3828 199.074 60.8672 199.109 cv
60.8672 199.309 li
62.4727 199.309 li
62.4727 199.109 li
61.9531 199.074 61.9219 199.047 61.9219 198.625 cv
61.9219 195.5 li
61.5703 195.637 61.2266 195.746 60.8555 195.813 cv
60.8555 196.004 li
61.1602 196.02 li
61.3945 196.031 61.4102 196.051 61.4102 196.32 cv
61.4102 198.625 li
56.5117 192.297 mo
56.4414 192.594 li
57.1445 192.648 57.2227 192.703 57.0977 193.352 cv
56.3789 197.059 li
56.2539 197.699 56.1992 197.762 55.4961 197.816 cv
55.4258 198.113 li
59.375 198.113 li
59.5 197.859 59.8789 196.941 59.9766 196.664 cv
59.6563 196.555 li
59.4102 196.996 59.2031 197.285 58.9961 197.473 cv
58.7813 197.68 58.4141 197.734 58.0352 197.734 cv
57.6758 197.734 57.4063 197.707 57.2617 197.617 cv
57.1172 197.52 57.0977 197.273 57.1602 196.949 cv
57.8555 193.352 li
57.9805 192.711 58.0508 192.648 58.7344 192.594 cv
58.8008 192.297 li
56.5117 192.297 li
cp
f
43.3359 94.8628 mo
43.8438 94.8628 44.0781 95.3589 44.0781 95.875 cv
44.0781 96.313 43.9648 96.7461 43.5039 96.7461 cv
43.0552 96.7461 42.7461 96.2539 42.7461 95.48 cv
42.7461 95.293 42.7539 95.145 42.7808 95.02 cv
42.9341 94.9341 43.125 94.8628 43.3359 94.8628 cv
44.4688 93.0781 mo
44.2188 93.1211 43.9492 93.1948 43.7148 93.2769 cv
43.0698 93.5078 42.1909 94.1841 42.1909 95.5122 cv
42.1909 96.4448 42.73 97.0078 43.395 97.0078 cv
44.1089 97.0078 44.6172 96.4019 44.6172 95.6602 cv
44.6172 95.0078 44.1802 94.5039 43.563 94.5039 cv
43.4448 94.5039 43.3242 94.543 43.2031 94.5981 cv
42.8242 94.7729 li
42.9922 94.0508 43.5078 93.6758 43.8628 93.5122 cv
44.0781 93.4102 44.313 93.3521 44.5039 93.313 cv
44.4688 93.0781 li
cp
38.2729 89.9219 mo
38.2031 90.2188 li
38.9058 90.2729 38.9839 90.3242 38.8589 90.9731 cv
38.1411 94.6841 li
38.0161 95.3198 37.9609 95.3828 37.2578 95.438 cv
37.1841 95.7339 li
41.1372 95.7339 li
41.2622 95.4839 41.6411 94.5659 41.7378 94.2852 cv
41.4141 94.1802 li
41.1719 94.6172 40.9648 94.9063 40.7578 95.0981 cv
40.543 95.3052 40.1719 95.355 39.7969 95.355 cv
39.4341 95.355 39.1641 95.3281 39.0229 95.2378 cv
38.8789 95.1411 38.8589 94.8979 38.9219 94.5742 cv
39.6172 90.9731 li
39.7422 90.3359 39.813 90.2729 40.4961 90.2188 cv
40.5591 89.9219 li
38.2729 89.9219 li
cp
f
63.4063 69.6602 mo
63.5938 69.6602 63.707 69.7813 63.6992 69.9648 cv
63.6953 70.2852 63.4492 70.5469 62.5859 70.7578 cv
62.6914 70.1411 62.9727 69.8398 63.1172 69.75 cv
63.1953 69.6948 63.2969 69.6602 63.4063 69.6602 cv
63.8789 71.3281 mo
63.5859 71.6289 63.2852 71.8198 63.0039 71.8198 cv
62.6328 71.8198 62.5469 71.5161 62.5469 71.1841 cv
62.5469 71.105 62.5469 71.063 62.5547 71.0161 cv
63.2188 70.8589 64.2109 70.52 64.2109 69.8872 cv
64.2109 69.605 63.9766 69.3711 63.6289 69.3711 cv
63.3281 69.3711 63.0234 69.5122 62.7383 69.73 cv
62.2852 70.0938 62.0273 70.7271 62.0273 71.3281 cv
62.0273 72.0352 62.4102 72.1992 62.6992 72.1992 cv
62.9727 72.1992 63.4492 72.1128 64.0195 71.5039 cv
63.8789 71.3281 li
cp
58.1484 67.8672 mo
58.3555 67.625 58.5703 67.4531 58.6797 67.4531 cv
58.7578 67.4531 58.8047 67.6172 58.8945 68.1089 cv
59.0039 68.688 59.1563 70.2969 59.1445 70.938 cv
58.6953 71.5698 57.8242 72.4063 56.75 73.0269 cv
56.8594 73.332 li
57.9219 73.0469 li
58.5352 72.4492 59.1563 71.668 59.6875 70.918 cv
60.1797 70.2188 60.8398 69.1909 61.3438 68.3008 cv
61.5781 67.8789 61.7109 67.5698 61.7109 67.313 cv
61.7031 67.0039 61.5234 66.7969 61.2813 66.7969 cv
60.9922 66.7969 60.7656 67.0742 60.8555 67.313 cv
60.8906 67.438 60.9375 67.5698 60.9297 67.77 cv
60.918 68.0469 60.8203 68.3828 60.5586 68.8589 cv
60.2891 69.3628 60.0469 69.7661 59.793 70.1289 cv
59.7773 70.1289 li
59.7422 69.3359 59.6758 68.5508 59.5781 67.8398 cv
59.4805 67.1411 59.3359 66.7969 59.0664 66.7969 cv
58.7422 66.7969 58.2461 67.2578 57.9492 67.605 cv
58.1484 67.8672 li
cp
f
19.105 79.0938 mo
19.293 79.0938 19.4058 79.2109 19.3979 79.3979 cv
19.395 79.7148 19.1479 79.98 18.2852 80.1909 cv
18.3911 79.5698 18.6719 79.2729 18.8159 79.1841 cv
18.895 79.1289 18.9961 79.0938 19.105 79.0938 cv
19.5781 80.7622 mo
19.2852 81.063 18.9839 81.2539 18.7031 81.2539 cv
18.332 81.2539 18.2461 80.9448 18.2461 80.6172 cv
18.2461 80.5391 18.2461 80.4961 18.2539 80.4492 cv
18.918 80.293 19.9102 79.9492 19.9102 79.3198 cv
19.9102 79.0391 19.6758 78.8052 19.3281 78.8052 cv
19.0269 78.8052 18.7231 78.9409 18.4409 79.1641 cv
17.9839 79.5229 17.7271 80.1602 17.7271 80.7622 cv
17.7271 81.4688 18.1089 81.6328 18.3979 81.6328 cv
18.6719 81.6328 19.1479 81.5469 19.7188 80.9341 cv
19.5781 80.7622 li
cp
13.73 77.3628 mo
14.043 76.9839 14.188 76.895 14.2969 76.895 cv
14.395 76.895 14.4961 77.0659 14.6021 77.3979 cv
14.9258 78.3711 li
14.457 79.1172 13.9922 79.7148 13.7729 79.7148 cv
13.6841 79.7148 13.6211 79.668 13.5659 79.6211 cv
13.5161 79.5698 13.4688 79.5229 13.3979 79.5229 cv
13.1992 79.5229 13.0122 79.7578 13.0122 79.9731 cv
13.0122 80.2622 13.2148 80.4688 13.4771 80.4688 cv
13.938 80.4688 14.2969 79.9922 15.0698 78.8198 cv
15.3672 79.7031 li
15.5391 80.207 15.7539 80.4688 15.9961 80.4688 cv
16.2852 80.4688 16.707 80.1802 17.1479 79.5781 cv
16.9409 79.3521 li
16.6802 79.6328 16.4839 79.813 16.3198 79.813 cv
16.168 79.813 16.0591 79.5781 15.8521 78.9839 cv
15.5391 78.0659 li
15.6909 77.813 15.8711 77.5781 16.043 77.3628 cv
16.27 77.0742 16.457 76.9219 16.5552 76.9219 cv
16.6563 76.9219 16.7271 76.9609 16.7729 77.0229 cv
16.8159 77.0938 16.8789 77.1211 16.9409 77.1211 cv
17.0859 77.1211 17.3198 76.9219 17.3198 76.6992 cv
17.3198 76.438 17.1328 76.23 16.8711 76.23 cv
16.4922 76.23 16.105 76.5981 15.395 77.625 cv
15.25 77.23 li
15.0161 76.5898 14.8979 76.23 14.6411 76.23 cv
14.2969 76.23 13.9019 76.645 13.5161 77.1289 cv
13.73 77.3628 li
cp
f
.28318 lw
1 lj
15.6172 131.211 mo
21.0308 122.84 li
15.625 111.098 mo
20.02 118.34 li
@
43.3398 39.8789 mo
43.5229 39.8789 43.6372 39.9961 43.6328 40.1841 cv
43.625 40.5 43.3789 40.7661 42.5161 40.9771 cv
42.625 40.355 42.9063 40.0591 43.0508 39.9688 cv
43.1289 39.9141 43.23 39.8789 43.3398 39.8789 cv
43.813 41.5469 mo
43.52 41.8438 43.2188 42.0352 42.938 42.0352 cv
42.563 42.0352 42.48 41.73 42.48 41.4019 cv
42.48 41.3242 42.48 41.2813 42.4839 41.2339 cv
43.1519 41.0781 44.1411 40.7339 44.1411 40.105 cv
44.1411 39.8242 43.9058 39.5898 43.5591 39.5898 cv
43.2578 39.5898 42.9531 39.7271 42.6719 39.9492 cv
42.2148 40.3091 41.957 40.9448 41.957 41.5469 cv
41.957 42.2539 42.3438 42.418 42.6289 42.418 cv
42.9063 42.418 43.3789 42.332 43.9492 41.7188 cv
43.813 41.5469 li
cp
41.0391 39.895 mo
40.7622 40.4731 40.543 40.5781 40.2578 40.5781 cv
39.9341 40.5781 39.23 40.418 38.8979 40.3008 cv
39.8521 39.4448 41.3438 37.6992 41.6948 37.168 cv
41.4341 36.9409 li
41.3008 37.1128 41.1558 37.188 41.0469 37.188 cv
40.9141 37.188 40.75 37.1948 40.293 37.1602 cv
39.8521 37.1328 39.5742 37.105 39.25 37.105 cv
39.0698 37.105 38.8711 37.2231 38.6641 37.5742 cv
38.52 37.8091 38.4219 38.0161 38.3052 38.3198 cv
38.6021 38.4731 li
38.8711 37.9492 39.0508 37.6992 39.563 37.6992 cv
39.7808 37.6992 40.0781 37.707 40.2852 37.6992 cv
40.4019 37.6992 40.5552 37.6992 40.7339 37.6802 cv
39.9492 38.688 38.9688 39.688 38.0352 40.5352 cv
37.6802 40.8481 37.8711 41.2539 38.3398 41.2539 cv
38.4019 41.2539 38.4219 41.2109 38.4302 41.0469 cv
38.4302 40.9102 38.457 40.8589 38.4839 40.8398 cv
38.52 40.813 38.5938 40.8198 38.7188 40.8672 cv
39.4019 41.0938 39.9961 41.2539 40.3359 41.2539 cv
40.7622 41.2539 41.0469 40.957 41.3911 40.02 cv
41.0391 39.895 li
cp
f
1.7005 lw
1 lc
43.3398 39.8789 mo
43.5229 39.8789 43.6372 39.9961 43.6328 40.1841 cv
43.625 40.5 43.3789 40.7661 42.5161 40.9771 cv
42.625 40.355 42.9063 40.0591 43.0508 39.9688 cv
43.1289 39.9141 43.23 39.8789 43.3398 39.8789 cv
43.3398 39.8789 li
cp
43.813 41.5469 mo
43.52 41.8438 43.2188 42.0352 42.938 42.0352 cv
42.563 42.0352 42.48 41.73 42.48 41.4019 cv
42.48 41.3242 42.48 41.2813 42.4839 41.2339 cv
43.1519 41.0781 44.1411 40.7339 44.1411 40.105 cv
44.1411 39.8242 43.9058 39.5898 43.5591 39.5898 cv
43.2578 39.5898 42.9531 39.7271 42.6719 39.9492 cv
42.2148 40.3091 41.957 40.9448 41.957 41.5469 cv
41.957 42.2539 42.3438 42.418 42.6289 42.418 cv
42.9063 42.418 43.3789 42.332 43.9492 41.7188 cv
43.813 41.5469 li
cp
41.0391 39.895 mo
40.7622 40.4731 40.543 40.5781 40.2578 40.5781 cv
39.9341 40.5781 39.23 40.418 38.8979 40.3008 cv
39.8521 39.4448 41.3438 37.6992 41.6948 37.168 cv
41.4341 36.9409 li
41.3008 37.1128 41.1558 37.188 41.0469 37.188 cv
40.9141 37.188 40.75 37.1948 40.293 37.1602 cv
39.8521 37.1328 39.5742 37.105 39.25 37.105 cv
39.0698 37.105 38.8711 37.2231 38.6641 37.5742 cv
38.52 37.8091 38.4219 38.0161 38.3052 38.3198 cv
38.6021 38.4731 li
38.8711 37.9492 39.0508 37.6992 39.563 37.6992 cv
39.7808 37.6992 40.0781 37.707 40.2852 37.6992 cv
40.4019 37.6992 40.5552 37.6992 40.7339 37.6802 cv
39.9492 38.688 38.9688 39.688 38.0352 40.5352 cv
37.6802 40.8481 37.8711 41.2539 38.3398 41.2539 cv
38.4019 41.2539 38.4219 41.2109 38.4302 41.0469 cv
38.4302 40.9102 38.457 40.8589 38.4839 40.8398 cv
38.52 40.813 38.5938 40.8198 38.7188 40.8672 cv
39.4019 41.0938 39.9961 41.2539 40.3359 41.2539 cv
40.7622 41.2539 41.0469 40.957 41.3911 40.02 cv
41.0391 39.895 li
cp
1 1 1 rgb
@
43.3398 39.8789 mo
43.5229 39.8789 43.6372 39.9961 43.6328 40.1841 cv
43.625 40.5 43.3789 40.7661 42.5161 40.9771 cv
42.625 40.355 42.9063 40.0591 43.0508 39.9688 cv
43.1289 39.9141 43.23 39.8789 43.3398 39.8789 cv
43.813 41.5469 mo
43.52 41.8438 43.2188 42.0352 42.938 42.0352 cv
42.563 42.0352 42.48 41.73 42.48 41.4019 cv
42.48 41.3242 42.48 41.2813 42.4839 41.2339 cv
43.1519 41.0781 44.1411 40.7339 44.1411 40.105 cv
44.1411 39.8242 43.9058 39.5898 43.5591 39.5898 cv
43.2578 39.5898 42.9531 39.7271 42.6719 39.9492 cv
42.2148 40.3091 41.957 40.9448 41.957 41.5469 cv
41.957 42.2539 42.3438 42.418 42.6289 42.418 cv
42.9063 42.418 43.3789 42.332 43.9492 41.7188 cv
43.813 41.5469 li
cp
41.0391 39.895 mo
40.7622 40.4731 40.543 40.5781 40.2578 40.5781 cv
39.9341 40.5781 39.23 40.418 38.8979 40.3008 cv
39.8521 39.4448 41.3438 37.6992 41.6948 37.168 cv
41.4341 36.9409 li
41.3008 37.1128 41.1558 37.188 41.0469 37.188 cv
40.9141 37.188 40.75 37.1948 40.293 37.1602 cv
39.8521 37.1328 39.5742 37.105 39.25 37.105 cv
39.0698 37.105 38.8711 37.2231 38.6641 37.5742 cv
38.52 37.8091 38.4219 38.0161 38.3052 38.3198 cv
38.6021 38.4731 li
38.8711 37.9492 39.0508 37.6992 39.563 37.6992 cv
39.7808 37.6992 40.0781 37.707 40.2852 37.6992 cv
40.4019 37.6992 40.5552 37.6992 40.7339 37.6802 cv
39.9492 38.688 38.9688 39.688 38.0352 40.5352 cv
37.6802 40.8481 37.8711 41.2539 38.3398 41.2539 cv
38.4019 41.2539 38.4219 41.2109 38.4302 41.0469 cv
38.4302 40.9102 38.457 40.8589 38.4839 40.8398 cv
38.52 40.813 38.5938 40.8198 38.7188 40.8672 cv
39.4019 41.0938 39.9961 41.2539 40.3359 41.2539 cv
40.7622 41.2539 41.0469 40.957 41.3911 40.02 cv
41.0391 39.895 li
cp
.129412 .117647 .117647 rgb
f
61.3164 217.25 mo
60.4063 217.25 60.1016 218.316 60.1016 219.188 cv
60.1016 220.063 60.4063 221.133 61.3164 221.133 cv
62.2188 221.133 62.5195 220.063 62.5195 219.188 cv
62.5195 218.316 62.2188 217.25 61.3164 217.25 cv
61.3242 217.5 mo
61.8359 217.5 61.9727 218.359 61.9727 219.188 cv
61.9727 220.016 61.8359 220.879 61.3242 220.879 cv
60.8008 220.879 60.6641 220.016 60.6641 219.188 cv
60.6641 218.359 60.8008 217.5 61.3242 217.5 cv
61.3242 217.5 li
cp
59.2773 218.609 mo
59 219.188 58.7813 219.293 58.4961 219.293 cv
58.1719 219.293 57.4688 219.133 57.1367 219.016 cv
58.0898 218.16 59.582 216.414 59.9336 215.883 cv
59.6719 215.656 li
59.5391 215.828 59.3945 215.902 59.2852 215.902 cv
59.1523 215.902 58.9883 215.91 58.5313 215.875 cv
58.0898 215.848 57.8125 215.82 57.4883 215.82 cv
57.3086 215.82 57.1094 215.938 56.9023 216.289 cv
56.7578 216.523 56.6602 216.73 56.543 217.035 cv
56.8398 217.188 li
57.1094 216.664 57.2891 216.414 57.8008 216.414 cv
58.0195 216.414 58.3164 216.422 58.5234 216.414 cv
58.6406 216.414 58.793 216.414 58.9727 216.395 cv
58.1875 217.402 57.207 218.402 56.2734 219.25 cv
55.918 219.563 56.1094 219.969 56.5781 219.969 cv
56.6406 219.969 56.6602 219.926 56.668 219.762 cv
56.668 219.629 56.6953 219.574 56.7227 219.555 cv
56.7578 219.527 56.8281 219.535 56.957 219.582 cv
57.6406 219.809 58.2344 219.969 58.5742 219.969 cv
59 219.969 59.2852 219.672 59.6289 218.734 cv
59.2773 218.609 li
cp
f
90.1836 261.434 mo
89.2734 261.434 88.9648 262.5 88.9648 263.371 cv
88.9648 264.246 89.2734 265.316 90.1836 265.316 cv
91.0859 265.316 91.3828 264.246 91.3828 263.371 cv
91.3828 262.5 91.0859 261.434 90.1836 261.434 cv
90.1914 261.684 mo
90.6992 261.684 90.8398 262.543 90.8398 263.371 cv
90.8398 264.199 90.6992 265.063 90.1914 265.063 cv
89.668 265.063 89.5313 264.199 89.5313 263.371 cv
89.5313 262.543 89.668 261.684 90.1914 261.684 cv
90.1914 261.684 li
cp
85.1836 260.984 mo
85.3906 260.742 85.6055 260.57 85.7148 260.57 cv
85.7969 260.57 85.8398 260.734 85.9297 261.227 cv
86.0391 261.805 86.1914 263.414 86.1836 264.055 cv
85.7344 264.688 84.8594 265.523 83.7891 266.145 cv
83.8945 266.449 li
84.957 266.16 li
85.5703 265.566 86.1914 264.785 86.7227 264.035 cv
87.2188 263.336 87.875 262.309 88.3789 261.418 cv
88.6133 260.996 88.7461 260.688 88.7461 260.426 cv
88.7383 260.121 88.5586 259.914 88.3164 259.914 cv
88.0273 259.914 87.8008 260.195 87.8945 260.426 cv
87.9297 260.555 87.9727 260.688 87.9648 260.887 cv
87.957 261.164 87.8555 261.5 87.5938 261.977 cv
87.3242 262.48 87.082 262.883 86.832 263.246 cv
86.8125 263.246 li
86.7773 262.453 86.7148 261.668 86.6133 260.957 cv
86.5156 260.258 86.3711 259.914 86.1016 259.914 cv
85.7773 259.914 85.2813 260.375 84.9844 260.723 cv
85.1836 260.984 li
cp
f
28.9448 277.098 mo
28.0308 277.098 27.7271 278.168 27.7271 279.035 cv
27.7271 279.914 28.0308 280.984 28.9448 280.984 cv
29.8438 280.984 30.145 279.914 30.145 279.035 cv
30.145 278.168 29.8438 277.098 28.9448 277.098 cv
28.9531 277.352 mo
29.4609 277.352 29.5981 278.207 29.5981 279.035 cv
29.5981 279.863 29.4609 280.73 28.9531 280.73 cv
28.4302 280.73 28.2891 279.863 28.2891 279.035 cv
28.2891 278.207 28.4302 277.352 28.9531 277.352 cv
28.9531 277.352 li
cp
23.8281 276.715 mo
24.1411 276.336 24.2852 276.246 24.395 276.246 cv
24.4922 276.246 24.5938 276.418 24.6992 276.75 cv
25.0229 277.723 li
24.5552 278.469 24.0898 279.063 23.8711 279.063 cv
23.7813 279.063 23.7188 279.02 23.6641 278.973 cv
23.6089 278.918 23.5659 278.875 23.4961 278.875 cv
23.2969 278.875 23.105 279.109 23.105 279.324 cv
23.105 279.613 23.3159 279.82 23.5742 279.82 cv
24.0352 279.82 24.395 279.344 25.168 278.172 cv
25.4648 279.055 li
25.6372 279.559 25.8521 279.82 26.0938 279.82 cv
26.3828 279.82 26.8052 279.531 27.2461 278.93 cv
27.0391 278.703 li
26.7813 278.98 26.582 279.16 26.418 279.16 cv
26.2661 279.16 26.1558 278.93 25.9531 278.332 cv
25.6372 277.418 li
25.7891 277.164 25.9688 276.93 26.1411 276.715 cv
26.3628 276.426 26.5552 276.273 26.6519 276.273 cv
26.7539 276.273 26.8242 276.309 26.8672 276.371 cv
26.9141 276.445 26.9771 276.473 27.0391 276.473 cv
27.1841 276.473 27.418 276.273 27.418 276.047 cv
27.418 275.789 27.23 275.582 26.9688 275.582 cv
26.5898 275.582 26.2031 275.949 25.4922 276.977 cv
25.3481 276.578 li
25.1128 275.941 24.9961 275.582 24.7378 275.582 cv
24.395 275.582 24 275.992 23.6089 276.48 cv
23.8281 276.715 li
cp
f
32.4302 59.2031 mo
31.6641 59.1411 31.6372 58.7271 31.6372 58.4219 cv
31.6372 58.25 31.6641 58.0161 31.6992 57.6211 cv
31.7539 57.082 31.7539 56.8008 31.7539 56.5391 cv
31.7539 55.543 30.9878 55.4063 30.3872 55.4063 cv
30.3872 55.7148 li
31.0352 55.8052 31.105 56.1641 31.105 56.5161 cv
31.105 56.7378 31.063 57.063 31.043 57.3242 cv
31.0161 57.5859 30.9448 58.043 30.9448 58.3052 cv
30.9448 58.7891 31.145 59.2148 31.6479 59.3398 cv
31.6479 59.375 li
31.145 59.5039 30.9448 59.9341 30.9448 60.4219 cv
30.9448 60.6719 31.0161 61.1411 31.043 61.3911 cv
31.063 61.645 31.105 61.9771 31.105 62.2031 cv
31.105 62.5552 31.0352 62.9141 30.3872 63.0039 cv
30.3872 63.3091 li
30.98 63.3091 31.7539 63.1841 31.7539 62.1758 cv
31.7539 61.9141 31.7539 61.6372 31.6992 61.0938 cv
31.6641 60.6992 31.6372 60.4648 31.6372 60.293 cv
31.6372 59.9961 31.6641 59.5742 32.4302 59.52 cv
32.4302 59.2031 li
25.8589 55.9839 mo
25.7969 56.2813 li
26.48 56.3359 26.543 56.3872 26.418 57.0352 cv
25.6992 60.7422 li
25.5742 61.3911 25.52 61.438 24.7808 61.5 cv
24.707 61.7969 li
28.855 61.7969 li
28.9731 61.5469 29.3438 60.6021 29.4341 60.3481 cv
29.1089 60.2769 li
28.9102 60.6372 28.7031 60.9258 28.5078 61.1128 cv
28.2729 61.3481 27.9219 61.418 27.418 61.418 cv
26.9922 61.418 26.707 61.418 26.563 61.3008 cv
26.4258 61.1948 26.418 60.9609 26.5161 60.4302 cv
26.7969 58.9731 li
27.5898 58.9731 li
28.3159 58.9731 28.3521 59.0161 28.3438 59.6719 cv
28.6758 59.6719 li
29.02 57.9102 li
28.688 57.9102 li
28.4688 58.5039 28.4258 58.5659 27.668 58.5659 cv
26.8789 58.5659 li
27.2378 56.6841 li
27.3008 56.3789 27.3091 56.3589 27.5781 56.3589 cv
28.2891 56.3589 li
28.813 56.3589 29.0122 56.4409 29.1089 56.605 cv
29.1992 56.7461 29.2339 56.9922 29.2339 57.3589 cv
29.5659 57.332 li
29.6328 56.8198 29.7231 56.145 29.7378 55.9839 cv
25.8589 55.9839 li
cp
22 59.52 mo
22.7661 59.5742 22.7891 59.9878 22.7891 60.293 cv
22.7891 60.4648 22.7661 60.6992 22.7271 61.0938 cv
22.6841 61.6372 22.6758 61.9141 22.6758 62.1758 cv
22.6758 63.1841 23.438 63.3091 24.043 63.3091 cv
24.043 62.9961 li
23.395 62.9058 23.3242 62.5552 23.3242 62.2031 cv
23.3242 61.9771 23.3589 61.6519 23.3872 61.3911 cv
23.4019 61.1411 23.4839 60.6719 23.4839 60.4219 cv
23.4839 59.9341 23.2852 59.5039 22.7729 59.375 cv
22.7729 59.3398 li
23.2852 59.2148 23.4839 58.7891 23.4839 58.3052 cv
23.4839 58.043 23.4102 57.5859 23.3872 57.3242 cv
23.3672 57.0698 23.3242 56.7378 23.3242 56.5161 cv
23.3242 56.1641 23.395 55.8052 24.043 55.7231 cv
24.043 55.4063 li
23.4492 55.4063 22.6758 55.5313 22.6758 56.5391 cv
22.6758 56.813 22.6841 57.082 22.7271 57.6211 cv
22.7661 58.0161 22.7891 58.25 22.7891 58.4219 cv
22.7891 58.7378 22.7661 59.1519 22 59.1948 cv
22 59.52 li
cp
f
64.3828 263.164 mo
63.6172 263.102 63.5898 262.688 63.5898 262.383 cv
63.5898 262.211 63.6172 261.977 63.6523 261.582 cv
63.707 261.043 63.707 260.762 63.707 260.5 cv
63.707 259.504 62.9414 259.367 62.3398 259.367 cv
62.3398 259.672 li
62.9883 259.766 63.0586 260.125 63.0586 260.473 cv
63.0586 260.699 63.0156 261.023 62.9961 261.285 cv
62.9688 261.547 62.8984 262.004 62.8984 262.266 cv
62.8984 262.75 63.0938 263.176 63.6016 263.301 cv
63.6016 263.336 li
63.0938 263.461 62.8984 263.895 62.8984 264.379 cv
62.8984 264.633 62.9688 265.102 62.9961 265.352 cv
63.0156 265.605 63.0586 265.938 63.0586 266.164 cv
63.0586 266.516 62.9883 266.875 62.3398 266.965 cv
62.3398 267.27 li
62.9336 267.27 63.707 267.145 63.707 266.137 cv
63.707 265.875 63.707 265.594 63.6523 265.055 cv
63.6172 264.66 63.5898 264.426 63.5898 264.254 cv
63.5898 263.957 63.6172 263.535 64.3828 263.48 cv
64.3828 263.164 li
59.5781 260.043 mo
58.2109 260.043 57.75 261.645 57.75 262.949 cv
57.75 264.262 58.2109 265.867 59.5781 265.867 cv
60.9258 265.867 61.3789 264.262 61.3789 262.949 cv
61.3789 261.645 60.9258 260.043 59.5781 260.043 cv
59.5781 260.043 li
cp
59.5859 260.422 mo
60.3516 260.422 60.5586 261.707 60.5586 262.949 cv
60.5586 264.191 60.3516 265.488 59.5859 265.488 cv
58.8047 265.488 58.5977 264.191 58.5977 262.949 cv
58.5977 261.707 58.8047 260.422 59.5859 260.422 cv
59.5859 260.422 li
cp
54.7622 263.48 mo
55.5273 263.535 55.5547 263.949 55.5547 264.254 cv
55.5547 264.426 55.5273 264.66 55.4922 265.055 cv
55.4448 265.594 55.438 265.875 55.438 266.137 cv
55.438 267.145 56.2031 267.27 56.8047 267.27 cv
56.8047 266.957 li
56.1563 266.867 56.0859 266.516 56.0859 266.164 cv
56.0859 265.938 56.1211 265.613 56.1484 265.352 cv
56.1641 265.102 56.2461 264.633 56.2461 264.379 cv
56.2461 263.895 56.0508 263.461 55.5352 263.336 cv
55.5352 263.301 li
56.0508 263.176 56.2461 262.75 56.2461 262.266 cv
56.2461 262.004 56.1758 261.547 56.1484 261.285 cv
56.1289 261.031 56.0859 260.699 56.0859 260.473 cv
56.0859 260.125 56.1563 259.766 56.8047 259.684 cv
56.8047 259.367 li
56.2109 259.367 55.438 259.492 55.438 260.5 cv
55.438 260.773 55.4448 261.043 55.4922 261.582 cv
55.5273 261.977 55.5547 262.211 55.5547 262.383 cv
55.5547 262.699 55.5273 263.113 54.7622 263.156 cv
54.7622 263.48 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.3
%%For: (Remo Pillat) ()
%%Title: (fig7_walking_robot.eps)
%%CreationDate: 1/21/2022 1:23 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&B6PQ3dO>$BhJ;pOJ0Rh93B.8Z3K/%Q@#SsB(bfCeZ_%d&\%er+e?*UL&`u2sn(I#ORVK5sWDlGhdaZcIUK`5Mf&*qTs&hrC
%\jZP$Vc6#Yl)HK3f@8;forQT%/!Ot:]3ghLkHrbf=5*'/7]k'Q0;Z,W/_*ciV0DL-Pe+!HC5m^@>I@B)PC0^IV`tuu[7[^OqC6Vc
%ZBCIa.P&hLh.l?M\GPqsBe?.i>=Q.!N4!!#8Tgh@GXf4=]_=i[kESetFHA<deP)P$Cl*Q`;#DtfIo^iu[QCThVqS(6cLRE.NTO<A
%p"9fn*#,o]Ho5]9:'J\A8pZd;YRUBn54bLZ9NXthZ^,I_n?4E8>"Z9KXCU'Tau%AE/4k4k0((3=="F;%V04Acf1LspBX?5LYPo%M
%Z)hZ&7/sPoBAHafF]knkT\BaY.?9E,YE^%%_QBP7.j8Zs5M?"Y8mITan!+BNk=2Q]Lfm>Q:+Kir%SQh&?ohlMa@W^9^M$k\B?>C?
%b>,#c=k5GcMjfc+$uA0V6W[fr:"fKgC5-Jr&mi6X'6d(2nt]96YL]%bs30Ys<qY"6?rKX"oFKNE[=nS7r;Wk!ADj"RV9\s5LhllY
%+;H>PF:PDglEAs%0:7GOr7iJa;CD*8CV7!_mLO\8Wou@o0G*`$g`R\<lVR-(?cVf0omBs/P*\847^op0Iqt#AQ.^P%]Mqd1Q#`eM
%,4kZ"3dLNiIa"ZE8B.We<iJdX+MXI&fi#4<)cImtB<.2iDooK`PPk:^s!IP*?[3m^d&hgb$h_7b[74)nfR]:PYGphcX-odSdor_W
%C8LER;tj_nDt9bn;!-?s_@fjAW2<.JKHFV??P="TKNF#!.Wmo\kGm$=gJ7/.Vm#\+R&%mrJ%o;.[;,T^WDJ7-cO"sMWO1q<FkY)@
%\,DH#BJaHV,%q#Nb+7ToLOSj81u]2ZC4NtpF"?-#eS<Y/<iPml/I0fJnD7k-jP*(%<(<qo[HN&#1tMQCT@=>uU;C]20Y`]\*EhP&
%T2MTb6.j@RX44.M@b)_smp!1pjDF1p>O>DFq.b:760Ut3J!?B%L6>!!Ug(&%9E^"s!#?A\7Dg8*f^p1t"J($X'dBVt#PH)$Fo7M.
%,,;[rCqS9"FWP0o\`;+>-+-"\S6(R8;K3%8W>#'eMIeej;Zb#Xq3*[Y$"S510Q"^*nNg%e"XL)n)]JV?AeRAdZMiomppEnhIM(3s
%.9T7`V=#G%eE[rs8ZK`f?:e3H]3cWV/!V>BKa/S56%q"kGjLrdC.*_VkV,b=P5!_7rZMJ`rWb.?f*bBtjSrG%Dk&`_S"rDLWFo[d
%LJ3U78/&9s?W).M<W.Ce:+Gj&_cgH=k*ftte0,M\opk%BTH!Z//H^;kXa_5Hk32<%kaEZuQW'=PI+@MX^`lpdXm/Qg;^(.A!=NhS
%>,D762'Zj)-s-BjAkK+%B;LhlDNCI5Gn#6arrVZ)f9tlLqt]\YX1_1Bk;d7MrpDB8GH'/9$H%dF8AR>ifrQ1Z:##R:s*@Yp)tcf9
%/Cb[#ccU#I2"@:JJ&D=oWb>/N8Hqb"L6rq#319sP'oS-9.#(6L*0$1nW2Q"gC6_1;,KWXZY7j8&9O[2SjD4k>rYYhLj",E/S]98'
%_#Ad5M(Z2/TPoAi-0m6FV>`F)%I)63et;uOQ?)liT0Ik?s"E<km96pqrsfuL/:s"j8uWR\if?_)r?K_\F,Kr/X;d\gEF\l)dBNWK
%@n%`_Np&^L(?Zbp,$Br(^ON8eSW?16@O;&5Oem)&NCMF-?5aiY<?,&r3cs+!d1CXhqI:3FjG`8]DQ@$Y?+3$cK-5d5O6FVcV,M[d
%WmqA9@h7C`M-&g]8ORVdB`q#/IFrr&CfO)s\/Q#*cMafhP#W`<8\.5)rFr$1mpMJ<\0^>^C#2Irg2>J6ruRG/T=k&jXj0S7e9Xi?
%)1#GhQ:[G=0Eh:#@4eCHB++p4UQ/Tpk0GNbMoHWOR<I]!dB5g>n[0RF?Cc1%nV=EB&+$]L\!]nV3,$H[)8m^hW?7,4+/qr?o_Rk4
%M`13-C4H(!D`8UUJ%8IZb#sD>RFuA^RUn14J]`sUbGBp;^!pZ'dn$$pg78T;nbHr(%pnO\DI-@IWCF?qX4Af#G,NmcFBF].>#').
%8q#80j\PG9lCGN)UWQWl%G99-]th>smQ:8<gSnea8\39OIW]Gi*_k;=:?=\[=WB(k>GkK$\!n\L%a4m8*`cW>c2U`40aK10ioF6s
%4`+4b=#@l'/X0/S5b.Kb>P>a1EO\;NiKiLe13?gP_i)ZH+(EENI>BKAp-CT996H,45OEWnrcb>im_PeTl_gjW]@-PfP.Dc7KA.cM
%QYNYVq:EY;Yd!0b`P(]h@B'7_Kam=r7T1Q^r'8n/Krt471XKK;f=,d#D-(EjkFGM+GKZ.d-"Ye60*;Tcl(ZSDEafcLelNSj..oa2
%(_B1;<@+[,W`6115KGSllS*1mLb2UbA*X,C"$<eoWRV@Ul1E,MSlT-G^/ofdr9(^jDU`%jr2<_7[Gr/Tef'NK`/KCuk6u(WM0:?e
%Gb1HEHDfFQjb2(kPm#C<*5_*3HqcKtY-aY%XjW7*U0O`Wabg9Md=95pIO?,cq*Yj]T_M4hji$09(_W!X.?S&)*AupWW:F-ZI\kip
%S]>&f*jhf&:Ar6O3[mqk]1*F;U8(?X_i[tJ"bc$J<ZlZO3U(^U6jUbZP`^s,PZ7krl>q$MfWE\K?a%NZOlGFRDalGj1Q(_h#V7ir
%6Z!"ul+jT;%dS6L'3Ob"=Xq$7<RW0#(JEl4B)TDDM(K3jfi-T3m0^d3&Sr)^Y9T-$o#1`iR-S,i4j3AfPtSMEQ2qS5*0oIb5kK;G
%A40ikNi/tU>G`1Tl9lPI+t+uncq/',,]nVA]l]tcMB(2U(nK;dh6JUmU9'EW,>'<I//lX%^;c,tmB'Z6BI8t85m2'=qmPN=O/S4n
%8u%&`FVhpV)YIC`IAVZ+s2)296q,Z<Qu8n[WMYJt?ZPi,7@j%[-rlrBHLfr.6q<n(Yr">3b2=a&4Z^J9HsCQr?7W2[##6Xlgus"?
%F.,*7*17a:Hhh>(,)?aU7BDe'Ol=8(QoKW39gG@e=borfCYT,6\BVtNR9(C)bFUE:i]P^!neA]T/J-C]X(`G$Q?"h'1:?5+W3WVn
%M-mX1,>1cH:=&gQ(6jhH(TfJ:^1cJMKR(ap@#PjnLb`"@KK<YAl4$g%8lb2U%Y<=%\3FFnfu8*ZFk#N%2.!R_@\XJBoA/</SoW2"
%WE+p+f)Da/?cYJs?.9%DCK8Gpg(ig\/#F^Lk%_&RSEX&(r#]l6Yb,@oDhP5;Ac`%RpDYass-<^;-cENrAMqbW`C??A<ji?tbLoXC
%RtVF<DF>:Y#qR"SiF@aDIk=/n^@FaLoelF5D^sWgS?`lh6`?mM=a7VSQ(a<'p^St=fq!tuX<@qfM!Fp"HKGs#U"^iIZ<f'Kl?ch/
%d3qk&o"s2*O`b-T``oi@XUD#=p.Mgb<GEj.DXYO9NkO#dIZ_rdM@chUO?j-LF&<$kU(6(+JOC3mEu.rkopR0V"_=f]rEb%$h[!`k
%BXIbo07o9p:$1;k,ReMa4W@+SX:UH_OJU<5D,AEHg0tHh*Ac,e\QLH_)o7AETlRiemGKYIWRa1,a,j/].BA`&$.-Kq7Lc$drq2\]
%e04b*mmu[leqWtDA@.<WBnVDK=H\&"<^EY;ES"8md0#d[P^T[HJXlEgWo20d!QL2)ghQVTGs,_(UfN>^Lb%'i6>0l`"cqe=WR[#t
%;Kit27qQPT&4p3>,E=:WYUGK_,nUj3$o)*b&sRQdP+]&3PG"36<psR+CG?fk(2C;7)YHXE#j'dr(MB#56*o)g_u71[V'hBL03(gg
%U*dREX]O@P_@BX<.F83SY2#&2+XfnB;E^ncRLJkS>U)%l(u![:#NXZ?U9Fft.NL2Rl_K"_4p('A'f1K<_1.nVY:!,2K%_Ni=tRMD
%%,Gtj7GiHLL(n/B;qRoQRTm6Dh0Or-8jm'/X'ekm]I$BEa[WTV`Gr+M4)4Vs`+uh80<+F;)!-FLjR!)E"H0s9lfBO`TnSlIkg3%_
%r4n@cot%I[)/L*t0e/ZeK_Cb2Bk8p'kLn@-jb;?U`*.F\4_2jA:JN!D;h$=FSKd_`>GB+SUkFmt6j9W9r9HY&\9kpeol$'$-Br=g
%5%75?Wh]j$PW27n0glZDF&2Tsk38kZgTKTVjXp8lqAP$_Sg^rZZa,00S9OG9Vo<hW#'pDOM0cCYXVbN"n(7l^\k)Bho+_P3<_qSU
%k%jPQ.:Ki\"S-G>6,bGV.)\0^-WjEdlr$[a1[WOu*b-q]L))TRYJn5t98b^?kf;*,c(3>KIk%kT9'`TWG5\Y^edQ\9mBfKh@+o!8
%0AYKAgsDa%*J0U`E[BZpgd^`-b1d^)#5-dhr@C6M!Y3LKIohZOjAh\Wb,3MbiHUu@FtDpTSe-aM1*;L*G,qf<SPtsR]iqOrRW,$e
%)Ii@Dl!o75dsU\2)tfY7i;UEn]E71JgD-N[$dmr@=p;Qi*Um8Gc@>B3rHbH0WjR#%O7;pqI,gh[%>$gC3h+[9$;8Ha4gV4<5mgT4
%f9f+Dq9j4]9dB)\D-,s9]A1G>5Ir.L+r!2K8N8'V]Jo=+E$ebbIg<cgpTm%\lM\4GN5DLk,LlHf5PTn-q`s=AUY[DKZl3;:5br.W
%8;3*Ln=h4D2]+VRc(7hD$dj=\``7hqJ:D^hWd_c3f9J>mQ@D1Zmu!p)KRs-OBRLrAR(At5DT+(tTq@ncgtN4We<U22.K89d0m^rs
%`.C)RDaf6a?op@b6L`^EL4ug+fGhcb+d)@$)lh#t.Kgp]Y96Cb8'(Nu(rd2?aN2'F">,?45plOa`n#8K)mpqLbH8cWWC)`EM>g8D
%hkAT,="b6OO22L;C8@>`J&m9LR+Zn9Q`mbXeN+)f&AEuuRKG`<:9;h6O!ts0Y0g1?@,QZ<6:Ur(]#4jNGjgpiV#"+dC<l<`=Q9@q
%0ijL13!9s,!\$_6gSH5+VlVqd)=5_,&k"l51!k!k7s%iIrIiCgLR'-P,&-e_ncH'cM,YfOoa%`r:cF_H1!<g6;jap?0"!9lh`6(a
%M/_ADpq=R6&Xr'A0ck(*iNp%"6r3'*BQpn_lrKY&_;"3hrA2$dL<P7[,na2CD#G_(_=J-km>.=!^k*`8\(PjaOLb-/$S_g_??JF]
%.;$&eg?`XZe3>%?HE(9I)qKG:Se<V1T^u-^%:F@P9YT^Y`+N#e;M$C??Z0NU2S,k7=^!6u0Iq7eA(.frpJSC/OUOQD$RsMko4aa<
%0@ac%($/&fMI@$l<3>dG7-]tuOYoX_EP#HSJF;gTo=1FY<^U)lPKE9VhDO0Fk,[lK\,H\h_.45Nrc5'n'H#(MZ$Z(2WekOReu82G
%f?=t)Dt+hf!e`g7'EO\o^E!+Y.7=;iq7M!e]shY=q$M3]CS"n^J"#up="cQ_2h/1o^])VXiCVEtIOqJDM]^4X^0"Ff003>52ga_/
%GN*GHP^em7f:9=mr9B^?Oe,Qs=4<)<R5<8bH@G7&,s?U&B;ZP0WoW!^[qpB)]6'WN34d50(Sr?Fb,sN4Y^J[J4o7T^/+"S0]DSS8
%Ie%PSh6L#'\21ke<Yg0#)s4OX]t/-Yh<2p=Br9Ea>CG10BHHV\*8'X9CNnl$>AW)/=,#5CSWpl>hHgmt2cn2ngnn4ec)?j)%1\Ih
%a4G'?l%Q19^%A&,BVjn8flJ!s"gC=>iV?JLcW38Gl.O?_'a?TI%Sg4fK;U<LPD;jPaI9e(q9'ckBa.)X:-[%bQ'o&M]WY9mf=#je
%onhKPnoL]U]h[JIq*5GEXk%OiWqB2p%]#V<:@[VDML7F,UMg"NA>#@BBc3%Qi_EhGEI2RJWubI#q6cdcZo]/XWn'-kYD9O^e9ZNA
%3;9iGN5jRSrMb:m25S)hT8^D2YZ>rqC+m-0i)Wq-p[*g<gJ_c4E4A,5B@`BWn+VH<SR4!b.j;#5',+Gka1AHSC^(j0DXXC\Q>mPi
%l?Mic2-F"I:P2i9MJqV4crR%ZmC#9HB>AJogK/*%Vf`q@f&HG#Z@26Eo;XZok&og%M7%Xj1P;gXB%YV5XfL4^[Rqt>V;Rouqpo9V
%l4dEmm3O1J;<qaG(P>q/md?9NHk!]i)TU:s6s-MOerqE;"Li\^R%*k/\jpY=U`$Z#p-`u&(tS!?\l+m`Jm6c;Ds*I&QcFZZNYb?-
%!3*/1EG?#5Ck]629MF]:^)k_fmB]c.>[4e@_J"UWG:$Ch%kA`gJZ\A<Yc^=53k^p+Z?\#aHknl'B,hE(C<p]I[%ZHhT&K*$J+4h#
%2Z9a!mN"Nt<c8d1^9O,Q2LFVq$BukIpMNVbr;'h+\%4NT[17,u<a_sU[E<B#X/)/9m!!LoGduK+]QAVth$n8p5^b[E(>%#dX^:?o
%pY8eXDS-FN*uPkZ_ck;X=439Qh!3kX`5V'6gi?5l^hg0F<nj=c]uj<GRpiE?8_8md>9U*ak-$_Fei's/Rdgp_DW0S([+/OD(Pc3<
%XZdTMA*N0(:ociqj2[M:c_[W$Kg6nJ4l&5U[b@[]BAUO04d(70%eJ=&;OW*c?HV:eSKE2EXgVERM\E2B(Nn<<GinD(JkB6!NH]R$
%<`.s\8M@K_lF$g)0D)VtZC:T<.bnj%<``LSag9L,?!sd`g2ju/Vr$j^hlp,/N3[RVms02tR8c/[hgnfEHhl[k,*tFH*C#8dKjS!:
%l?]>3i3it43nMqIAmXX<LJfLd[L^#uYqj(/*T'5b\_^AHWU\Nnh-JIoIbNCg>1kt4^fGGmQ@<@m_u8+f/UYuIf.RXF^#GTUq:A+=
%jdidUo5n2aX)u)(b#82WpXU)-8p<=u^4%ql5M'Mhi`X_\@;fA',*&ZHDlLlV=?.hW!^2_CDH/aQ:_eB4bO=oNV8KW^/aVl%FSL/i
%i*4W'5_3e:.",rdI9r"1b'Rc0DkEltmE^g]Xe=A&01b8-'BtV)n$CH]`_e)LXY*nV^U(ap=42';FK:lh=b0n^[4>NgVH<"dmtub,
%qpO$lid0836g8pFhK4k1>MrVp2@A2IT:\`"'BWfWgL&Chc/"oYXamb`;gSB7[Li$*K.T5l/urE!2l(*Hfa`<)%#:(jfsq2JUd-@R
%gHUsuOLHkVo%*G31$n;<I.1Wn59+D!L4&ou<'rj!SX",C*D?^QeXu+Cb:B-q:o#Q-e+ClN53c;h@d.EH4fc3.REk5<XO4M+/uWl,
%knS(8=7BF2p&UQ*MXp`kXMElob4=/Pn90.umYi$;KY+?D1TqVd>E/>2j^`/-bpgJR.m-e>3:$4iDo`PqX`\o(,M/@:/mbWK[qL<S
%mg:RJ!gAMr>M8T@p/^ThSpY_<A=rgjW^1i.g7ZgbKK;J#p&-OY%p_)/pF[-(*Ei%Q@V=P>d2jL5p2.c'CaX8ReX'FE'ZUU"(g8un
%YjU)P1:);<aGlmW,Hi^"%J*WnO1D6TF<e:qmIhm>ea_X7cIXP%25al^Gd6odUfF-GT2^kD@BKNfBQ[t8p?D^_e'etJX0)*DI+r@8
%osAK$C,[5ibIlArRKpaj)6m3/I$->H2VdTsPd@'c,0bhK8h<_H=$-VpWnlN11J2K9KB+[3ZrJq76<aW*imhl\7cS3m'&KX2r8T-:
%<DZR[0he#:4ln\?\3G;:G%,0:[?"+Bgm=bY+gYTGQP3Au4WGe!2g\0?!T0Oc_4fi\-[?JIYtN=:RJUj0$;+r8W#/Dr_ia8fr=+&2
%;I4>Ah"/'bM?`Z"28t:BF1r-,S-cpA[F=@EF:^;-o*pgP62UQUe.hn5.D>FXCTN4'Val$:/rNhh2n6WJ>Z3_NVr[%5'`1h?ah&mM
%c`'DAhrj+<@sa",CtP,/:9PD0fUmkm#"9*2#WQmKa$Aj-gOhj*ointf8q%*QRf#f,F'[LXmZpcsUe_AP"o="J<#/_qJr*,4hbAWG
%r52![VL.5,:Xe_;WV#NpV"<bC[#kFPOQbRlEHCp175KgDT:/G;IjlZqB;Pp)6hCl:5q^LXM6ClU=C1JsjZ6>7a?H!RGA`nto]6]%
%,Ns+CP2>9igB?/i7Qp#<"T*2gRWnuf90oN>EtaTf0,MbhHFV>h6IXD81O`4b1t0L('OW%F66/h!4^;ZD)JM!LH/:/q6@6Xs6<HDM
%@H^'[D#jD>%p/bl.J!#ej[h&!JAJA2#DWTi8*<>]T4`,$'@DH-Ik%ALl*][?8i%=/4/ZGYgkNltG?iU=>er8s<0/Tscg0d<iFmP8
%bXXrI1Rq4=_;r=O0^Vg"4d8EJ/"[aaDP"`L2iOW^\]cc8EX8*P5_6>VZpSU:X\';Uh?>;dHPYOtnss1<6*&=I&We%K_.0kh0qlqL
%)576T/NE)GE,UdO/esYlmM9\=WQ]W0199o"Fe<upHO5@ad)uq_<@r#uYYWd<&Ge:,g,J854*r&)b`a,7g6k%?$u+R4dCst)jjRs5
%$b^4+j:Q0<>W;%(8JS0uH<!O\L3J"rQ7bt:Ue3bkY<-c=Eb77];C/7]EmPRRi6+m9iG8*4'AY#mfL`Q:XZLko\6Fu^(T-MDq_Sm2
%4l$uL+A<&55:7\`NJTWQ5b,h2?*B;L7%RG*^)Tja;WV!A.]=gX2gs<?'eo.u'3SsDD/V5f2kr`DN5F2m0]/0OGG@NoO1Y(E2!,,)
%5+BjO\'MWc[Vh['q2o$*G1C3E3kbK?ht7?V-s\c6B(*V)c>GI7'=I9o"bI0IF*ps1Eu4OX%f.oXB1$;&*LnSDjRU.G:^Drf$u%7_
%1kM=*M>[kqUC$#nI8&14TN1%GKGtu[SVcA3Ys#oT]UNPFBXEFJ!:1"<BV575oGoKh3c"*gnJ>^uimoM:UX2/aAE6.>6+:)`39eho
%4i._%L#ah1g`KkIk-82fpVTS>(<WgDT.]+Z$=g^0ku24=.4anAoCT,t^!X%c.L:Lj-"dD/,OEY#"H<s^dl6:HZj/hWC(45UG_pW-
%POHS6>JH%?(h*;/&[]ho%akp;SQJ9A&)X&p_46V/nJ/UeKCFT&THC`]?[XPM&&,\,4j1g5B<csRHP_$b)&MUs;C@gN`tLI3,+T3N
%q[o]5Y9R,-K^:!DR<fS,*!Yqn>SPUZo$!1:Q*5UYrT`AjFE#<;@XTEbV#;kSis9'u@%T8seJNU'IOQdnDPR/VSuLH4H5V*>-]ppU
%!,hH.ga+,XSUI,K-\A!=JmB!q21'c9[,Y)keb.+bZk*13,\3^Jh)c.lK>)_L0!k)2f(u3_m5FTPa^K5[!9GDkSl$QV"Boj;^ag3+
%>W:u8X0]^*4!j+QJR9NHFCU6i^@WZ;'njGcgsIAbdZcX4.hF/sTLT%n^^:?VI$,$:_ul8lKO9P($OH;q^)4D6c#?B95krTcVC,u/
%9jR=s9jjBmpe_F"0AQMFF$AOML,c?,dk>]".Z":eE,S$ZNgDYMh'DL<P1lX3@58<%Mani>N=Rg(S+5#AZ;VTId9L&7$/T+2MWRDa
%/lAqmWhRH8h-g=<dBX=!b75[r*Md\7G]pOIm(BkGH@%td2P`7'AN$dfJW>#!N=tXnL19as>"Q#``P!6T4$JJ4&^s4Aol2nl>=tRF
%:#O#`N-]Jb3Abrt\KM;m?i#0bG9^)kE&SPCdI/+jWN@iA(8='F6X(S"$c'LUgaKZtDa6`NV8ZK"KUkN_6K=c+PAl][mc6]OIl,ds
%o;eCIH9>U:P;XMjVo3a$iD7a!>eFAQ.e<@t!Ma>R+#?Ao8L>ZZ7+X>B[hlW<SPWh.\T0^5,<Z:g'.1-+F'R>K)96j&Op4kgE?(;Q
%m+aLoNU?pa2U7gO?n.]"`)[SPpkRG[PFbN<_a[YQ=rak1H6YY_U80M<:1Qu\HGnMAF)nn0;03Aq&6ZY%n!B*3n\YJf:Q4[8NP_1N
%;/#t?iGfF3Wh*<VP1h+frug8;k.-3"#1WXkH'QGCObgEnpsEcn)Q@CpBge.<NeS$=_X<)(p,p`GnJ00>nhF<-"u.'BI'J1s(a0lc
%1)Sj7Q]Fe-5)kM_5f7HePP^C#(PiCBE^MoTq9`(eggiiiipu`FbciZ]@S7-.":+9*?u:=qo?`NV,*-n36ucNddZ!DCo^:^.RS76Y
%YEJ+A6//W<;0Wc=o+$i6$gX!A(1(?\r&P3@j-6[8gI7a%nc`MKnjA2$EOSeS8dp[]Se_kXk=<A>c%k2/h:EkBqJ>#sZSBHudV(21
%8roF1^:&Na[MW39_jR68h2Y;*UNcJ8*CYRo7E8Z]g-V,(904QM=(k(!N7dnulr1DQftYW'h"X!$ipukpj)'\"JQ0nV!V?$9:-Ni9
%=/G*X`+uhYZmRf(MAL'+"jH'Qc&=!?Da#qCDbN]*)Ch:RN6pk7jVnko0c27.005G<bY;@_/tGdO2'A5]$re8tSM*$jDbNi1*%%40
%3g\0n5Rik$(S/`.-DiC*PKju8b;\QX>oYtt005G\M7)<kq4_s+OJ#++c53%pa%"Nb3hJ>23[+UNnK0_pG]='tGTPL]Jj(K#&<h"N
%`JP`pU,@-1QB:k0!Xp&nH_:$^`l]tFimX=0in#Du$LdRmLXZ=&iq[FSBg05(C`]?&.N^?"j=bJM0VZ"c.'J^Ep116M8E*9)_B)5!
%&;Ygr:0aWD'&q@a\eXDlMWe!fVaL3J^Xi_FH%L[nL3>P>m[nTqj%GcuOW_T<0['`n7tJPI%IN!rK6s!T%5'W1-T:@phtW?W^At(c
%p$HJ]*E#(jd#<iT]1X2P'$`NED?<-u#-q-gTT^^[,mj'EHVk\F[/rM8@kih-anXJGdZ&CH,gL`gNB`KE:I\a?CCc1Q7V>]oj_+b*
%V%Vl4p39P'*,T"h,:LA9?B<5=+K"'))&XVg/mQn_l#DRNdB$*5NmUWtiD[4hKU7Lb6B=GKP^`cI?%S+f4@cOeRY9^&Zf<7uGG6;M
%:X0r@FNb_bZ(/\@aSY$YKn2PS@q%oV+$#$=Y@ehDcle89g0ugbP'2dfdT>C3n9kg'rYU9:C(&qr(^+P-q*09O9c^)hYJ6GGQK\^M
%U+'2!krXaOgg.[q3$;qW?1uB<pEKB%8-Lt3EV:NXF#fOf^[DB[K0_6$$1,LRH;*mdX&lnJLjRQPa)q?(GUcg29*+4cpe4q*]#2l-
%Qa.D_9;6I=gU"-t@AnmWr<9?.*uBaP87G(WW)l,7@BW2XL$1<H,gA9DhC)C-!>^qeONG!0RC\IHpJ):Na+R,>YD*o]cpX8pjkuL@
%e\RVX]bgqfSsIn?S2@IAp1l='mCR/ji<$9_9"]%o6C\0NqmG%J0.8#sc+=?Okb,ui9LoEY3I78\NB)ca#'R%#mnH3B0Z[][<#+N.
%)08Om9@g6E]Jk9qb3LummJ+@RO;9^4pI:g_YPk0.2sTI%AhqHUo.ZYe<lKOfhOAK!^t8S4hA\40/JA^OOusg=U%`.Ml5V4rLE"fk
%"3GM^i.N(,/nmP$pP,f>fNc73mnKPC+@ia="SJ$&'H).Xo-r*t4OYf-2)^R@I1R<<1"K-TjO0*VM%$d3H6^#Noh.),12DJOcOS_Y
%h9ZGe7"^t'8u:`I$RXAUKY\4>Bl"=hiUq='R,Sq.EN/=CPN%oSUG[&qdmVCc5@'GV'*1C-DGqWCLTP)o3$;Xs1]@hd!Xkn30lS[m
%lXJer4J0%$POh87R26le4gN;E=@sN,AfgUTp*Aho?VtoW?6@"f_dqnd3jb!=2sSW"?DB2g?t<W4Gu:89>R;E:B&8o"Ti8aQ*)U;h
%MnJd3kD_MY04\riSXC:(XbH-Mm9DM<On]G20.)-2ETe^J8ku=--4%:1[4.m/!X.]L#r]Hu<<Fu6no>F*#1h39LHN@a0im?mZ"(BZ
%kd/*_L->Y=CLN,uPb,`E:L>9rTa)PB7c#L"YpNZNg73XU(*9oZEQDSo'<K7/Tan\WI%>13EG)p0%u$VNp91+l4=rB(HKI;/Jnp%>
%^)[n>d5SUANTd<NX=3KfS0TF6<n-;Y$l3V[,?^(/Tu'\!fd'PpZ*p"5%YgMJq.tF%'4cbZ!D<FYg[#]Fn`E-.Kq?V\'Sk9b9p312
%Bp.iULlu9j^.481.uu?D-:sM&1n#[mW+brO=f>mW8[=FI(Osf>5B\_;NJoEQLne>k`@lMSH%8ugY/f_Vcu(PWCkTI6Tjre.P4C_E
%/P3%*GF1t(HXUeY%K$e`jU'+ojlQH,UqFN\cb>S5_O^EG:!-s3(,>'B6RUuTiQ8<"dBY'l"o$FTj\]!f(&1,$lmm"u7JuEEA'XI]
%!L)k73-jF,i>C"W"1OBgG!&.43e;V7+I^QWrs7`]SVaVu<-_$49<\X8Fn.4?p)M5jZ*7KgpoJ7<T7#giHc\S_]8dAFFg_#s4G+oP
%61I;;bh8e[?MO;<%_'PIAhdQ'rg]QA=I.DDq6OkHGl8U7?GB%W?#1GKF:(IGdu+IW\s0i&1mr;dD1%53k5Hgu'm_\]9XHrGBm6I8
%8]7t`!NnRAfat?SoqpPV?7*u^6^.JUfnZN5];NWp<q.O-OB.>Ibfq%6:\K-m9"Ra^iN9skjA)aj^cdD1$#hEZa,"NmIVbM\Xno3I
%KA3rW6BhB?O1C89\Rnqng20gCh7M``Fj,2.iT"g#ZJX/Emcl+"eP\f94499nlh'?u^@+jN[[MZ40J:6s]F^Lt2dY:/p.[-?gI5p#
%T6O7ApGGgYPDP/MJiKjqprR836'\S?o;?ie3/lQk;-eYi?c;$sKoAgI7erS7j*Q-<gXGC?Iseuf%m*U.d29RGWu:3#$?iY,hs%N\
%GSYFH6s"VR;=##T^&)GnhSJ0RfCS^8lOWJ,eb+5Se!JR$G<.ND9QI#g+MQ1BhmVO$*K7M_c$uj%!k2GW2sZ0XE%Lu@]XWl#P)O?2
%kVTf#ZXOU(Z'#gk1"T4nZ#6AH6gZ$/W^K'cpoSqH;)kl"^*)a:?_:&E`4d?E+kUWj<+932<aVd84a:FCO;F$>Le!lc(R3I*lXmM\
%I6lrSm&c7"YqOng4jq9_T^WYH6]W_%0/aG`1l6WHq`H%6\AKTcH0:H)ogN\u%%>fbZAUg0`4h%dPu/n%,sA#=aM^7chVZH?$f521
%.^:Wt3)L498/(lPqBTs,O!q7d.'(Z1d5?g"^7[K.f$3Ckqgtj-S&HUGljLu$$d)Qh19kb*V"L),(Pf@0-2%LRp%=6M"GqOm=aad'
%R9i6+p'']VA,`Rui=l*?G`NuC8!V^C[+Rc_c]KRJGq58B2/rjpljK9Jn;W]a'Do^Ni]Aqnnn,\U^(B$T'I*],p'Kr%FNh#ZKX*lW
%qgsPZ-CgS?VQW=qL9qP,]YIFW-[dD,O4?=d'%M4SIdNhg.%4"cB4&XK%A1ctMHg#<</qRHijT\BKjULqOUP6pG5r#H8tD(&QfZ2`
%l6i>/+G!/?S\9*dVXGa7r!!E$7pWYAG?8]jT6`joTNau'G+q0?.l8]]M*R?R#I=^oRFFh*1ZpW`pAH=:Dd\ddB,4s'qX4A&0R:rd
%1Pa!',h1EZ?N.to/U@bY^AO%<3TBK,9:40eMBfun])5@Ndj"5[9:dUJEqs(W:<3GhrsO!:qX=IM1LI0Vo"VH$"4)Vfru3)4KSTrn
%)LJ(9&K6lQOZYS6*096uB[.mD\QSb`F>hN4FF8i_E#G.o(DPi\Dfdp3r6VnU*J?m#pB8:M?J?8;)3QsB%WC]l$(sp,U^#I+P7_p#
%I:JlIPM&X53=SQ2*m*TMf)")S!j@(4r3E8_Gg]SDg6^YlW"iJ=UC"?FZO)Aa1kP<E;-$7$0h8I3K!fi&fcUnu=A_:<0Ka:_.N2tL
%p=)Fq>jo8g44@N;/c:^K,a[-[Z[I='1-O=)^FJcc;99KuIT7$:NuXhe"U'sOg?'#&2F3^a@e76mfM!tXU9PTD3CU<bhN7+THCSpG
%^1SX&iHA!Zb(,='QQs3!nT&`<4'qb]-jJc7=,jqYq[bOjn"Laja)GgN%Nk)9U(JAT5V!c>L2X8D!u46m,P;ig9,:,b$H4]g`C)*>
%?&o+(O?t[Xo6u4:rrOED`2inB>`V3O,J<>(mbY^3Wqrsorc(q$o]j1T;h%.%rTi(R*Uqq#!3t\"qJVa@p%WA"]<'=c>Pu0a4pQ(<
%[dQKUrZsbBIHTR9kkm1Y!M]8+S@jtHgK,F,1bB`"mP!<r*q/QHq-[hBi4P3qmis_&PGd9L(;ZXY-$"IR7!)j+_e&^S/Q@$+TC$tG
%H+)N59$_slmsCdP'&=bqd;8`k<4u-jO@FC2/^XXU?pScjAFpK"Z-Ph<)r.J$(Mgjt<)M=h0B(bO7VR\gHrA]hJs\s@FW[nO8St(+
%Q=ke;WZ*eb7q?s1\"`9f*nrJ=81eDY&J:53)Pc3g5e7\u9@^5cpd-oWrQPoC.#spP7(HCX,^Ac1mJqOAgY)'m5*m^Wq9HX6a@mQ8
%<39K&NU/FEQaXMk)nHuR<3t9'RL/'==MbFKDk</"PT%+PL%k5!lnV8_VoVe+''J)^bBQ`GWWtH'-K22bC+11ENFE3Hqt;V;)IC4O
%NV%TY]+6?FgR)W@<=eIgBDSKR87PGe*4]*SSnbg<,!gRZVAiU&m,6+#Q1=+cbe.!NB/Vjo&=Qa!hYfD'c+@'+"l)0&A?4NTAKh&9
%IJ/XR&b58`4LEXQH2kDpf'7$aNZ;c1D&mPc$cDZ"aL*BZ.Ue`jf'_8djHhZ'?Y8/rO:O>5g`@gcGuY/f<@Z_NECd.M`8oU<neBS'
%Ba0;2Oo@=HChr"3mO\:K$>jp_Otf0(8!cFd0H8R-iCmpcXnLj[3iH',$r'.FG[.oN9Pqc2mGekLN7mU1f<6I]T"89O&$lQkC.s">
%'lHcUX40?NoeF8h.68!/5'9g1ZH.FdG[QEb<k-@o,[Z/e9P1L6lmU]Q7rmu`*fR@uDpp3h)CaZH5*%`EGcb2uDC#bem+j2`#Qcc,
%`TT+2Ot+:nT+cH#i*r.nI]*'jljYX8^h#@&q?br7995PM28K&]NsgjK*V5gfS;=3AMua<I)M/R@#/V`^!$jUNoX[Vc!#QA%a7Q`L
%h$QB@Vr)X'*$.Sm]$hURlSZH[%elb8ToHq;-q']6S()M+]?hG8(Zn.iiSc7I`$X^qG[WG`7(8'f,OhTG7WA\[j<O5,4;N+E=gF:1
%UeXbK;@Q>lN&cJH=[$<c]X9`"V@XUIQHYu`%7QD+2ht_(n*!UrAi?LF#VG9WFZdcV,fnCeN?8ISX#HQHc\&e7^*4'dkK]SPReWN!
%"7p4arV,UPI?GaGar!9"-T9;2W,s1<+AkIpYT`hR'<T^UOjI]_IH"dRQqX]MR%kL'pDRV6iH]V*7kl8ceNF7=O-d62]L60<ICkYn
%k6iQ\/WII:Ve6K,UP:t7<c"d4@Z"jlkQ4-%(7IQOk1mGs:MkLnIMC4>Z\eNFg8N:e+gm$lJ.@7>Ls3B#/8"?_nUN'F8_$9bs(6eG
%7.9[TcUSr_3<#\6PXKF;_XeA[I.p5,R?Epo+-?q_:`CjbNrCXL%,+qO,:,'tmIfNb"rZcUUa3s<R]u"2^/>S2:th+okYn/N9hA#h
%*r<?I]gM'8F"&FX1#.pU\I9P25aN4C>i7PI<[aD64h6QI]<!^3r@jth$=,q/cTd/oXO,;BIa_k^bb[Aa`ILN5.s0Qi^\>$#Ubq;d
%n%Gf!N4f1MQPB_:+.ui'^hZG;YGU-444Qs9mEc/l)tq-9:9).>*VLFh(OG'!+K&BPE8b6hi'q^dQ$_KK:bbeg00G1g!#uroWE+9&
%i<W2d8oim!Z@'ul00F=g']ell,3XS14C!fWm8,K!L:crZc\/Si00JljL%i$nScG-D00G17gfWY9Spajg(k(.IKWh_s$P0"f6riml
%>^.))$p0mc&#1c]@m"W'$P0#!Z(n>r;kX!#n1\&:q=V+G00Jl[5P<fT(hhe8EoCGK>a>qE4ktaH#uX>aET(?uD24.a)>:qb549p?
%oYNt6/cOK7HQC$,??d;.Y/ZnJc%Ur#q_=&-%=d>FA9JB@<?G5L>52riU.$ccKnn(Q4K&XHikiUs&FWHAD8-l.L*`UO>7j6">`dZK
%fSG:j`2$X;U+SRpK*r*/iLrVVJ[ZZnphU/Jn1_G>Z-[h)LJPGlDEAgjQ/j^M6MKk*-O]<9E8b5I%.0F'^4<O2#J9IZqW&7?n/1`5
%6RVCS0OoH'9Nk&[!nDYV@03#YM@0riD`\qF<G**hNZ]?(ab>LA9\^4bGfXY,[^^\&>/(jp`a2LZ_/'=cn1Z?>j5HK\T#4o[(eA2_
%D26%![-OO1O1=X=e:i\*b)[,40\hA;0#E6=KDY<OL0f,WIkL.S(ENe3iiqG+N0QRZ4<-JX/)\:^5u[Hs=GGn`(ERnRA']"I[$_M2
%Gf[5VJo<_]4Djj$&#4cUW,atO$P0#7H]GIq-!gc4G1_SRdu-'_Knk<8Spamh(rd*ND24kn;;@2Gm;U9n[/RiW*_,%1aAe2Y00G1g
%dL?u?"'g'fIG82#SsDK12tFCEd0Vh_Knk:o2?R3/(cn.r!T`)5NiF\n_S\c]S\nfZ(bI8bV<Sj5PtnON7UY2\Jr,>U0G;DHbV^@(
%m;aZ=pBVF7"M^"Xp\-"3dSpj1WgZ,<(R^rFD3k9Jp1`^U+qcRo_9'SENRtWW8kE$si2#PYG,r#o<o(i><q\I`lhXkS=W>[s&]j7k
%S\I-9[F.tao@%FC)Pq)<G!FF.eR+g;bA6#/r6"T`mJKEGZQU%j^N*62fA_rm4SZ/fJtUbp*_JLYlp^/Xn+^$Hr-E^V:26%)l24)[
%V2N%PQ#t^YGa#;+://<G>4"r6McUe\DW,V:H@-SpOe/.^hPB<j[3PWLDe>f;8!tI$<i_<t[3$=1XfbpD,0dL+cW6o+@nqZJE7TSV
%e!\2?lgDm_Z2M+Nom$5&Ssu=_3M!OCCKj`8k<&Ri+.lKlj*'iM1JoYum:l:daiglWr5p!T8kaFFRbI:-S/+eL,L*#CM\d1.dU_I)
%J57,8m"EUmVS'@lOPkGP?JN-BKF9Qg%?!k`5("NZ!,4MZQ8F2Um^Mh0j_;0R3aS>#LYFUcD>%Rj7@i+nMH^<i;Xpm%0C>8LJ$gYq
%N#,$^9sY&U^'jP5f($G<.mBlOBSPRYWGlE4j8Fa2m\I/H;o62jaE*X*cchaAV%j3t8g@CRT_Z@Ol.M>3/\RO@\UlZrI!RPdjjFOC
%)]Je3:XB%X5DEG$@sG8M?JJLedgJZ)]BQlp#r:)[\&Cn-hCknQ!u%5ikI0J`d`cmBP`oNhcPt&_kn[#jZ(N(>jQX<+0>,''Of,6u
%2#jE-kBIb,="!C=N[/2A3W'1'1;f]4<T_@=]<el\\!c]1\o)]S).Y2&#X9-YcU3]B623aD;#^C$V4>7ID14>PgRAH"f8kS,FDTOS
%207>sJRdUk<hUDi?"n>+Q+u'[FC-G#GF.Xn`Epi<6$0F,:&a-?G$[:n8Xl_O\Xh82KL%Bo(0f\L??")G:%.F[$-j@LLhqF*-P]A"
%.Z`t(?1QuK`h2PmAX`NZh3`75GXgL$8`6tc!2\h6$=;CP`WCP8,/!Tq,0];)bjXdf%Qr/I.#Z3n9<<>t:/LBN?HjL]J#_Sa$\JD8
%PmM[s:Kkhg8\*Tn71j5uGr%\,ll1/,q-7WFHKi+,F'2`sBYO]L8\+04bn&45jX)UH`eQJ8T0FnQJPfCg=Y+`9G2N.)><Bf`RE@sI
%mr^M4D,2po)juo[Kef9-R-GGC]6enID!cM"&_V"mF,"!6M<s>7&[8W-n7pOrcc[<'rg+QqIQ?2Q`OU9)Q`3HEH[/N?loh12Sk:J^
%HI]502SYks=QL`!FRo#Ma1hMbQh]$n962aSU)pJJbOb=*(#D*Me`Yr`m/;M+oB:OYNTTiU5Sg,4=fSl7H('09r\03W>;^35'&5N`
%`GQ+g0c^lgZBbE^r^-&3PB*4`XOCpPO\Fq0P'>uH%!a>Er974$b7U.j7Rl&+V>7\)U\W7u=2h`'[:SrEEVud1o4Z996*!aF[nURd
%B3ltWok;PcY&8DA%rS2"(l?NPNPd&LI%&ZPL%dFM4VkXP<c6h^joXM'f/MsIj1>_0U>7-.Q$J]Mf(FsnCpg^;?EF0O!6/aY*Ne8d
%GiVnD.H_q6B/>0UNu;khJ$L8pDr>lL/V7RDn<M+YT?eNQTXuukDYjmEF.TX3\BEFG3c>s?W-h(&fgn?em"7p@J-QPrbB.;K=2!j/
%WUm1%YV_Du1uW/&r?.0*\pedLcq=H0mZKD:[X)%-/d9+'H)D/gOFMn;$)9N%c**O:]A#P72d\^!p/$qEQNM29*69fPB.:tb>MfXQ
%T_B,jmWd"pi@N6&V^+eM.ttgaDj6e:'."FLYH?N']dW>%(1jF0G&%;)E-M6hR,3laTAuEp(Tt,N>A^s?0LX>'G?op+8)%6t2jYR]
%O6k+s_gkj3o'a`Pf$EB5@tZC-2tBW;M9<\AiHhPF[deMa:Qr91H-r51f8B:_g$A@lrl"5FpRN`1=flg8f(n)2<t.F;B]g7^n3Lq)
%-9"SgpX<Ijc8RboYuLLI=AlX"c^Pa*:Ci08e#L(N]p[X!msS3j`I(D:@Od%sYB'<=IEW1(&/5c.lBlo#1MaM0eVSHX^3]OYH#[u_
%>-?M[ccu'!qSW6f4Zb3Z8i,/;h<Xh@/iV4;eYNXlWq!S.$:`<^(k)%DH^h`Mo%EBPFn*$6-uU[*J"B(>R/3N41#(a[CYe6^cVVO`
%"`?M+G5GY54Gr.i4>'s,Ii/nmLM$bKQ0Qq5-M,,lRPY\9DUS1Ro%N_d9eRS^jrmbg^U(9C\Ts<=^\^L5U28Z.HO6o?8kSEnA@:6q
%)6_l]ZHgVWl9):G7WX9=ijYZk0<=CTSW3#OEOrPt208B&dF`<l(7uCd-T4cW<t5NL[)r7#O7jGDb'*W$-83&-eam<s0)]bP]%8U^
%(XA3gS2;JKI."[2Ksm&*0;#<NNIJ[:"1(Q[qB<q>1t1(?K8-OH[aKHA&O8Kp]mFOgCt6R)=&p(u/,='skE,2_o0Zu'Y9.TKlKK)C
%V"sVaK!N!s(Td0oU%Peb[![("?e_Pch)pcCpC_1P,M-g^i#k1o_f3fU8,1R^ls9<PELc1bp=AD#r?7djBA,<O5QV7Yr@iU/O;:(C
%U%o\YCuWGS3ab9lbt2/:k\=84I%Dhk2,0Y9URGo^+fR+u2;aiiYr3ko:U&uSR:3XR!jUSeV7Dc&s/)bm3-nROM-(]hPmPAdg\Qq#
%G<Z2t,r[;l&e05U;1mUU@#5=aBg#W>BkC`gK9!CgG;dU/fJ11_ZXG]/P/B*I[aGOUnX0<GS_I&jM[tM_YQ>?O!'DAW(0f]^4/Y8#
%;IgraBIuDnNC!pYY>`WkYpPR\R%%rISl!F%,<MoXP@fsN9q%W[,cR?<Dk3D94;RP"rc@[?q,\oXGAli3)9IhUXK35EN[+ASSV5e=
%<#sDl+l:64%m5-d=-\cGK@N+?%i=KI:ZLL\8A2mu,bL+%H8dQlX%N25DI`M$j#N_pqq9\P>HPXceSLmYT4ZK[;MED\+]QU;g`<pj
%13oHnW<tmMh>/00k=J0,UfcqUJI7O@_mSsL3[hH^;(A<0L)c8gc%u@em:Zt&o\<BIknn=V(\NEM;16hSar>gH#*a-?^4IJ[?0P%@
%.h6bt4GX67dB.Y8=b(j=+b-A>&0ZYe0!g-"VPY*W$dZ$R!0P\;hp#rJ9f)fZHl43P8UC*nS&O0Fc`\f]ht;38RmC0XiOr2j+2(C<
%:u2W8FJ8?5n@;ErcM]$UT>;+cI7W,4_LGYDoIK4*/eBu(a8lrdF#BAHG22TNLClRbJAn/W6li24+U%b)r7c=7!gN!eJqW]9d*VSX
%IZSS-P\0#_A3^4pXKqpVSOGjTmP[_h1hnpsXKqpD)%2'9-"DekBu?m6#mMqY>*="di2B4'IBBgVLFuJ.P'*(0Ohoo2e[Oj4E4pld
%qA$d#hTAG_iHjh`G]TQ-D/>Mf*#J54oD8IK6=X^VIoku!DXJE-O#PoJR`gE9j3,R8\pS)N-XOE=r;'Ya/RGNJ\$!%Ke3U:QE#<4r
%W4#3b)7?5'8C7N4HGgka`6OT22eP6G@.Pn)j8OL#)Du>CXc:c(&N"SaSEDgJ3S_\"bm`gM*7Amin<QADY!%;"D'2oOdkh24rnc<E
%:#$RYj0s>P6VT\H5><39T9bnXc[tWP"Fcs9A]k3.G:o]i.pegHFLFEXa%F4fr]STE&bV4\Ncs6T+X8ft5`AT8]&M;ejrQE6/q6#1
%icFnU`""C7W*tT.Ns;`[.Ju,_c_%VUib#=b/"%9/:Sa`\@QV80\RM6IgiM1&c-9e-X6KN7=D*Lal'0WSBlS$:D]'cOPc^EQ-\7"H
%6[O=Gm.1\.h`UcqooAYC\'7*34_a%;c[Htj7)R54:;%=gp"O)nT:NhBAfmqB17R/]q`*Qu+TALLT1leTS:.F4HQ?t:_-%t;VP3#Y
%Bc556Z42qh0`QpS0,[,hf98#;P@#[WR,PY`KncCA#_ID,D\Ro6&2q893UZ66?$U<:U(tn`'nGqH?DnWeFj+c"Xqt=H<QWn&W]LE<
%NK:9Fmr0M[0dhu'-@WU0S8p-q31FnNkH!Y*k&f(OURDdX.ZaeT;TR5+^;@eYU,ou80,)M[^EDu-ASEJ9_T3^'AJ#+Re78@nU?s#U
%4?DuBj0t\#KQ-IFF2-+t9,mKGjc^pFU`]>:I,r9OO5Xq>qT%C2oit(u!m+U$Z^LL`8((CSLV/_^oK?REF43jqZ2JC=I6YuCkNiYj
%R,C'mo?4PbA!*F%([;EC>I+S+r8sU,a6`T)93birg+.uOGIg^o;,8i[V+A\:c`&^Sio*2A6hgSu_8D6K&+e)rIa$WWe/+-u-!<LM
%p>,$J7m_CH+)PZ!@du-2M0P]L=l92o<u!mi'Tg+6A_.`\B'?V?j$B6C5BF23eNEY<85Qm<!b,Q?Tq"d82sEf75k34T]"N=XOEm6V
%HO(dLfo1I&WKm*O+#S%1Ml^DH\rQOmk."',LcRq]#[8(?RAcB*].e%K(;7n4TK9@b#(iTe_sGph3c`+J7.RS-_+75eM`/Bqkc&'#
%[f:L<X^KFU!S*n@X():VAmljYNheJ:YS^=?7@Jue`.%LIa<m8dFlPt=_^[(:TD4t=$cA.YJeVAh2f[mDO:u"XFJVp\AjPBu(_c<u
%CQIp(CjXmYc+2p_lg"$i^P;2MnWrcF8I2.]N@Qpf"7fAo/s&p++ST+`Q(YsbGjXYuV%S@-Emh/o$"lM[.4qG+dg8W\3Al9=m:r[l
%g[he4es`af3haJG+>.T,OJ+36gPJA&O<.q%P\^E,+O*=!Llt0f$"@@="k)<q)N?L]G\sgaSA)Sm97AL"X=rBE>#3h`c!B@SGJ!L]
%%scT2Aa=4T&C%(qDRJQ.QKnr:2r'pr_UHp?b8`RBe6-P@c0(hl]_f9jM,]jX71>3;7HUquU:$_u?]NS<.@rRkT&<!IdV3P6IhM-j
%UHs>]c*Kef9N9J"(?s/cFp2rHB%4qfQ(KVFl=o9!ih9Lim"*g>"f_LMGqg\\fUdD/?7^mc0'-0t794g+^A907,73fS-hfh"Mdr2T
%/+4I<QQ4YjQr<UA/NYU$`>?cF+G&S.Qugc^IOq1D0CKg75Q]!U%3rVM9f\L=R&<AZRPM,"+,c.61.c=t!i'W7\SQ(L/O(Mf&jR"m
%G>Adel7LoLb:J_F[Q*_dV:%1UA_'t(E-%-V\(#3V;hYC%p1\#>\sd_XFYqUgpi05Wi(rer/<7DnO\8kh:jii%4B5"J="6/V?CAQ5
%DAd5Vg@;'9pmRnZNnM&91s\+oGLIge\jWF>G$dIRk`jb*$RDM.G?9?F>Z2hJnooF9>la]kM9_]-QO8*)hETDPMo';pR6<"fOAgG,
%dgD]82V=Vn>o'R]CFIN:6]$9kgc]/4s.$cBB^SX>T)H4tqTF/XYr'_klPEtd5HiPjkcTLk\Fkd*fiB^%5.>f@IQPaqm%r$6QO>'.
%BCOsmkK'f?iN*U)$aHO'Fn[Aue]/Y8maK=TL7O$1VO-a#1=YQ9WTk0t=ja:R9uhh)\oY0*nQ=#e`ljia(Cr<UQc4r"?s,"q=EnRu
%VeJtO"r#Em+mU2!AT!sI9B^sgWj=?S.WZ;d1TT\[Qj/Lp\&btmV("-bF^6Cm5#Wmn__ggoq"?2-OpTQPGE-7VbMtT/^N_u(4P34F
%?,SNY#])R1LOS#4]%oB6ALGjg`E^b=A2kKU:Z;]4E1@b0;bY?9Bc0IGbY#(,bS&7^>f)&&#`!lBa%jecL\&:q%Mi1kkkf*I^VA3Y
%8E"#Y9U1)1UVB:I21=g"<Y,uUKVrD7#^82h@6G[JN0oQ>mh?QEqHbGe[<E+%4K\6Xig[p&akY$EG.,J*C%M?9mDQ@_,A$,*Q-,Y?
%CR*IBX86/)V\[;O+r$O$glpjCqJ2kYW`1T#s68S`jmH3HhFT;qEgu7HH[D'MYEU!0(&.dkr28e``'rfnAV#El8L^6e6);E#r0tCk
%\N=f>>0=TO[qktf_HD#*(#fPG`ougY/%G&6?MLIJ5hKH[17$6pX"BrMP`?GO6Ol/>8ap!B)..S<Ma*+/o3.Dc7CG^q%#@#QIG%k=
%*q+"ef^1P3GNCkiCtr`+L"=/4PeSa*?5-I"=3Hs=gj@buTcH%!+TiZQj%I87/=+:aK_t7O):#EF,m0cg$:r%*lLC3b2Crr;\Yh)'
%[t8iAP^B7KY6W4:Al`gf_q_hK7R=f1<f?t(L7^K?N$0424_8<@4B[VahSk:dF2<]2Gh^O'qTV'.jrEOYTWVWZ\+h`,1;^jChXr1*
%>752mg'0AYS6l:E"7UNRXRP5Sqm><o>mgmA#jq(3Te8/P2GKL,pL"B&FgC@=eDd<eFR;ph[rW_o4.Bl<:$c+7R/\e1V/T%kCH.o;
%-'4be/\:'SS<lX1birQ%*b$k1H:-3+dk_:G]1i4:_Ts0)03L5VHMiRS4.2Z$b/>@Hk.Gp[a6cHa2q-Z0#l[eKpFq9TZWp=T&9BRF
%Q'[Z<4>0d&[Pok;Q[`n&Qj:m\Mp;)U4n3"IIdRLE]MM`Zh`(]*6?S+NV`;dOLC:u8(A-C:Qa85+e"Z>nT;>>[nLJq2Ke'#S(ue<H
%`JA.h<</ZDr4]i0oFMDA@J"i5"g>@.B$Qj](X<TuMrGU&T-Zoc]E2o$1&#(6GE!!:4'g2\=<;ou#E^u49TX;?_'(<Q;0MAKBK;0G
%DpHb._Sc@8I1gk_GukTTCu*AQI,-OF^34;f\#D8*7_5k1I\Y9m.u<%JFKM)U)5`KpVl!>ko.nO,nLuMG:%:n"kJWtkc3.<jR-6Ro
%dph:JGnPKOOE9\`J0)Va"@K4Fd<Z5O5XqEh7-cQud%aEKU@fA;76S"-'<T;o^K:&!;^..a3L81@UI90P2>9ac'C5qj*_pFiq&b"Y
%YVkn(JS__pf$@W/Ks^TYOS)ZD_(o6%ZORG$C0q0]Q;37JX`qq%Dl6PaXIKuph:<[]'m(gN]</]o]AaIPc=]sj5ZpV`moY->`.8&8
%kM[lU^iBpDbg"!bS8=C';1hWdAFFghj9PDlU[:WK-@6F:+Br"J3cd2.DeT=\hk0LY;Sn;1As3jg;WgU:H[cOpi88m;G*c'5^<^;d
%I62[u'(LL!`s`K&+qdFj6mTQF3aO(NJemlQ=ugcrT\e:298FB,b;7oQNjTP!6L^(IgEDFk2S,SD[EK="2Q_Ug@HZ,dW/!'Y$Eo!"
%_jo>6W<835NNRe$`C8BugJ"h,U+5(+P7KI2k>m0AU6d5Ig,[qRn;'iZ3X6\H7lY3/%>NN7V3BIB_PjVB\p@gVlZ\nlhDY4>'JPuI
%3Zaa-0q6X)5IYZpQ?Yko?Wt::&1b9^<PXi'ViFArW6gR4duR68ID]`]&*1&Yi$'-#=0AWq2U_-:Lfu%$/KT_Eh0umL8@qC$AKT?<
%*ukX!(&BEq+*Tjqj5)sITTU69V>9/,?G;2)5dqImQ+3'EPZhuiii/`O'7Qa*"qjNM"0$KsY_eU1GTa+S)3@L*\)$T5f)FLD6inO6
%Zle'adPFrHkFOZPQ_>6-$L*o"G8rAI3q3g!J9WH/]SStpb@c/]Z?W?m>Tl6Q'79OM_LR5lFH]k0TK^(AASf2(RCSs=+@Z/3D!FA]
%E8Y0[]C%<+%2a@[:sNm5QZ=o88o,is90!n,--f5LQZ=o88o,is90!n,-12dDGpu8DU)`2`X+kmK8)p?)IXt<Kj_.n`UmYmLj_.n`
%A!k[ciM@NRM\8A`UV)hdED^a/&F-)3NJeDi>u=qNKJ(D!pS_dAV*VZ2rg.]R+5s!$oYfM4pcd!O4>1jM%@aq3i*%"LCH6csKco]%
%#&d?aIo_F$e'0lkTMZUlG;aSp#Cl@*^c*#`2$"0p^RJS7\8(Q/CX!UZ9msWY\duH.jm?dB_/Ubr3u8!9b6p*J1`/PDQk_tCljcE)
%*R$U9L3U;C-CuEADF7P"T@=1Wn75RQTFL&a>i1PLgPVY!5_:,:DR7MJQPmt,!1+_(]CW2AIf48PGlf?P\0mGY11Z:%3T][hbKp!q
%j6gg#4t#^3_f"UXU&HP0A.nAG!M*:Qh'NobT=6<=ebW_=hb%\N00)K$PK87Cf<eJ^@\jcE-U2^'*kmU3Q,1ltGrBdNbs(;K>Fg/L
%go33sV:ND\-%t(o*FA0q;bJQCqO*RS:1ZtgUh<Sq]UHf6e7\"0o@RDJC(pU%qu_GpaIfPNCT=P6aFbqB-9Oi!D3ue88@ft./nJUP
%^_D1#'GVb%@2Xrj]#!+a5Y/$WNr>fMp;tc:;T.!0=]&,tUm.r(X)dJRFoNkd?H5Ssd]d3F=\[?r10c=[CU0K,&qR'K2.c>T)uJrK
%m'!rPi%,CUSIFE='%F6`HMpW3Q;U4_ZEHX$Ojt^EV&^bN[fE:<-/Fl\57UAmZ\E#D']sd:3i/;[7L#`YMQ\--H><(29n7.+>g[3o
%@[@cdWu-T#9<stnADQ,h4"D85ibMjOaap$5rGDH/UafNje3.)8jfGU%[\lcUOd/V`?`0=B']&>f/sbQ`:R/Yk$*6[Rj,t%rW9@AR
%lI??]cirFr+ko569%nb;Q(7ko<72!9a9QqTS5N0:h\oG8Qm@A^Nb6F:%D#,gX#cp`gGE3oIud$tUt:JmW56q+Q*d7Lcq>sk-miCm
%<QIFB6hUP?XJMn^VsA4l_oeDp`M$M6#O$)sEWfC+G["X\#WZUbk3[]!Adt5gfF&rMY)t%n]lH_k3l(%qJN^.,?BI!tCjLH)&W.dL
%`nLMgcJ""bq1*3\Pni-0/#T2@"2%A>d,4^"!jDG&aeer+P0<YC8M6NI"a5lF/Lda!W[X@/Jn8fB1/&'(`ABFS8B)c="TT/Y&As/[
%MQOu-<SNV_&IpUoR!+eb3Y4RaAbX!B3Dd'+XK>B'AJ6spW%ekGI*<j$el"Auat[G<3+D[*ODIG9USp&VKRKof1GV;MPVi;sd#Xkc
%#@t]P\QH0D[Hk7/Un9B=CM:/N)`US]ZYdX<,ZuT@6R-&-;\:Nj-#)eqU>5HDO$ZAk5Y"JY-lX)T:s!ZVfsY-n9`u@A*FV\?4:iog
%rWZZ[,Y>jaDOZMP$G[K8]'p"Vcm5,Vnls,m;%>il5+,c0/JpclHXC2Ej$;-APbjh7Ve:QGnT4'"9E_*obX`sNK<?n%bIRkjZ><+@
%Tq@&jRg,+?1m=jm[%EYK<FP#HA0kc<Tq;Nl'dd'V%^78[<FQD.(0<j/]ohOg!GY*TQFRdK81YTk>(f4ZbPQPr:m6]M@raG[G<QQd
%FM8#_OpDY'0UE"&:'@C%9;VhGS'E$?+^:e9aq+rB,"X.4S+K2oI3945b_W3L\uI85&/YXL"]\b^>bF\g2PPthaX,`Z+s\L%,g)1j
%n0&&%>1Sif<gs1jM1/&b$._n^$:5FIaM[6HLQpW_E_rl^"<8_RAnspsL*EZ2-#`?-`=*n>G_N15MGQ?#K\3(AK69o9.7/iMW+m4U
%eH?HQ#u.[!.^B=-K+TT!#+SN]!m-\-7&-X?DF&4-&>8O'diE8G1^joAm1:0+[j1:^/&Oi=:0&"$&o'6:3*@19&:gn"ruAjMA/\n(
%>)3dM@@eO#8sYI2;>m"6VGbtjR&"i&l[Wcf.>_:Q%jnPMBW%eB+:i#-C8UknKnVu5.LHQXrt<`IQ'4@g16VaOX?nn3W@?]0*9\n'
%P@7+#JlORqQKl8QW0YLX@]g9H9Ed,9jl-WK'.0!TO;)t%Ba=Sfn.!2G4P&_kY0pGu"b]BHi+),Wl`n4i@t4Foqo_`GAlCY?cFaXD
%>F9.>HXucc<""oV@[[]VX+8Wk):4E.b!0&7#Rh:.-:&WWD5)U&9QHO6[2LpYc8$/*1`4n4Otj8RB(4M:4W8D2mAu0uarOKf=;B89
%@N-Kh+9LFEFV$9&(5B]-5`f0&(Fh*?L"j4-Q*LZ9"3[#sOe^HTF1Vdd>_`APD2PHAVB89$<A!\3_[)ALCP9rP&p/XR0cLSP0RJaZ
%^Inn;#*G>mn3eqC'&=`>HC'Dq*MBmCLd746T;Wp!LY%@3XhlgtrV9(d!kMB!<WA!,9rJIX%9p9g6IAM5P!HMj\Y.,2mtqR#'L"4]
%cQ6=!`Bl.CUi'gSJ.3>hkChMIa<VBVcF",,_75(UG\9@M4JIR7[V96H7!?sL2fp6EFiJY?R;4#S=jI4a\-c-[f??l'<,7UlfPe\Y
%Zi"&PEiG8lNN<FZ_ag94(VO?fU(Kt10WTP%T?n%@(uYTcK_p;h/]2C#L&X<Cp5fIK#8QS2`Bu/j*NR+:6<4R(KpY/4q(EA_;ipKB
%k"kIAQm"A\cMo)'H`07V'hp#;;Ute/%)F2&.`!CJHKSbhc`N9kF_ZLh-#3NgF/nW0oRDK6OQKF8IX-/@R)FmYh`rgAoVq;H9I;VA
%^4Nj0a=KmfB:)N$(A'V.p'"I^`UD0V2KTN)DJJibg]4U]g+)pHf)D/Q@]+'0VRip-"\"TQ=AltZ,r%f/(c\=5aq'0/_:E76KLCbb
%+:2sX%MYu9\':h-_[4f1$9W_\$qOl?]$O<,.X'Z`/S_pYm=RO:P#Q.746<Hjhn$R(`.!ma,'uGcZ6dQ<(V34t>K&:DeJaH6,BQ1%
%aap$ErN6*<G`)MX@VPk)`,biI&rYct%dI5Lh(=Zk_frQkFN"45mZsb<Htu"o\sG_L=6dG,Rh/o!_%f='MRXs(5DUbI5dsK#k\n/s
%h;.YqMJXqi3l!Zt]Kio2iTZV3;XAp4VZ?'t^#n/,o(7fX/U0=l2^,h![U%kVQ!7/QJ5`?OoXFh7_6a,'EbYQ9jDt5iP"X-hQIrSj
%Hh*n,dFj`Xq@rtAHh(X$S./>L?r!tSS#dYRhddJ5mZrP$$b"7?f'*53>PE+hDm/qjW7V,`ldQ$tS#g)&S<BHRn2a!G:[:3Ijlr&:
%+Y%ZNffJd+q'N/p/#T2@"2%A>d,4^"-J/*8aJJi*P0<YC8M7]'nj:ru4o&MF"<?$?i#VkqAr/i)=oR4m_C<O@&10k&NE?0^'pc>N
%,K<cGng=$;]*4%;Y%u>V4/jHLirOZqG;f'B]5</[#b;<kA`952VmoL27Vd,7?Icl!K&pP2.3"iHK17ZhpqaV4@s1mM*Hh??Hg*dr
%iF\'<B&'kf+O6QFX8r^,PaAHTIEm436.L:P*PZ5Wb%E5NFu*A6P7FZio?a;Or6>l4W7-i"i<+`);j4c:UI/ji;pqMbi+<;Ud7E*m
%9b_DEZ"[!AX%G*@g8rH@0(B%Q,dBU[^gVci0FUuT:_hl`Yp":@e>;2S459WT5Zf`@PI^FR^a*2p5hISS#con6-k_p`K\-E?!&4LP
%VB<\?LS.C:[]g<2$0_fOX]*<P7+0HtKa9a6.l<,,_@p-^I5&IONBl:iL<;AeO[*GO7f]TK!jF9m6/WL[4'JJG"'5[,/l/PcU(5gg
%\A*kc"ad77*.X#320"\=5SR4p&7dD)(5??%rY,Wb^i%;:.oB@jlG/Pd#XJj">lLE!<-93SBc8fV>I5)0/BO2`8==Ah__?aA8lgSc
%*K6eJX]^24WlD&IYE+Z>#'1i9L1)5HFGk<@dWG]o."hSPXFbkTh?4'cUHfK9qKqLj+bg5O!^d1?0\gps/;T&SZ<i\(fbu.c$.fCG
%2li60#R0hiiYF7:+57P=nc0fN*rsZP9S["4*C6!m3$8aJ;bfelE_.:U3=96r61i-8/"8."!0YP19%^NJ>ENS9($hOq1a&##l_1[9
%;nii<&mu4mVQDm(USO[3E+4%NJAOiSK]&^55]E%b<#SlP!oY[c7CZo,Le3r28i`:AiJU(O/[:Zi<!<B@<@62`OCPO!Wp$N#Z7/_$
%+;9G6a.pK)'c*B78&H6%/KBkj=,0DKePUn&=Pm*c:a(j[TnX$r<fCWhe1`XsVad2jEpnt8ad21%Rou<-#GV-SJoGMJ!@#JoW;ruW
%FN1*bbJ;p_lj0h/i*\D0O?b(D%F]l2NZJGu1R8m[FJQ,HPUK:Wf'.+4og7,%$@pd51@6QFR4c0WS6U\Sls&$b_ktla7?H7+k;RRj
%m,HAJ**,0)8/RM$3XmQ)&-;Upb&m,=MgnS<;]-`Z@8NL+=!qS,#3>kN9.H)D6);cV-3W1l`Te>B(=8k4G&5r$_b(XZb!F$<$nod-
%!X-D5O>W]hi;ccPAaopI!&;k,+K!?e7MQA_k`!@eQ*YD`7B-j')'GI'ES\,)+rMMNOaY5X7%7)Z&5#llDf%g^PRY`reR4cWT;XiF
%FD#SO=II/s^5\VZ&m2+m",'EKn@uIERg-fqWCtqGg+%,6Rr3$Lq"%q)*.W<Hc:^2QJono*`rM3X"BU]dTWIC\*eV(O>\cVg#)f.E
%(\AOE3\hEa)#uA9bVU3a)&`<j2&QBdYa$>G1>#k</T<NaXBoBD&+gA4\32?U1>#UO&.<2OTAZ.H!">*bJgLRb1iaR1"uKEq75*8'
%!.re%W6'R$7T3c`,(lAS[d*-4%R<j#6l9Sln/F;Q*W6*`p`O<+ciZ=:\!TeLJYU3b`+$k7f4&-0MQ,6gk+V?j=@\>O#gS4(`ZUAl
%)cpM\TrMr5<(?NtpoX)1-%f!O7T&:r1>!ttQ<co`HVQ)7'cAhR+Lk'DA.Y^'U)nsJ!mudT,1B3T!kX+Hd!?6[)2_eC'peo^--ga/
%iO>K%G^ua7?p0<aY0#Ta;=<[^1,oV6:h6)qj*D-l8?rqj)M<:`R6HUF%,r3cQ_U/Q`7-qBN%4)OHX3SfcmV<B3Y#5!!/USm'H$`Z
%)&u^cK_=IW0M!CbmclGr,)53Z0A'ok&Ko\4SDeM]7@8IH5!5$0p@nc%3jHKA'l#oM/.hl4VTdVjJR!`0?Hm)V'I3cG*6j42DcJR'
%i^GgDckeAd"'jqI(./Z6^q3T19+I&oJ"S+lJt8$6C+':B\cJBD#?%E>7?Jf/Z^JK2<Dd4G+?$(^1A)SH5kZA#b#/]8.>AZA"Cn/H
%#TFu!*ee(!A!GA4SDB[Y,*hBWA`$@.#h.lpW_D[t`3fSM(>FM]$lEN&S;b?>3DMTO/7qu*<58P8"6'o%lSrX90-QRKje0`h/90/#
%<#E<jrGgaXEe$p6a>$CX!.]ABbF\^D,2;*^NX_09U(5kL7$H<J;q$rM9_%!uNIkU#)$kjql#3G$U"PD:M^a:Ub!4=Q_.Y(:"+[%+
%.C<eB#(dVLDGiq**\-5X?PJ<q$4+#k2S3kTi-NV%6Gh(Y9T=2CUTb"bQbdeL@^F9.UUb(O;h:T9BM('pC8\(9<!n.+'U<M.*N"E2
%O>1_P'_FHeJp>,cWJ=KKM]=gp.mjSC7_1&uW`[K<UVN=;bDniL)'FV(G65^2IK\Y@kcig=l-sVZ:/ZV`YgtXp)0GWs)[ZS-KF*1j
%bpem<#nTGQ(B98C,c^P=K['`(Kk#uLJZpCU#/Lgm5&.!_:+6;gVP6roq[M#o7YaSWoRJQD5QW>Y!'s9\`*ujP3.:-T94OBt2G9eG
%TOI/$?tG#=9/_JHh`qM\-3r3S&sC*[bK1!b^.5uMc12WmY.,(::*Bi-![s`TKlQ!/&-Ug0,X?IIf7N3mj;k$7r#/%VhMj1C@Gmaf
%&156u/cZI*S4*\f*j[k<5irMCJtZj*MB6^C!l.oX,Sl"=;A^FP+LH?_#umm4%DQbSRNX+8_\uB"fbB1d,/cK\<Qp&jldUG1%Gca-
%3Ruf<$=D(R<JndsY!P^@<3FEi6D`)\-M)69'!r>U82L@h=ag\u$>[ukeHCCPL>N!E5Vrm7A30+43tn8.0ta_f6RoW5nY1s5ih*r*
%d$tI:.`<N'*7[#)38m7,@%I^!Y@THr,;McO=\^K<"Io71kUOU:[J>uN?.I2M*&CSC70',^@_Z3)`"a7&%&Om-!H&/naFK3\BF_NO
%.7@X_[2E<S+KB?67`+[,@SsjN1&c#g7mWOPg1Ca!faf3VI>.YHJ=s$(&C(04/Pe!I!.o#"+E["'G%3!-E>OC!R61*U[8A?,<(A&l
%9l[M<NI_Y.E:tHDBE3-$!p)+$:osj+h*^98L)Hm.1q1npB`'>\"j.6_*S2NXQ0V$Hn54o1?1deOM'9r^,o30>5YNd2?(fEoTYWC!
%OK8ne=dq&K#%:ff9h'\/0pO,4UNMRWa+]>k'e1'1C!u[o\Jk_`e)fp"U7$[MQ1)?e:r^.^[N'$JCW*h4mn._!?9u&/RKQ@q!X4<P
%nI7Z@/f&7A4`5<2@4VQR?AkSrjN3l(F\,u189RB'[&MQ](sc+4-59N-pnk_j>ue8DF;rqEH3>upnf(ZDbPaDRlObOEh-pT=\.Ko>
%AqtJd<BG5%5qE+/19!5hD%cpgL?@^DT)fKc7t`B)J-@XNW4me.L;M6_&0MT$j=1:f1%)*i$qh$<-]8&Q6cB(b5K[A\\:rRi*<=G1
%5k0J":6@Zu`mABa!.)4qprI*`+\]kG6)b[sNUt0/%E&f<^mZYaH>>mWP!m\jf-ZT60JAfOJcqmR%k/EInoQ4$1#irj\51(t/?1)u
%jI;V=KM5JJ\t#CnSh`*CC-b8V;^57q@6t".L8bcj,TA?I'an!B_9mk3Y6_r]'!C1jTM.MV=;Ae<7$05j8E0rjBtulJ0H.1-!GG?E
%kY.dE]o4@<+ZC/ZZCq*+;'hI[(t;K=&;t7X<;:D<T3GOK`F@d$i=Lu#>q2Ki%8c69JE=[X=4%BW+!S/u2[$VmKI&%qiG`'(13RYO
%:oZ5aq@bC"SqBH<-q3kgf-KRY=b<DA%cZi"-a=XJZT_q%]194HM5<oX&Cn`[&D8sX2W;0EWailM&<)tGgi&9p'HscG.7A:iRk>_@
%#>l^mVI-*.c4L(R*Mk5>-Y:2L0M,\_/s0)VO>t6kFF/kZ2(n>dTO]`Zb;bqY%8uC$O7\(8@'/DER3qbETr/fe.>$q)`"m*G^ss^-
%;,KNu!5.K`/HAX_X#>sI@M,4P!iE>93Z8`j:mhVHXNA8"6&U#8@5-WkG9@rl8h<G#"LquBPKk<a'\)M(EJk^?i22d-DM0>O!2rTu
%(::'Hmj*,FA_&FY=]C%sr<FJQ,8t=:J@i\W'G`KLTVJBn&7>M>PW)dkFpW>L%o69[n1ZgB+IXKqKh>BO#f@%=e8@!2iIP<dMq\Ef
%Y'/h*EU-2ohdLU3'cj0MRK6Ef\uSFb5b0J66_ZIG/o[@3EE$5*?%!1<2?6$T_J5ha..R^77oXWmhBrncm"'TJ!7ANu"sJE2Zc^6e
%?gc=/:q#>5J4"D8$V,ri[eZ$J3K$hp>S,JB'><_q:tRL!ME!ubZ-Q*kRah&KoM(8.j[==C0ojmt4=88l!"Hu)7d$lS]=SF#R&H9G
%+Lh`43ZG3BE43`a=\6,`:s>S3N"Ba.)*A\g5cp(T+&MeGL:%)$7XMpY]0hT!%1nddlZ=L;;$09Uod7U&;&cH(9RnNj;R$`Q+O0'L
%h[>`/A6KC!-d^a1J.#sk-:0/PM*1ro(7b3:h%s2&do1m9IMba%7mqn-!d`"6P<h225k%GI0(!UJN<?`g"ksB_9r=57UF%.DW33Ks
%9aOCJp=A/hOJpLCEI&eHiP;ZFVc-&nS"*;sf,QU!q#ErK)D,VoRd!_78H!uJN%34/Fsm(s&1t6`F.I*T2N;-H=D58R;5o*-*Z,B_
%UrV;&5U:H^_48ogH&X:DI"[`M32O/!WH4\m:)-o^i;"REC3@^mZ2(%n4.Zk6?k(oKkWno`!=T:R9Y*NI&/^PiDug789=A5J]\$5!
%8=M_W87S6&G:dQO335O_gpfE/H82A\%hLcjkb2L.M(FZ1LCIL^%N1TUg^3Pt@l\4C7I:C0PBKHjQs_9q:sY:JF1b,HZZ+-?_T7P%
%NeU6p>gB,S#34E#2ni:@+9osl'j#qPXq0ZY@1]TT+:$plVS/W5)j\''o0uRgE6R68&FB_(8QaW0NsZG_c;&R08sXS>$,daQCQ5nW
%W1kRG&?_Lqfcq8Bkp[O[0J2ETJBA>0`<s0Xk3g+QKD;Wic,6j>HK"e@@KTUjQa<[1M"T.)!M[),E6JiJYcaZiaXm_<7G"i=;WZ@0
%5uX'7Qn%-jZl"[!dpgaaq7]hpN5:0$T-r>IRI-/XB9>9l]#Cm_8A^,`d,@nd"R5N)^r@\G.)akjOCk!(1h?uGE%E@_&G97XTst1)
%4g;k4=u:+3j3_0;4eRVu'iSJ#c+McW->J^4`3uB@Jh@'uP,XE#)t.Hb"-A4Vdu@DTM$X`Y<f)NW&tPLQd'+<9W.H#+H9l&X`F;f9
%QXh/m_I>J9_KS=#8cm49k_1V;W!G6U!FjE+!1@`u!^q%:6Y.5[WiY\CYRI!)!P&2g4';[lH;ZH!'5^IuU`9(aHU3/1-CCt%(85$@
%=m-YkCOj?Y>+JqtKrU(3UjPpHd<>SaR^pA22ke:;?5VTs&qPumW!+#7)f/fa3"h/W7(R>LKZ2[iq=)\X9e)Y.a8s.-B1F)K;;7$@
%/KS&Se3F<UGs3SjPYa8Z=4Modh6ZFip,ue7W,I,>,bo^<!s(`R"Ig8O!lUrg$._lW88EaU:g',E?^+[Z%8r)"]\er%S]O7!U/[o7
%@mLA#UDruEi^&:FS;#_q$H?c[5j-<'NFWOWF"-tn3V?4CJsD%UOX-=>&D(<ojZrcc\D1mmm-)h0es`7L!M*=,)0AFMQ/GG#$42&R
%EGs=4U=eDNKRr>KR:;a_]eC2X)(PqdUF;f^SN86N3meW8jT0t4U="cK[&O]^o/ID273F37$:&7-=Y`"rK`I[n+36gB$eT14!"Y1G
%%Jl92Q%`l7LfquCF5<g>$7:9-hrp<V,G!54$D$V`,Ko2\/0"pDG6=(31_Kj1hQPC1"U)[F\-TDY)\rFHZ]p)=m?KgA\/(1Y<J<2c
%0+%iW)dk.ZkR':G^`NSBA7Gu7)T`\Fd<o%#_Ho)ZU7(Dc6Y3bA'U.8.2%$+]F*7U%!`0j;7)e3V9fa3n6#M6rZ%)sO0q?Jg3$sPA
%i.]"U."2RTKUsEC=_f@L.fdD>XB9Fb+k1BX1rKM^.R+d`9JYCALAo(3UV_-TJD`07!7?$u\PiT\1/4?M1!aeERSsrY4b.2a.jHk$
%UYu-AD$e0H!KoHr/6kS+mUniA-:bF;#oS9W[W(Cs@=-N10j,<S\lj[DV<=%CUEJ>g`OQ.ITK&MRBDu=iGVgKi'/jSFX@#dk+<k=;
%9jf@efK]95Dsp;!D)o&br.4i5'+LS40"[ed%qBilK0;/&q][!)Q&Hu)r:f%u,$%Y>*"@iao9ikON`24.IBHgL/;b<P$(?ed(ohXT
%qQQ*u%XE/eK4l1#:d844fgF/."._d)^&U%8mt+%`IKeB&-N[cB=s.den#+r+NY^6\)sFFP`[F9=gYW,']"Z?:*?U-0.MWPiqEAd;
%>$KRJ/b+&#i/4Y?IfSV]K\(J9[G[a,2Z@+ECGDa*bJTj>YU!#UB\T1H(.Dre^s.[DaY+3P*@q0*X'a9UXW3@D;dut?S%69QJ3!Sj
%o6'UQ7U=\i&6d:Paq[TlXL:il#q[&h;`j35&'@qt+fU\IrE*59WY#h^KLL(=_Ia9SnqYi_jGj$OjQa-sGL!mu8moeGcbL^U6u:Xd
%Hnq:DgsU`4Vo3Ctn_9^28L)Sa**r8CLcV#$m";0b1h]VOUJ[9/%h-h8Jq1:`dE3\Q=2Ia$R<9CC%*<p:Vu$d2Y;Tu5#k:`$peH7m
%9s!"F.DTMN+#\>5?^kq*W$ct+Ep1c\Flihs#,CIN7;qWBQLAC&>h_+4[?lm:e:,B667T6V7?^4G,f'Q_/IV\WO^A%D6ZPR2-*W(Q
%TOL_t)dp@?)c/co).!f=Y/Log85NatAE@2KQC)+RkK1A.MlpWKI0h%Z`C6C_+C11pk(jJ<+aT."[j;Ch&7.U9_-mV;Fq*tL,m1h4
%fATN5-/n#r"aDh*nq-KSdR@D`roI&?Jj=hrJA<KsSUsj7CiIUC@pL,pK)Sd[Y\S"cGZ*9EE0>@c0T[CF^Tk0<g@PPgZ55Q-VK"?)
%n7%"PGQ;&GT,I/5"eSL7l@sh\%elP>`gf+YP$OOQi'!slLb>39hSQs"r3q_f_i*/-"sXqMSURV"Xm<eBl:";=N?H/KJ3+WJWT\R.
%df`i:Ec"5",7oS!Xs75C$DUXJ0$4hmTY*%5'[cJo1LrK,p#r-?Rk&_lNSKh$_AA;+?$lNqEAV'J7Ek%*!57+<7]"UeYL.g(G&!uS
%"'g[%Dq'M<-+>et#)op[#)OX9&$!7;[B`i$)UT*3AI)%g+_@/GG]-Jd]KJ[sN?RH=B*^)LF+k&?6dSA2KaUp!P7=386*-&`ONu6=
%H?oD/]b+6D>VmQ(_%"nlJ:uRB.,JQ<pO,ZII5&q&K)JT6Y(P:3AZVS6bX%.5=5WR,@/q%?bKM,/e/NYKcdnKW?!t&fm:p%%Z[<Y3
%fQ`<82Jo]Bg3\!3VHG)G/cm1,<fM:'qNqtCZ7"K?f:3Uq,<>?XjDhh#AV!HJ4T^nTg*GdT-(%fPX&"L[)cI\-Y_Z28[BY4L`rYd6
%Lh`WC3$(/r=$`?/qX"Xs06nhnS6D=]N%&Kn/Hip<XYH1lNi;6u0_-r6+kF0Yc7q@VP#(m#lG^cfJLc@5!BT,u:,>%LALb8Vmm0/n
%`=`6&4,AjV5bPJ?`([(TO/ghmI0e#+\/#.NLdsg-=US(7D^!\t2:*%rQ6Bt^[(9in)?kF(k$q:JTj"lO$W<]A"160XmN71NiFL&I
%_MY5Bob'3I^)(27I9dh54C6_W1!ZYa?S]ZPA!d&3N<X.J61\ih/_:Qf.kIRT:9#6GpX'>b0aq(?_&_k>FZ[*;fo<52+iON:p6>p8
%r7Fq818VQAh0[rhWYiuHf;prdE5fUYf;EHJ`c:^D.Zu/M.E$&X\DYY-m@B`__(J&Ei1;E]TJ5ir4untld0g5r*NsMc0"::k.7n?>
%V`eP:iqD;g=GVC$RUf#C66"-N@gKG.L;96iS1r.P)etO-&!O0;:?5NM,A`_?j,),Ac&i5mS'JbDfT<.fF]35FIK"s?PMY"P@apLX
%GZZ8c+djB[BROj-G`V`q&"CS.?5kf6>YnAI7*Ydn7i6AD:2NNcV;C''1*'?;[IIN7/0[c\78f84TQ$"G(<[AM#)tNR\<0#N<qnko
%`;2rbl>`$>(kR5+`&,8G`ZSGE<>Z8][du6hi#=uX'XZrt?LGl9q/s!On.+iC(._i[oe:,rQon$WmQa^BG/>@&#t,NGR)_R`He(`L
%0nc*976?9Ugr?p1<8NFRKN3378I75eN+%h5d1P^cP>aCpMU3Or7+J#*PE-`AS@,(F>q9A2#BbYQdp`h'hqb8C2sWX@r%rToLsO&-
%_%."jVr]bTF]5f=h2#U-\q-QKH8c.;c'QbE$`AkT9!>E$0:7g'iaB(6LD+K0E$MTs2#*=u&VYH?3rPV9*VZ'6i((3JHCg=$.I#V:
%e".-sWNFS[Kj-UYj-_:Rl"Ye@*//ujJNi01CO?jl/_f7ob)"=+6a4[L`K8Q>bFHo"5[S40dTU,K64eSi1hNB/%?g.UpI*`o@=%>k
%BWZrWJqX\DLUU<Q:H7>=1#@pQf\)cDq:O'D4=N7_pYk^QAOj,:r+->5o1odOe^T7T4O^u$mVTJE_j?FSL)^jJ",qA8Q%]es-c&c"
%T<!2bD/pt^=nVL9<9$/fm^r5]E)s8rFjG!5bGiVq9RqQ?JTohI`LZQ(G,Mb'%sbP[*f/G*pg&>$^Tu%W>AGF9omQ$e@+Y+#o9/<"
%F"*L;gi])?6lDFOmrU?8Gu5&8LM+/mq7c$Z@7UOLqr*d9WH=Vb;-*lYgrBX_rc5b4dF:M8YH*Fg,!b@GYEkIm'+-:4*2),J6;0(d
%]<$kD:c_q27HkM?>3i`DE!''R:pXK[7^M"2H0BcTaAm>`+g,(V;]d%bf!1h8F=AR8'r8S#hM+LD\`^f*aC:Zmcq7X+'"?XeFQkLK
%:I'2GBl<L[](dm1o[pdh^<&pb!&(\d)F3*-G.#eZ5#X^3nKU;^)blFU+U.o`!0X%d-uBh'/YW$0.a(IGW\Ph]o`5o<6VRk=q=IK4
%+$%H#%!]#XL8rN%:X`Ld**CK!ku5RU$l/2Q:CDNABeDH'7cLuhek<YkeFm7)P[VS)":O!2TaC?_Y[CbJ^u3[N&M]C$nKjqXLU4+?
%a=s\/SD^qgp7Sd9fh'28(u6.HKCo?p7!VC2=XXOOeNbatW9_D&j$fgrZ!ge+geZ;`3M?)^L44K,"sQFg!2.lS;aORWVEa1AQp;pN
%=KH:^+t<%`=SIYtjs69(3]&ljNZeTn=ES)S$V/>^#8WL;)D[)_Fs$!aT`W\CdmQ?1@pF&W$F"o(j(c:OqpFgH4R#._l%@N49#8NE
%SgtDF4tt1@@r@Yr'd&ga"Y5ja2]sL^%=mCFl]=FXZo8ijQuVHA5"!$\,'?Uolt`4U4sn.&#\o1P:4Ie%dSBX7&0!;M<9b7g7NdYb
%VcF!l4SH#U)#Y\jA.Kf=q<<Ma<"c(H))0:HQL#?R^*`92?"1qM_IVDm4;a#(]l[0X.tu5I1SWjbn.[4nYg`&?6B#=?]OSJTK71uc
%CbCN7B7nXRrt4q8Qn)uW'\Q>8\YS[lVkN[ClKkI(U>N+@Lh,9U$>qGMAc(G\^tb+Xe.<NsqG[hQih7iV@F97b/Zg:OA9=/&G:B6f
%;,+TUo.c<t[%]m5o#VFbgaEJS9K`_Li)8-I;t*Y.cO3!"Rk+SSo:Y%cDq*T$Ig_7?]O;k,Z#:\TgN?`T2^a^N$C0KaD<Z3o*BC/;
%/`WKlF<4)g40=LS=kFaVPVT:u6hlP@j:#F$oVUq>p7BN="K'[D[T.>'3dK13'gr7$o>1S:GM;3Jh3Y!s_'5)M3Jc-hM%paI/WqSN
%%L,,_CbS8Xlq5m*?#&-bR.pZdWh@J58;,FI5Z>d(!1lde1bAWaZJL3Kjl($5%&iak9=t7JO.GrfVhl:p'bC_FB/pBoJkj@@_oRC;
%l#fCd'9P\.N6t7pX+4eu5EqBF8gJ>F3j6Z'GX',EDcS\.71,c/d#.sJB&NN9YV,[?7[Gp=[1L"W.n=mOPhV;3:fo)1:P+`!i5Big
%U&%p[\ne"oC^9OAZHej\dW1fV,P6&@J>t$"Tt[>i[coE6<GW!_fFOU0/KJqW\[Q&l@d.E=V:`,K(b'-@B`>]9hs4/nmF!*3C4:*Z
%#D\h]7[X)+RJo\^K/E=HaS2)$'7_MBiI-;R$'8:-6<nejngdt;g_t$M1;6bidF_'p2DRLo4$Xt'q2gpJo3-<?rN+]aH6&-;#JHr!
%A+W_&JHl3:R'rT&\d%0>e>1WLG6e=$`,V/,DXLQp#BN9dd_i1N"ug!jiGp:Y8)ig"@,jZ^hBrlGRgdrJ"-Q&6U),OIo;NRb:;:dN
%Sft(;36U*o^.gP0X-YUm_H+DG"Zmk;.*ucHbi7_sJ$4O:[ld,(3<S?F,pb<m-6*(KD5(+4ITUVd`JAUpo],e+W2_#UJi*X,=\,,e
%StU@dJ+2ZB'Y=oT-S[iT4?+qC%r_TZRE<<f-lSbq]%2PcM0Hkq":%G4n!^].I@iQ=4Ft",6rRRKGRSd[+BCKFSDAlue)[:;$++ga
%"P[.Mmb&.74Ms>7`e)Jnq:P0HNB.b!>o=#@Y8\@($lD>HfQ[@t=t0\m49Ajt"=.bb\5>q$r6XC,LeIh-Kt/>&1k^&^Q_0/KUiIkj
%0"V`;3N4PpPO,<2b<1'l?M?\YATB4)EE5[l#tD);m(2fkE]m-\#5N4EY<_T6a^!0b.EXUc6:XheJcp:@"j(pm&c(ig3<C,I[WiD$
%Ub-Ao1`=K\XsHPYF%(EA&I"CLP)FguQ-dcJ5uN9t78id@A$Yr=mBsnk?bZ6_3H]QO`r7uG/Mu.(.["\@!FEJB9dpM)jkIlK*W$11
%-j/_7PE.<QW>+?)#b??.=63G1SIme.d%s=j\MATAR+1Mj!MG6*"9o]bVOo;_+tg!Y35\d7V46V)n%Q:cq&EW9m0JW9C3r74hHac$
%\rkCJ";i,1r18#2poS\"NtTS4!D+-p.W[f:D,$O:>;Jeu/hUb4p>2<VAFoFBP%L/i5K;W\]Te^NHp]=5Y$e<>aBhb"@f.>>*S_<,
%_u=2ebi8?j<MhS99eAJ`AH,P9Y,5.;gd@_[E'tU4W\`Y>\_sQ$j\2+u\Mm]JOm^Ch.,sl'h:6ClX^8:K6#R/2dR>np=46YTU0j"F
%Q6*m9+Iqu[F3oU,"F0;J+E]"/,ibR-$4$H"9d>(]q#*'W.]ulH6g-5:3*4N,(-hI)AY+-7>PtlsXCqlLL+FAn['LGFcqfJf)cPqu
%[Bq_5N=4P.f>sM'8qO`A-f.5^*hSZqO).2:j49HD-D7qKK9bJkBPp2qhr;q!\+c0oZYo5/hP^_TK7N=A_n8f!C6YC$L:"R=!4^]i
%b'!Hp;?n$ErtIErYf2's9uW(pU>Ad:b@BgL/Q3e]=>l5Kn:1kM0d$UTM-*CeA,nST%-]c7W][)f.B7@hEi@n+Db,-KXK3a-^+&)>
%<d]a9j4:qLf^W&pL.6B*><pi4/`8:`+h'&?[ItsW!DB>QPdQLie'D[;T"pVp<-]7p4U<anb!VM9)NFToM,1-:ZL,\NH7F3c%j4"M
%k6usIDEBsR_kkAiC32gjaX/@#MT?H>#c0_#GZ,]0?l`Fs9emcR?IBDK+(2@oiO=-#B9>ah=0*]nho9&<3c2T$'"H@#0<d8*eCmH]
%Ifs,2G"$p3Tf7*Y+$)ie@Q?3.]gU'5MWiW8_uEJo^Y&$HY_9Q,X9=Z<"%G@fq^.:boiTfDOmIZ>i&F/?m2EBeQp-UtX`MDtaHlBC
%=O4:<N>E*TqDVI'K2AOsT,N_=NBE6*;X&P_51!:pdb)>548[&R'3a+eZ#-t_F.XiKkK3UHnp[1Cs3$W#f?]ZToAk=Do)ALcp#LN3
%jr/Ns&c_LkR/UU`e'*REH)LX(ffr:+c]e>!:AoIDJ)71)n2iLtn3N)F.q&m.BHpG1f`B"j?J33RISW`h!Y7<P$mdmq6\?.rPQPQ=
%F.!:++#8saQbS;]a?IpHdnSW^i)"?6-!F[l4LRpPYrRHoTl=M&<^?<)Z$F&8kI(KK4kRke`!\u0mGP@qa2B54A1HmX=d"g7L<S?j
%L'"fW?9@63L5tbdG'>":geS^6H$]tTL\P97)nbc5:Q)$.c@"/2he-3^#e[B8=nE>0N%IJWJ2%-C_m+:1D@3:#&/FhN'RXt/Si"U#
%DR9(m]A*\^G(WRK+.M<q#Jpm\PAYQI09T_N^5.<6$BX?UWLI)fHQcL<(G@RZC@c6`%QH--hA$1slDL1On=m*upBGCVAIe.A(X=k8
%JZY!4PFZV-#g5]1NP?j"IV,(tq4Ir](prg#\;qd?Xt,.iXJ%OWLT3d(`Jo_K!+_7oW$_=uc$9e=,['Xdg4ii/<dhh$`3-a>=BfkP
%)^Um6Fe?1S;XGZ6Zf1H,'3KO:+LHcR)KcNXqohD>+9WXmLf-u@[nhFQ`NBD`8^>b/9WTtFW'KVa",r++;-rkB[)]eu<`V0V$Q"@S
%qm%;%72unks/Ui%id5&A:?5_5J^<&BSM."99D`FPm7K]aF3^PI>!-D0%b>A/'hJ:4J5NR"8l`X8mXCO*DL.%f%eJLiOg#mJ`B`Ps
%GTp8>9KmA6h^O>k5TY<8M3.%5oEVUp&Bsf8i'hup4u2;f4hFs4OLiQ"hPnKa'OnGeSDC6W7t<,(BM6B2Or0gX'0^6dC<n[Fp[J(!
%MrJc2LHlOMlZlpHi^!_RgD@q>0q9^PX6/2pVmZh0c1gX)9HM7DCm,X/B<dQY'K<1KYJIPX>`k$,o]3VO<$[9+K=!M+W4=+7[aIFq
%dL;WeF9pK.UB+f1n>Z@M&A8>ScgmGu%ho1BAjapN[kA458nU@HA/q@FF\(R7/Voqt2GO9j'Ba>WN9bi)KPQJDKP.>l@L0t52<RbI
%atZ/DIn\L,4mj"4^_!.,i#=uW;55\Poc(dD/2qg3Q]#i[8uf3R4,RJ=E^"VXPeQI@B"iD-oC'Y.9$1^6Fj4-,GZZDPqgQ:Blh5aD
%4qB<,l;rS5Q#k:`/O>Ng-?,b^EIscg.8,gOI/0EH<0<]1q:$iS^FUgro"bH/XXL,Ir8,0.7uaZ53FW<B>o2bA^[aaR0EOWr0'D;p
%3*H3]eI-=t&tLRddoMs1'7pSZP3_]o&!;dE&ud)e+DR2'GdZG:md\.gFAhrpRUcMFdHGHSl:&Xm=\:c#-oDS?Tdri9e1,O$EXCNm
%ihBCEP/Ga=id8>[%UG0T3>%JMNC?_3B"[jXEY1#JT$[aba#\8%_$6%^XZjc%[ipPt+6&MJSF^#>P2NY-%RKq[F*0S>)T0MskUh$'
%eq`/th%V/>!N61oQ=D9kMb^*N7imFSKUao[W.RZJOcT;laOLu/AgaE'#$*kqaV$bpF9o=1+@)qUH6!q`kSCLHAN%&"U2/')a/G)9
%c?h7"o;3"pdDLn%T/&)?P=PB;;E>4R0ND<Nh1]lg!3-0E,P<La<9'1n*YNfJH.h6/C*oo[:[kGUU7"JJ"<+tkZN-_A?P;=NDEZC.
%R668'Hh2Ah_97QUZ!&8rOmAc+L57E43UTnY9EW[g2\7HI1=TXsHajLeiJAQ1]HXZ<5Z4*&a4RFiK`j_rka:u,@pi(FV!dSkG*E!W
%On"Cl+U%^nm'TDQLlK9tC)m8?[\?EWNKaF'WHT^K12%E/priX$9-(Ajnem_nYPDGfMaG8?UQ)LXNlL^Z1`>\A?#n%ef0O@u+^F\#
%iS\7=5Yo@."j(VF-&K46I'=p)e;ulgp=R3L)atJe^DNWq.nY]!^UEY%;7"HVM*HT6%mK7`4^j?Gbks*rZjB*d<6uL)'rWu@TMD^>
%8Q&7XTFc5mJm7iOBag**PZ32.?=7*=-mn6Xg:Z$ioD&"t6+1NK,'[UQDZ;s5XZ+0V?]aE]Zl;J@X=U?m#[muYTZ<<;HGd&lfM(`d
%(;PJ?#:6r8OA*bu5c(s-Z$$bQ>'DACa8nMN/nWnX"lkS8#4BZh/IC)=UE5;s^*1#JBrMEOFRfqiE4=D+%kn-6\O[u/j$fCRljeQe
%HpaQ)\)'1<@N`nt0bSRleDXhe6ckS>bm;7l*SXBaMTMFap?EbR@2(qRRk.*Sht[WM.W['dDM[DM1je)T"U=T-;+m5s>U4!m+eD*r
%#3oUFOP0P=]")3RkEaoW"`$`0KrRJomU/ec\bVp@;bR#@ID.;%PB,e\0c\42Sf+GkbJ5]d\Prd3>3kVskQ7bob0$6E=rb-</AJ`Y
%AO@@Cca/o\2W^um"GE;(PoRkmbohkb<6#'UW?opqD2l5(B'.8o,s(4XVd\cIA-dZ0*lh$dWH@INLC&N6j%:fL+Yrp2$o-WD1?r:9
%>21HVfATsP<]T8m23;enf(Pl'`];e$j7,C%Te''6emuMOMtV$QKXd=#8OUIKc)&O$Bu>G4^k3K!Gc"!3rAVrBI^.6m9VZC\LL;%\
%cs155AY-/EmO;+MN(4M*f^o4IndV+Rf)l-W]=ZU\'6\[T9A?IQcuK]m`fAV&J/aM4^a/,fN00!-pms@VTgNWI6[<tu:pV!#k+J/3
%1?l',;.b'=;(#?iJd!ICdDM;T+B?8a0ZZu7qW^s,jA:;Z1<#E*fJ'H=kDukI^^NGnMf=6k;Mh6#cS;!;!)0@c2nih8[e5Q'V6NQA
%0pH$,QM]^;4eT*[DVG#*Y(5h.l*@OqO>1@6&^e0--In!lG#^i5E2oT#T@eRu.%B7]:*@!l"IAX,(*rV5!%0eb9FO8MSD;Ym8C7L$
%ZkVF1N/HV#bHkaI$m(;TV>tT_'oX*=Q%K7aUnIL2SbEe:MGQJI8ujs3>l6.T5b,>!jM>Z)2u8Im];K[!`=_S!&g/c>oh@'Q/DPr:
%7#L>.6&I)DROb9DgK]E&ka.2NNR;_u1^-]DX+F1KMbu5Qc,F+J(e:Cq]n):@7*3*A>aTTT7E7fRKUJJ@U(uXTOjgn_ZoS"hoZd'V
%Ou>30(SVRaMg\lm'Z]ON9qpVD;LYJ=]>P[RA1pg>*aPBK\(3FOM'(`'94SPdQQ&IO>o)N>W].[.RpIp&L<X:D2[^dg%KTc#p"M#/
%OgW67.<`'M0&`#LYV82.Sj!]E*YW(9A.d5:EQ4^TR=<<I<o$^,<?s?G"unMP6/C=)@<g)49j+frqCE>:3sDWYg$l*>ZsJQ5qM%C-
%^]Z7(T\:ug_]b(lX^&9F-h"d#SqjYdbOkI15$<I&DqL<BPrLpJSbqW\#ZdCB"`)g0\J]3`^nW*#YU/[H+N^*T_!0EgWWTlW`%eKk
%Vdd;j?/-p.4teYHZ]4d6;`;#dg@stmh+XUjBk#<?.hXgUDI7,.NYN\#9j&dJ^YP!mhcN0e93ITTZWWW5jEc9aVQ4QEP@)2cgUF8q
%+DqTAaEaEm?Y9Pf,`#-5-`)#9BbRa]ISe,GRm.'X<-_/t&6VsVjbjGF?<NFmrETdQ+#UZ68"9[;b1,C_=IL@,A#gR%7D>kuIGX`S
%!UWMQQ">3ob5B[':5,K>C9p$7VJ2J`]r4>6p[;fBAYl[\YOtQ;*Zm5j\V@8o]jQ$tIge=Q%E'Rsp*!S`BZ[>Hbh`\IP%RY+&9ao,
%Xij0*1pNk9G7t!n!S[J]cPX>GpM@#"-ZZft4E;ECcu1@XGL!dt(l&[c\@.q8`9(%8dj]^@d^qmr]1WpMD2/<nZ#D"k%f*PCB<=^@
%^_P?ICp(,&5&T1LKBlBZa"$<;DsP"t5I,Aq@hL4\;$Ba>cVSud<6Jm?__6@LP=JjNTV&!1eDmuh4I'Etm,U?6)/VIlK?u#3#m*<E
%8D=^HJkr6T.0:o<8'Es7-KV^a>%1qW)(4VISqKR:,;(TK,c%FC&#T6'Mj!X6?+[9,J%qXTpA=15Ie0K+roW\(^\m2kJ,S[Ds8D&G
%5QCNcI.r[dr:oBGJ,/'\hnK$Zc(BI_onWSFo'HrPrUf]"5Q(6:5G!B$p;^OSr;,0o^O5kNf73\n^C7B6ie?j8qo_2dbPrZ>%`#4~>
%AI9_PrivateDataEnd
