%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig6_pose_graph_essentials.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Remo Pillat
%%CreationDate: 2/11/2023
%%BoundingBox: 0 0 431 318
%%HiResBoundingBox: 0 0 431 318
%%CropBox: 0 0 431 318
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.3 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2023-02-11T22:03:53-05:00</xmp:CreateDate>
         <xmp:ModifyDate>2023-02-11T22:03:53-05:00</xmp:ModifyDate>
         <xmp:MetadataDate>2023-02-11T22:03:53-05:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYqo&#xA;30pisriUGhjjdgRWvwqT2Dn7lPyxV5f+QclvPpd/dwnTIHuVtZruw0zUW1FxcSRs8lxeKxb0p5if&#xA;i+IluNW3GKvVsVdirsVdirsVdirsVYD+c18sflcafHFq095eycoYdE+sJLwhoZHnmtY5pY4E5Avw&#xA;HJtlFa4qwzTNf8yaJ+Wn+JdNvtZu7WyuxJqd7rFqZp7uBTCslysM84mgsYolkHFR6rEc6/aLKss/&#xA;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&#xA;rsVdirsVdir/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>431.000000</stDim:w>
            <stDim:h>318.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">fig6_pose_graph_essentials</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:23DC85C0FAA0ED119A9687CF196BC795</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:23DC85C0FAA0ED119A9687CF196BC795</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:9308eb6f-32ff-4d24-8484-5d649504f92a</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:b717f40f-fc14-4eed-83df-b0c06bd9b5f5</stRef:instanceID>
            <stRef:documentID>uuid:9308eb6f-32ff-4d24-8484-5d649504f92a</stRef:documentID>
            <stRef:originalDocumentID>uuid:9308eb6f-32ff-4d24-8484-5d649504f92a</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:23DC85C0FAA0ED119A9687CF196BC795</stEvt:instanceID>
                  <stEvt:when>2023-02-11T22:03:53-05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -318 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 318 li
431 318 li
431 0 li
cp
clp
89.5352 187.762 mo
77.5942 180.266 li
67.1641 189.75 li
67.687 175.66 li
54.2583 171.367 li
66.7231 164.777 li
63.7231 151 li
75.6641 158.5 li
86.0942 149.015 li
85.5703 163.102 li
99 167.395 li
86.5352 173.984 li
89.5352 187.762 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.529412 .721569 .992157 rgb
f
183.994 56.9321 mo
183.994 55.272 183.666 53.6157 183.029 52.0845 cv
182.396 50.5532 181.455 49.147 180.283 47.9751 cv
179.111 46.8032 177.709 45.8618 176.174 45.229 cv
174.643 44.5923 172.986 44.2642 171.326 44.2642 cv
169.67 44.2642 168.014 44.5923 166.482 45.229 cv
164.947 45.8618 163.545 46.8032 162.373 47.9751 cv
161.197 49.147 160.26 50.5532 159.627 52.0845 cv
158.99 53.6157 158.662 55.272 158.662 56.9321 cv
158.662 58.5884 158.99 60.2446 159.627 61.7798 cv
160.26 63.311 161.197 64.7134 162.373 65.8853 cv
163.545 67.061 164.947 67.9985 166.482 68.6313 cv
168.014 69.2681 169.67 69.5962 171.326 69.5962 cv
172.986 69.5962 174.643 69.2681 176.174 68.6313 cv
177.709 67.9985 179.111 67.061 180.283 65.8853 cv
181.455 64.7134 182.396 63.311 183.029 61.7798 cv
183.666 60.2446 183.994 58.5884 183.994 56.9321 cv
183.994 56.9321 li
cp
f
390.344 56.9321 mo
390.344 55.272 390.016 53.6157 389.379 52.0845 cv
388.746 50.5532 387.805 49.147 386.633 47.9751 cv
385.461 46.8032 384.059 45.8618 382.523 45.229 cv
380.992 44.5923 379.336 44.2642 377.676 44.2642 cv
376.02 44.2642 374.363 44.5923 372.832 45.229 cv
371.297 45.8618 369.895 46.8032 368.723 47.9751 cv
367.547 49.147 366.609 50.5532 365.977 52.0845 cv
365.34 53.6157 365.012 55.272 365.012 56.9321 cv
365.012 58.5884 365.34 60.2446 365.977 61.7798 cv
366.609 63.311 367.547 64.7134 368.723 65.8853 cv
369.895 67.061 371.297 67.9985 372.832 68.6313 cv
374.363 69.2681 376.02 69.5962 377.676 69.5962 cv
379.336 69.5962 380.992 69.2681 382.523 68.6313 cv
384.059 67.9985 385.461 67.061 386.633 65.8853 cv
387.805 64.7134 388.746 63.311 389.379 61.7798 cv
390.016 60.2446 390.344 58.5884 390.344 56.9321 cv
390.344 56.9321 li
cp
f
390.293 264.084 mo
390.293 262.424 389.965 260.768 389.328 259.236 cv
388.695 257.705 387.754 256.299 386.582 255.127 cv
385.41 253.955 384.008 253.014 382.473 252.381 cv
380.941 251.744 379.285 251.416 377.625 251.416 cv
375.969 251.416 374.313 251.744 372.781 252.381 cv
371.246 253.014 369.844 253.955 368.672 255.127 cv
367.496 256.299 366.559 257.705 365.926 259.236 cv
365.289 260.768 364.961 262.424 364.961 264.084 cv
364.961 265.74 365.289 267.396 365.926 268.932 cv
366.559 270.463 367.496 271.865 368.672 273.037 cv
369.844 274.213 371.246 275.15 372.781 275.783 cv
374.313 276.42 375.969 276.748 377.625 276.748 cv
379.285 276.748 380.941 276.42 382.473 275.783 cv
384.008 275.15 385.41 274.213 386.582 273.037 cv
387.754 271.865 388.695 270.463 389.328 268.932 cv
389.965 267.396 390.293 265.74 390.293 264.084 cv
390.293 264.084 li
cp
f
44.582 163.395 mo
32.6411 155.898 li
22.2109 165.383 li
22.7339 151.293 li
9.30518 147 li
21.77 140.41 li
18.77 126.633 li
30.7109 134.133 li
41.1411 124.648 li
40.6172 138.734 li
54.0469 143.027 li
41.582 149.617 li
44.582 163.395 li
cp
.0588235 .4 .972549 rgb
f
2.37109 lw
2 lc
0 lj
10 ml
[4 4 ] 0 dsh
true sadj
127.832 35.3911 mo
82.1519 41.4609 41.1641 85.6211 33.0938 131.961 cv
1 .129412 0 rgb
@
31.8521 142.309 mo
28.7422 131.66 li
36.3159 132.152 li
31.8521 142.309 li
cp
f
.592773 lw
[] 0 dsh
31.8521 142.309 mo
28.7422 131.66 li
36.3159 132.152 li
31.8521 142.309 li
cp
@
146.734 31.7578 mo
146.738 30.0981 146.406 28.4409 145.773 26.9102 cv
145.137 25.3789 144.199 23.9731 143.027 22.8008 cv
141.855 21.6289 140.449 20.6909 138.918 20.0547 cv
137.387 19.4219 135.73 19.0898 134.07 19.0938 cv
132.414 19.0898 130.754 19.4219 129.223 20.0547 cv
127.691 20.6909 126.285 21.6289 125.113 22.8008 cv
123.941 23.9731 123.004 25.3789 122.367 26.9102 cv
121.734 28.4409 121.402 30.0981 121.406 31.7578 cv
121.402 33.418 121.734 35.0742 122.367 36.605 cv
123.004 38.1367 123.941 39.543 125.113 40.7148 cv
126.285 41.8867 127.691 42.8242 129.223 43.4609 cv
130.754 44.0938 132.414 44.4258 134.07 44.4219 cv
135.73 44.4258 137.387 44.0938 138.918 43.4609 cv
140.449 42.8242 141.855 41.8867 143.027 40.7148 cv
144.199 39.543 145.137 38.1367 145.773 36.605 cv
146.406 35.0742 146.738 33.418 146.734 31.7578 cv
146.734 31.7578 li
cp
.0588235 .4 .972549 rgb
f
gsave
81.6289 0 mo
416.629 0 li
416.629 153.938 li
81.6289 153.938 li
81.6289 0 li
cp
clp
4.80957 lw
348.262 85.313 mo
320.039 33.2378 222.98 8.05469 149.773 26.8911 cv
0 0 0 rgb
@
grestore
134.07 31.7578 mo
147.441 20.4771 li
151.566 31.7109 li
134.07 31.7578 li
cp
0 0 0 rgb
f
1.20239 lw
134.07 31.7578 mo
147.441 20.4771 li
151.566 31.7109 li
134.07 31.7578 li
cp
@
1 lw
171.328 56.9302 mo
378.484 56.9302 li
378.484 264.082 li
171.328 264.082 li
171.328 56.9302 li
cp
.431373 .431373 .431373 rgb
@
360.926 85.313 mo
360.926 83.6558 360.598 81.9961 359.961 80.4648 cv
359.328 78.9341 358.391 77.5269 357.215 76.3589 cv
356.043 75.1841 354.641 74.2461 353.105 73.6128 cv
351.574 72.9771 349.918 72.6479 348.262 72.6479 cv
346.602 72.6479 344.945 72.9771 343.414 73.6128 cv
341.883 74.2461 340.477 75.1841 339.305 76.3589 cv
338.133 77.5269 337.191 78.9341 336.559 80.4648 cv
335.922 81.9961 335.594 83.6558 335.594 85.313 cv
335.594 86.9731 335.922 88.6289 336.559 90.1602 cv
337.191 91.6909 338.133 93.0981 339.305 94.27 cv
340.477 95.4409 341.883 96.3789 343.414 97.0161 cv
344.945 97.6479 346.602 97.98 348.262 97.9771 cv
349.918 97.98 351.574 97.6479 353.105 97.0161 cv
354.641 96.3789 356.043 95.4409 357.215 94.27 cv
358.391 93.0981 359.328 91.6909 359.961 90.1602 cv
360.598 88.6289 360.926 86.9731 360.926 85.313 cv
360.926 85.313 li
cp
.0588235 .4 .972549 rgb
f
2.37109 lw
[4 4 ] 0 dsh
168.473 264.926 mo
75.3091 270.109 49.957 208.535 35.3828 159.656 cv
0 0 0 rgb
@
32.4771 149.652 mo
38.9878 158.637 li
31.6909 160.723 li
32.4771 149.652 li
cp
f
.592773 lw
[] 0 dsh
32.4771 149.652 mo
38.9878 158.637 li
31.6909 160.723 li
32.4771 149.652 li
cp
@
6.79688 134.508 mo
9.54688 127.93 li
12.3281 134.508 li
6.79688 134.508 li
cp
18.5161 140.195 mo
17.438 140.117 17.2031 139.883 16.3589 138.117 cv
10.4219 124.539 li
9.93799 124.539 li
4.96875 136.273 li
3.43799 139.758 3.14111 140.148 2 140.195 cv
2 140.648 li
6.73389 140.648 li
6.73389 140.195 li
5.57813 140.195 5.10889 139.883 5.10889 139.211 cv
5.10889 138.93 5.17188 138.586 5.29688 138.289 cv
6.39111 135.492 li
12.6563 135.492 li
13.6411 137.773 li
13.9219 138.43 14.0938 139.039 14.0938 139.383 cv
14.0938 139.977 13.688 140.164 12.4219 140.195 cv
12.4219 140.648 li
18.5161 140.648 li
18.5161 140.195 li
cp
f
4.80957 lw
350.32 243.184 mo
390.375 218.715 405.223 149.457 363.117 99.8052 cv
@
351.621 88.043 mo
367.875 94.5117 li
359.914 103.449 li
351.621 88.043 li
cp
f
1.20239 lw
351.621 88.043 mo
367.875 94.5117 li
359.914 103.449 li
351.621 88.043 li
cp
@
362.988 243.184 mo
362.988 241.523 362.66 239.867 362.023 238.336 cv
361.391 236.805 360.449 235.398 359.277 234.227 cv
358.105 233.055 356.703 232.113 355.168 231.48 cv
353.637 230.844 351.98 230.516 350.32 230.516 cv
348.664 230.516 347.008 230.844 345.477 231.48 cv
343.941 232.113 342.539 233.055 341.367 234.227 cv
340.191 235.398 339.254 236.805 338.621 238.336 cv
337.984 239.867 337.656 241.523 337.656 243.184 cv
337.656 244.84 337.984 246.496 338.621 248.031 cv
339.254 249.563 340.191 250.965 341.367 252.137 cv
342.539 253.313 343.941 254.25 345.477 254.883 cv
347.008 255.52 348.664 255.848 350.32 255.848 cv
351.98 255.848 353.637 255.52 355.168 254.883 cv
356.703 254.25 358.105 253.313 359.277 252.137 cv
360.449 250.965 361.391 249.563 362.023 248.031 cv
362.66 246.496 362.988 244.84 362.988 243.184 cv
362.988 243.184 li
cp
.0588235 .4 .972549 rgb
f
gsave
0 318 mo
431 318 li
431 0 li
0 0 li
0 318 li
cp
clp
4.80957 lw
171.328 264.082 mo
210.684 286.227 268.539 309.105 334.355 256.465 cv
0 0 0 rgb
@
grestore
346.777 245.695 mo
338.852 261.289 li
330.68 252.547 li
346.777 245.695 li
cp
0 0 0 rgb
f
346.777 245.695 mo
338.852 261.289 li
330.68 252.547 li
346.777 245.695 li
cp
@
183.992 264.082 mo
183.996 262.426 183.664 260.77 183.031 259.238 cv
182.395 257.703 181.457 256.301 180.285 255.129 cv
179.113 253.953 177.707 253.016 176.176 252.383 cv
174.645 251.746 172.984 251.418 171.328 251.418 cv
169.668 251.418 168.012 251.746 166.48 252.383 cv
164.949 253.016 163.543 253.953 162.371 255.129 cv
161.199 256.301 160.262 257.703 159.625 259.238 cv
158.992 260.77 158.66 262.426 158.664 264.082 cv
158.66 265.742 158.992 267.398 159.625 268.93 cv
160.262 270.461 161.199 271.867 162.371 273.039 cv
163.543 274.211 164.949 275.152 166.48 275.785 cv
168.012 276.422 169.668 276.75 171.328 276.75 cv
172.984 276.75 174.645 276.422 176.176 275.785 cv
177.707 275.152 179.113 274.211 180.285 273.039 cv
181.457 271.867 182.395 270.461 183.031 268.93 cv
183.664 267.398 183.996 265.742 183.992 264.082 cv
183.992 264.082 li
cp
.0588235 .4 .972549 rgb
f
114.637 3.98389 mo
111.637 0 li
110.168 0 li
107.199 3.98389 li
108.012 3.98389 li
110.902 1.53125 li
113.824 3.98389 li
114.637 3.98389 li
cp
0 0 0 rgb
f
110.105 5.27686 mo
109.887 5.26172 109.699 5.22998 109.574 5.22998 cv
108.496 5.22998 107.402 6.08984 107.215 7.07422 cv
107.012 7.94922 107.418 8.47998 108.496 8.82422 cv
107.809 9.38672 107.355 10.105 107.215 10.9019 cv
107.012 11.8091 107.262 12.5742 107.996 13.4341 cv
107.043 14.0591 106.559 14.418 106.059 14.8867 cv
105.012 15.8867 104.199 17.355 103.918 18.73 cv
103.527 20.6211 104.168 22.3711 105.465 23.0898 cv
106.152 23.4648 107.043 23.6211 108.496 23.6211 cv
108.934 23.6211 109.449 23.5898 110.605 23.543 cv
111.543 23.4961 112.152 24.1841 111.965 25.1211 cv
111.777 26.0269 111.012 26.6992 110.121 26.6992 cv
110.012 26.6992 109.559 26.6519 109.105 26.5591 cv
108.543 26.48 108.355 26.4648 108.137 26.4648 cv
107.543 26.4648 107.043 26.8711 106.918 27.4648 cv
106.762 28.2769 107.465 28.855 108.637 28.855 cv
109.762 28.855 110.73 28.3711 111.699 27.3398 cv
112.559 26.4341 113.168 25.3398 113.371 24.23 cv
113.59 23.168 113.355 22.3242 112.715 21.7461 cv
112.246 21.3242 111.746 21.1992 110.668 21.1992 cv
108.59 21.1992 li
107.574 21.1992 106.762 21.105 106.371 20.918 cv
105.434 20.4648 104.965 19.3398 105.23 18.0898 cv
105.559 16.4019 106.871 14.9648 109.105 13.8091 cv
109.715 14.0591 110.199 14.1211 110.934 14.1211 cv
112.824 14.1211 114.074 13.6211 114.23 12.793 cv
114.355 12.23 113.777 11.918 112.73 11.918 cv
111.793 11.918 110.887 12.1841 109.074 12.9341 cv
108.184 12.1841 107.949 11.7148 108.09 10.9492 cv
108.262 10.1992 108.855 9.47998 109.855 8.82422 cv
111.09 8.76172 111.918 8.62109 112.637 8.29297 cv
113.527 7.88672 114.168 7.29297 114.293 6.72998 cv
114.355 6.27686 114.043 6.02686 113.371 6.02686 cv
112.496 6.02686 111.371 6.57422 109.605 7.93408 cv
108.84 7.90186 108.434 7.44922 108.543 6.83984 cv
108.637 6.30908 109.121 5.94922 110.012 5.71484 cv
110.105 5.27686 li
cp
f
119.27 23.0781 mo
115.02 23.0781 li
119.27 17 li
119.27 23.0781 li
cp
122.441 23.0781 mo
120.645 23.0781 li
120.645 15.2031 li
119.863 15.2031 li
114.316 23.0781 li
114.316 24.2031 li
119.285 24.2031 li
119.285 27.1563 li
120.645 27.1563 li
120.645 24.2031 li
122.441 24.2031 li
122.441 23.0781 li
cp
f
334.52 84.2271 mo
331.52 80.2422 li
330.051 80.2422 li
327.082 84.2271 li
327.895 84.2271 li
330.785 81.7729 li
333.707 84.2271 li
334.52 84.2271 li
cp
f
329.988 85.5229 mo
329.77 85.5078 329.582 85.4771 329.457 85.4771 cv
328.379 85.4771 327.285 86.3359 327.098 87.3198 cv
326.895 88.1948 327.301 88.7271 328.379 89.0698 cv
327.691 89.6328 327.238 90.3521 327.098 91.1479 cv
326.895 92.0552 327.145 92.8198 327.879 93.6802 cv
326.926 94.3052 326.441 94.6641 325.941 95.1328 cv
324.895 96.1328 324.082 97.6021 323.801 98.9771 cv
323.41 100.867 324.051 102.617 325.348 103.336 cv
326.035 103.711 326.926 103.867 328.379 103.867 cv
328.816 103.867 329.332 103.836 330.488 103.789 cv
331.426 103.742 332.035 104.43 331.848 105.367 cv
331.66 106.273 330.895 106.945 330.004 106.945 cv
329.895 106.945 329.441 106.898 328.988 106.805 cv
328.426 106.727 328.238 106.711 328.02 106.711 cv
327.426 106.711 326.926 107.117 326.801 107.711 cv
326.645 108.523 327.348 109.102 328.52 109.102 cv
329.645 109.102 330.613 108.617 331.582 107.586 cv
332.441 106.68 333.051 105.586 333.254 104.477 cv
333.473 103.414 333.238 102.57 332.598 101.992 cv
332.129 101.57 331.629 101.445 330.551 101.445 cv
328.473 101.445 li
327.457 101.445 326.645 101.352 326.254 101.164 cv
325.316 100.711 324.848 99.5859 325.113 98.3359 cv
325.441 96.6479 326.754 95.2109 328.988 94.0552 cv
329.598 94.3052 330.082 94.3672 330.816 94.3672 cv
332.707 94.3672 333.957 93.8672 334.113 93.0391 cv
334.238 92.4771 333.66 92.1641 332.613 92.1641 cv
331.676 92.1641 330.77 92.4302 328.957 93.1802 cv
328.066 92.4302 327.832 91.9609 327.973 91.1948 cv
328.145 90.4448 328.738 89.7271 329.738 89.0698 cv
330.973 89.0078 331.801 88.8672 332.52 88.5391 cv
333.41 88.1328 334.051 87.5391 334.176 86.9771 cv
334.238 86.5229 333.926 86.2729 333.254 86.2729 cv
332.379 86.2729 331.254 86.8198 329.488 88.1802 cv
328.723 88.1479 328.316 87.6948 328.426 87.0859 cv
328.52 86.5552 329.004 86.1948 329.895 85.9609 cv
329.988 85.5229 li
cp
f
336.68 101.555 mo
337.727 101.555 338.133 101.602 338.555 101.758 cv
339.648 102.148 340.352 103.148 340.352 104.367 cv
340.352 105.867 339.336 107.008 338.023 107.008 cv
337.555 107.008 337.195 106.883 336.539 106.461 cv
336.008 106.148 335.711 106.023 335.414 106.023 cv
335.008 106.023 334.742 106.273 334.742 106.633 cv
334.742 107.258 335.492 107.648 336.742 107.648 cv
338.102 107.648 339.492 107.18 340.32 106.461 cv
341.164 105.742 341.617 104.711 341.617 103.523 cv
341.617 102.617 341.336 101.789 340.82 101.242 cv
340.461 100.852 340.133 100.648 339.352 100.305 cv
340.57 99.4771 341.023 98.8198 341.023 97.8672 cv
341.023 96.4302 339.883 95.4448 338.258 95.4448 cv
337.367 95.4448 336.602 95.7422 335.961 96.3052 cv
335.43 96.7891 335.164 97.2422 334.773 98.3052 cv
335.039 98.3828 li
335.758 97.0859 336.555 96.5078 337.68 96.5078 cv
338.82 96.5078 339.617 97.2729 339.617 98.3979 cv
339.617 99.0391 339.352 99.6641 338.914 100.117 cv
338.383 100.648 337.883 100.914 336.68 101.336 cv
336.68 101.555 li
cp
f
336.25 209.16 mo
333.25 205.176 li
331.781 205.176 li
328.813 209.16 li
329.625 209.16 li
332.516 206.707 li
335.438 209.16 li
336.25 209.16 li
cp
f
331.719 210.453 mo
331.5 210.438 331.313 210.406 331.188 210.406 cv
330.109 210.406 329.016 211.266 328.828 212.25 cv
328.625 213.125 329.031 213.656 330.109 214 cv
329.422 214.563 328.969 215.281 328.828 216.078 cv
328.625 216.984 328.875 217.75 329.609 218.609 cv
328.656 219.234 328.172 219.594 327.672 220.063 cv
326.625 221.063 325.813 222.531 325.531 223.906 cv
325.141 225.797 325.781 227.547 327.078 228.266 cv
327.766 228.641 328.656 228.797 330.109 228.797 cv
330.547 228.797 331.063 228.766 332.219 228.719 cv
333.156 228.672 333.766 229.359 333.578 230.297 cv
333.391 231.203 332.625 231.875 331.734 231.875 cv
331.625 231.875 331.172 231.828 330.719 231.734 cv
330.156 231.656 329.969 231.641 329.75 231.641 cv
329.156 231.641 328.656 232.047 328.531 232.641 cv
328.375 233.453 329.078 234.031 330.25 234.031 cv
331.375 234.031 332.344 233.547 333.313 232.516 cv
334.172 231.609 334.781 230.516 334.984 229.406 cv
335.203 228.344 334.969 227.5 334.328 226.922 cv
333.859 226.5 333.359 226.375 332.281 226.375 cv
330.203 226.375 li
329.188 226.375 328.375 226.281 327.984 226.094 cv
327.047 225.641 326.578 224.516 326.844 223.266 cv
327.172 221.578 328.484 220.141 330.719 218.984 cv
331.328 219.234 331.813 219.297 332.547 219.297 cv
334.438 219.297 335.688 218.797 335.844 217.969 cv
335.969 217.406 335.391 217.094 334.344 217.094 cv
333.406 217.094 332.5 217.359 330.688 218.109 cv
329.797 217.359 329.563 216.891 329.703 216.125 cv
329.875 215.375 330.469 214.656 331.469 214 cv
332.703 213.938 333.531 213.797 334.25 213.469 cv
335.141 213.063 335.781 212.469 335.906 211.906 cv
335.969 211.453 335.656 211.203 334.984 211.203 cv
334.109 211.203 332.984 211.75 331.219 213.109 cv
330.453 213.078 330.047 212.625 330.156 212.016 cv
330.25 211.484 330.734 211.125 331.625 210.891 cv
331.719 210.453 li
cp
f
344.117 229.91 mo
343.883 229.816 li
343.227 230.832 342.992 230.988 342.195 230.988 cv
337.977 230.988 li
340.945 227.879 li
342.523 226.223 343.211 224.879 343.211 223.504 cv
343.211 221.738 341.773 220.379 339.945 220.379 cv
338.961 220.379 338.039 220.77 337.398 221.473 cv
336.82 222.066 336.555 222.645 336.258 223.895 cv
336.633 223.988 li
337.336 222.254 337.977 221.691 339.195 221.691 cv
340.68 221.691 341.695 222.691 341.695 224.176 cv
341.695 225.551 340.883 227.207 339.383 228.77 cv
336.242 232.113 li
336.242 232.332 li
343.133 232.332 li
344.117 229.91 li
cp
f
191.895 232.195 mo
188.895 228.211 li
187.426 228.211 li
184.457 232.195 li
185.27 232.195 li
188.16 229.742 li
191.082 232.195 li
191.895 232.195 li
cp
f
187.363 233.488 mo
187.145 233.473 186.957 233.441 186.832 233.441 cv
185.754 233.441 184.66 234.301 184.473 235.285 cv
184.27 236.16 184.676 236.691 185.754 237.035 cv
185.066 237.598 184.613 238.316 184.473 239.113 cv
184.27 240.02 184.52 240.785 185.254 241.645 cv
184.301 242.27 183.816 242.629 183.316 243.098 cv
182.27 244.098 181.457 245.566 181.176 246.941 cv
180.785 248.832 181.426 250.582 182.723 251.301 cv
183.41 251.676 184.301 251.832 185.754 251.832 cv
186.191 251.832 186.707 251.801 187.863 251.754 cv
188.801 251.707 189.41 252.395 189.223 253.332 cv
189.035 254.238 188.27 254.91 187.379 254.91 cv
187.27 254.91 186.816 254.863 186.363 254.77 cv
185.801 254.691 185.613 254.676 185.395 254.676 cv
184.801 254.676 184.301 255.082 184.176 255.676 cv
184.02 256.488 184.723 257.066 185.895 257.066 cv
187.02 257.066 187.988 256.582 188.957 255.551 cv
189.816 254.645 190.426 253.551 190.629 252.441 cv
190.848 251.379 190.613 250.535 189.973 249.957 cv
189.504 249.535 189.004 249.41 187.926 249.41 cv
185.848 249.41 li
184.832 249.41 184.02 249.316 183.629 249.129 cv
182.691 248.676 182.223 247.551 182.488 246.301 cv
182.816 244.613 184.129 243.176 186.363 242.02 cv
186.973 242.27 187.457 242.332 188.191 242.332 cv
190.082 242.332 191.332 241.832 191.488 241.004 cv
191.613 240.441 191.035 240.129 189.988 240.129 cv
189.051 240.129 188.145 240.395 186.332 241.145 cv
185.441 240.395 185.207 239.926 185.348 239.16 cv
185.52 238.41 186.113 237.691 187.113 237.035 cv
188.348 236.973 189.176 236.832 189.895 236.504 cv
190.785 236.098 191.426 235.504 191.551 234.941 cv
191.613 234.488 191.301 234.238 190.629 234.238 cv
189.754 234.238 188.629 234.785 186.863 236.145 cv
186.098 236.113 185.691 235.66 185.801 235.051 cv
185.895 234.52 186.379 234.16 187.27 233.926 cv
187.363 233.488 li
cp
f
196.496 243.414 mo
193.324 245.023 li
193.324 245.273 li
193.527 245.18 193.73 245.102 193.793 245.07 cv
194.121 244.945 194.418 244.883 194.59 244.883 cv
194.965 244.883 195.121 245.148 195.121 245.711 cv
195.121 253.727 li
195.121 254.305 194.98 254.711 194.699 254.867 cv
194.434 255.023 194.184 255.086 193.449 255.102 cv
193.449 255.367 li
198.324 255.367 li
198.324 255.102 li
196.934 255.086 196.637 254.914 196.637 254.055 cv
196.637 243.445 li
196.496 243.414 li
cp
f
1 lw
30.188 284.777 mo
57.2271 284.891 li
@
.75 lw
50.938 282.129 mo
58.4448 284.895 li
50.9141 287.598 li
@
1 lw
30.0981 284.895 mo
30.0981 257.301 li
@
.75 lw
27.3589 264.066 mo
30.0981 256.547 li
32.832 264.066 li
@
19.9302 288.836 mo
19.9302 288.445 20.2271 287.805 21.4302 287.742 cv
21.4922 287.727 21.5391 287.695 21.5391 287.633 cv
21.5391 287.523 21.4448 287.523 21.3198 287.523 cv
20.2109 287.523 19.1948 288.023 19.1802 288.758 cv
19.1802 291.023 li
19.1802 291.414 19.1802 291.727 18.7422 292.055 cv
18.3521 292.336 17.9302 292.367 17.6802 292.367 cv
17.6172 292.383 17.5698 292.414 17.5698 292.477 cv
17.5698 292.586 17.6479 292.586 17.7578 292.586 cv
18.4922 292.633 19.0229 292.992 19.1479 293.477 cv
19.1802 293.586 19.1802 293.602 19.1802 293.961 cv
19.1802 295.93 li
19.1802 296.336 19.1802 296.664 19.7109 297.039 cv
20.1479 297.336 20.8828 297.445 21.3198 297.445 cv
21.4448 297.445 21.5391 297.445 21.5391 297.336 cv
21.5391 297.227 21.4771 297.227 21.3521 297.227 cv
20.6479 297.18 20.1021 296.867 19.9609 296.367 cv
19.9302 296.273 19.9302 296.258 19.9302 295.898 cv
19.9302 293.805 li
19.9302 293.352 19.8359 293.18 19.4922 292.867 cv
19.2578 292.664 18.9302 292.555 18.6172 292.477 cv
19.5229 292.258 19.9302 291.789 19.9302 291.227 cv
19.9302 288.836 li
cp
f
25.1328 294.961 mo
24.6948 294.961 24.0391 294.711 23.8359 293.758 cv
23.7109 293.164 23.7109 292.258 23.7109 291.664 cv
23.7109 291.039 23.7109 290.383 23.8052 289.836 cv
24.0078 288.664 24.8521 288.57 25.1328 288.57 cv
25.4922 288.57 26.2271 288.742 26.4448 289.727 cv
26.5552 290.289 26.5552 291.039 26.5552 291.664 cv
26.5552 292.414 26.5552 293.086 26.4302 293.727 cv
26.2729 294.664 25.6328 294.961 25.1328 294.961 cv
25.1328 294.961 li
cp
27.4771 291.789 mo
27.4771 290.992 27.4302 290.195 27.0391 289.461 cv
26.5229 288.508 25.6021 288.352 25.1479 288.352 cv
24.4771 288.352 23.6641 288.617 23.1948 289.539 cv
22.8359 290.211 22.7891 290.992 22.7891 291.789 cv
22.7891 292.523 22.8359 293.43 23.2891 294.18 cv
23.7729 294.977 24.5859 295.18 25.1328 295.18 cv
25.7271 295.18 26.5859 294.977 27.0698 294.023 cv
27.4302 293.336 27.4771 292.57 27.4771 291.789 cv
27.4771 291.789 li
cp
f
30.3359 296.117 mo
30.3359 296.523 30.0552 297.148 28.8359 297.227 cv
28.7729 297.227 28.7271 297.273 28.7271 297.336 cv
28.7271 297.445 28.8521 297.445 28.9609 297.445 cv
30.0391 297.445 31.0698 296.961 31.0859 296.195 cv
31.0859 293.945 li
31.0859 293.555 31.0859 293.242 31.5391 292.914 cv
31.9302 292.617 32.3521 292.602 32.5859 292.586 cv
32.6479 292.586 32.6948 292.539 32.6948 292.477 cv
32.6948 292.383 32.6328 292.383 32.5078 292.367 cv
31.7729 292.336 31.2422 291.977 31.1172 291.492 cv
31.0859 291.383 31.0859 291.352 31.0859 291.008 cv
31.0859 289.039 li
31.0859 288.617 31.0859 288.305 30.5552 287.93 cv
30.1021 287.617 29.3359 287.523 28.9609 287.523 cv
28.8521 287.523 28.7271 287.523 28.7271 287.633 cv
28.7271 287.727 28.8052 287.727 28.9141 287.742 cv
29.6172 287.773 30.1641 288.102 30.3052 288.602 cv
30.3359 288.695 30.3359 288.711 30.3359 289.07 cv
30.3359 291.148 li
30.3359 291.602 30.4302 291.773 30.7891 292.086 cv
31.0229 292.305 31.3359 292.398 31.6479 292.477 cv
30.7422 292.711 30.3359 293.164 30.3359 293.742 cv
30.3359 296.117 li
cp
f
392.188 59.0308 mo
392.031 59.0161 391.906 59 391.828 59 cv
391.109 59 390.375 59.563 390.25 60.2188 cv
390.125 60.813 390.391 61.1558 391.109 61.3911 cv
390.656 61.7661 390.344 62.25 390.25 62.7661 cv
390.125 63.375 390.281 63.8911 390.781 64.4688 cv
390.141 64.875 389.828 65.1089 389.484 65.438 cv
388.781 66.1089 388.25 67.0781 388.047 68 cv
387.797 69.2661 388.234 70.4219 389.094 70.9058 cv
389.547 71.1558 390.141 71.25 391.109 71.25 cv
391.406 71.25 391.75 71.2339 392.516 71.2031 cv
393.141 71.1719 393.547 71.6411 393.422 72.25 cv
393.297 72.8589 392.781 73.313 392.203 73.313 cv
392.109 73.313 391.813 73.2808 391.516 73.2188 cv
391.141 73.1558 391.016 73.1411 390.875 73.1411 cv
390.469 73.1411 390.141 73.4219 390.063 73.813 cv
389.953 74.3589 390.422 74.7339 391.203 74.7339 cv
391.953 74.7339 392.594 74.4219 393.25 73.7339 cv
393.828 73.125 394.219 72.4058 394.359 71.6719 cv
394.5 70.9531 394.344 70.3911 393.922 70 cv
393.609 69.7188 393.281 69.6411 392.563 69.6411 cv
391.172 69.6411 li
390.484 69.6411 389.953 69.5781 389.688 69.4531 cv
389.078 69.1411 388.75 68.3911 388.922 67.563 cv
389.156 66.438 390.031 65.4839 391.516 64.7188 cv
391.922 64.875 392.25 64.9219 392.734 64.9219 cv
394 64.9219 394.828 64.5938 394.938 64.0308 cv
395.016 63.6719 394.641 63.4531 393.938 63.4531 cv
393.313 63.4531 392.703 63.625 391.5 64.125 cv
390.906 63.625 390.75 63.313 390.844 62.7969 cv
390.953 62.313 391.344 61.8281 392.016 61.3911 cv
392.828 61.3589 393.391 61.2661 393.875 61.0308 cv
394.453 60.7661 394.891 60.3589 394.969 60 cv
395.016 59.7031 394.813 59.5161 394.359 59.5161 cv
393.781 59.5161 393.031 59.8911 391.844 60.7969 cv
391.328 60.7808 391.063 60.4839 391.141 60.063 cv
391.203 59.7188 391.531 59.4688 392.109 59.313 cv
392.188 59.0308 li
cp
f
396.656 69.7231 mo
397.344 69.7231 397.609 69.7378 397.906 69.8481 cv
398.625 70.1128 399.094 70.7852 399.094 71.5981 cv
399.094 72.582 398.422 73.3481 397.547 73.3481 cv
397.234 73.3481 396.984 73.27 396.547 72.9878 cv
396.203 72.77 396 72.6909 395.797 72.6909 cv
395.531 72.6909 395.344 72.8628 395.344 73.1128 cv
395.344 73.52 395.859 73.7852 396.688 73.7852 cv
397.594 73.7852 398.531 73.4731 399.078 72.9878 cv
399.641 72.5039 399.938 71.8159 399.938 71.0352 cv
399.938 70.4258 399.75 69.8789 399.406 69.5039 cv
399.172 69.2539 398.953 69.1128 398.438 68.8789 cv
399.25 68.332 399.531 67.895 399.531 67.2539 cv
399.531 66.3008 398.781 65.645 397.703 65.645 cv
397.109 65.645 396.594 65.832 396.172 66.2231 cv
395.813 66.5352 395.641 66.8481 395.375 67.5508 cv
395.547 67.5981 li
396.031 66.7378 396.563 66.3481 397.313 66.3481 cv
398.078 66.3481 398.609 66.8628 398.609 67.6128 cv
398.609 68.0352 398.438 68.457 398.141 68.7539 cv
397.781 69.1128 397.453 69.2852 396.656 69.5659 cv
396.656 69.7231 li
cp
f
389.652 273.918 mo
389.496 273.902 389.371 273.887 389.293 273.887 cv
388.574 273.887 387.84 274.449 387.715 275.105 cv
387.59 275.699 387.855 276.043 388.574 276.277 cv
388.121 276.652 387.809 277.137 387.715 277.652 cv
387.59 278.262 387.746 278.777 388.246 279.355 cv
387.605 279.762 387.293 279.996 386.949 280.324 cv
386.246 280.996 385.715 281.965 385.512 282.887 cv
385.262 284.152 385.699 285.309 386.559 285.793 cv
387.012 286.043 387.605 286.137 388.574 286.137 cv
388.871 286.137 389.215 286.121 389.98 286.09 cv
390.605 286.059 391.012 286.527 390.887 287.137 cv
390.762 287.746 390.246 288.199 389.668 288.199 cv
389.574 288.199 389.277 288.168 388.98 288.105 cv
388.605 288.043 388.48 288.027 388.34 288.027 cv
387.934 288.027 387.605 288.309 387.527 288.699 cv
387.418 289.246 387.887 289.621 388.668 289.621 cv
389.418 289.621 390.059 289.309 390.715 288.621 cv
391.293 288.012 391.684 287.293 391.824 286.559 cv
391.965 285.84 391.809 285.277 391.387 284.887 cv
391.074 284.605 390.746 284.527 390.027 284.527 cv
388.637 284.527 li
387.949 284.527 387.418 284.465 387.152 284.34 cv
386.543 284.027 386.215 283.277 386.387 282.449 cv
386.621 281.324 387.496 280.371 388.98 279.605 cv
389.387 279.762 389.715 279.809 390.199 279.809 cv
391.465 279.809 392.293 279.48 392.402 278.918 cv
392.48 278.559 392.105 278.34 391.402 278.34 cv
390.777 278.34 390.168 278.512 388.965 279.012 cv
388.371 278.512 388.215 278.199 388.309 277.684 cv
388.418 277.199 388.809 276.715 389.48 276.277 cv
390.293 276.246 390.855 276.152 391.34 275.918 cv
391.918 275.652 392.355 275.246 392.434 274.887 cv
392.48 274.59 392.277 274.402 391.824 274.402 cv
391.246 274.402 390.496 274.777 389.309 275.684 cv
388.793 275.668 388.527 275.371 388.605 274.949 cv
388.668 274.605 388.996 274.355 389.574 274.199 cv
389.652 273.918 li
cp
f
397.918 286.887 mo
397.762 286.824 li
397.324 287.496 397.168 287.605 396.637 287.605 cv
393.824 287.605 li
395.793 285.527 li
396.855 284.434 397.309 283.527 397.309 282.605 cv
397.309 281.434 396.355 280.527 395.121 280.527 cv
394.48 280.527 393.871 280.777 393.434 281.246 cv
393.059 281.652 392.871 282.027 392.668 282.871 cv
392.918 282.934 li
393.387 281.777 393.824 281.387 394.637 281.387 cv
395.621 281.387 396.293 282.074 396.293 283.059 cv
396.293 283.98 395.746 285.074 394.762 286.121 cv
392.668 288.355 li
392.668 288.496 li
397.262 288.496 li
397.918 286.887 li
cp
f
165.512 278.191 mo
165.355 278.176 165.23 278.16 165.152 278.16 cv
164.434 278.16 163.699 278.723 163.574 279.379 cv
163.449 279.973 163.715 280.316 164.434 280.551 cv
163.98 280.926 163.668 281.41 163.574 281.926 cv
163.449 282.535 163.605 283.051 164.105 283.629 cv
163.465 284.035 163.152 284.27 162.809 284.598 cv
162.105 285.27 161.574 286.238 161.371 287.16 cv
161.121 288.426 161.559 289.582 162.418 290.066 cv
162.871 290.316 163.465 290.41 164.434 290.41 cv
164.73 290.41 165.074 290.395 165.84 290.363 cv
166.465 290.332 166.871 290.801 166.746 291.41 cv
166.621 292.02 166.105 292.473 165.527 292.473 cv
165.434 292.473 165.137 292.441 164.84 292.379 cv
164.465 292.316 164.34 292.301 164.199 292.301 cv
163.793 292.301 163.465 292.582 163.387 292.973 cv
163.277 293.52 163.746 293.895 164.527 293.895 cv
165.277 293.895 165.918 293.582 166.574 292.895 cv
167.152 292.285 167.543 291.566 167.684 290.832 cv
167.824 290.113 167.668 289.551 167.246 289.16 cv
166.934 288.879 166.605 288.801 165.887 288.801 cv
164.496 288.801 li
163.809 288.801 163.277 288.738 163.012 288.613 cv
162.402 288.301 162.074 287.551 162.246 286.723 cv
162.48 285.598 163.355 284.645 164.84 283.879 cv
165.246 284.035 165.574 284.082 166.059 284.082 cv
167.324 284.082 168.152 283.754 168.262 283.191 cv
168.34 282.832 167.965 282.613 167.262 282.613 cv
166.637 282.613 166.027 282.785 164.824 283.285 cv
164.23 282.785 164.074 282.473 164.168 281.957 cv
164.277 281.473 164.668 280.988 165.34 280.551 cv
166.152 280.52 166.715 280.426 167.199 280.191 cv
167.777 279.926 168.215 279.52 168.293 279.16 cv
168.34 278.863 168.137 278.676 167.684 278.676 cv
167.105 278.676 166.355 279.051 165.168 279.957 cv
164.652 279.941 164.387 279.645 164.465 279.223 cv
164.527 278.879 164.855 278.629 165.434 278.473 cv
165.512 278.191 li
cp
f
171.605 284.801 mo
169.48 285.863 li
169.48 286.035 li
169.621 285.973 169.746 285.926 169.793 285.91 cv
170.012 285.816 170.215 285.77 170.324 285.77 cv
170.574 285.77 170.684 285.957 170.684 286.332 cv
170.684 291.676 li
170.684 292.066 170.59 292.332 170.402 292.441 cv
170.215 292.551 170.059 292.582 169.559 292.598 cv
169.559 292.77 li
172.809 292.77 li
172.809 292.598 li
171.887 292.582 171.699 292.457 171.699 291.895 cv
171.699 284.816 li
171.605 284.801 li
cp
f
184.086 34.9839 mo
183.93 34.9688 183.805 34.9531 183.727 34.9531 cv
183.008 34.9531 182.273 35.5161 182.148 36.1719 cv
182.023 36.7661 182.289 37.1089 183.008 37.3438 cv
182.555 37.7188 182.242 38.2031 182.148 38.7188 cv
182.023 39.3281 182.18 39.8438 182.68 40.4219 cv
182.039 40.8281 181.727 41.063 181.383 41.3911 cv
180.68 42.063 180.148 43.0308 179.945 43.9531 cv
179.695 45.2188 180.133 46.375 180.992 46.8589 cv
181.445 47.1089 182.039 47.2031 183.008 47.2031 cv
183.305 47.2031 183.648 47.188 184.414 47.1558 cv
185.039 47.125 185.445 47.5938 185.32 48.2031 cv
185.195 48.813 184.68 49.2661 184.102 49.2661 cv
184.008 49.2661 183.711 49.2339 183.414 49.1719 cv
183.039 49.1089 182.914 49.0938 182.773 49.0938 cv
182.367 49.0938 182.039 49.375 181.961 49.7661 cv
181.852 50.313 182.32 50.688 183.102 50.688 cv
183.852 50.688 184.492 50.375 185.148 49.688 cv
185.727 49.0781 186.117 48.3589 186.258 47.625 cv
186.398 46.9058 186.242 46.3438 185.82 45.9531 cv
185.508 45.6719 185.18 45.5938 184.461 45.5938 cv
183.07 45.5938 li
182.383 45.5938 181.852 45.5308 181.586 45.4058 cv
180.977 45.0938 180.648 44.3438 180.82 43.5161 cv
181.055 42.3911 181.93 41.438 183.414 40.6719 cv
183.82 40.8281 184.148 40.875 184.633 40.875 cv
185.898 40.875 186.727 40.5469 186.836 39.9839 cv
186.914 39.625 186.539 39.4058 185.836 39.4058 cv
185.211 39.4058 184.602 39.5781 183.398 40.0781 cv
182.805 39.5781 182.648 39.2661 182.742 38.75 cv
182.852 38.2661 183.242 37.7808 183.914 37.3438 cv
184.727 37.313 185.289 37.2188 185.773 36.9839 cv
186.352 36.7188 186.789 36.313 186.867 35.9531 cv
186.914 35.6558 186.711 35.4688 186.258 35.4688 cv
185.68 35.4688 184.93 35.8438 183.742 36.75 cv
183.227 36.7339 182.961 36.438 183.039 36.0161 cv
183.102 35.6719 183.43 35.4219 184.008 35.2661 cv
184.086 34.9839 li
cp
f
190.176 46.8481 mo
187.348 46.8481 li
190.176 42.8008 li
190.176 46.8481 li
cp
192.301 46.8481 mo
191.098 46.8481 li
191.098 41.5981 li
190.582 41.5981 li
186.879 46.8481 li
186.879 47.5981 li
190.191 47.5981 li
190.191 49.5659 li
191.098 49.5659 li
191.098 47.5981 li
192.301 47.5981 li
192.301 46.8481 li
cp
f
20.5659 64.8008 mo
20.895 64.7852 21.207 64.8008 21.5352 64.7852 cv
22.5039 64.7378 23.6758 64.6602 24.6289 64.645 cv
23.957 65.2852 23.582 65.6602 21.1602 67.4878 cv
16.332 71.1602 15.8008 72.7231 15.8008 72.8159 cv
15.8008 73.145 16.145 73.145 16.3481 73.145 cv
16.7378 73.145 16.7539 73.1289 16.9258 72.8789 cv
17.7852 71.6909 18.6758 71.52 19.0508 71.52 cv
19.707 71.52 20.2539 71.9258 20.6128 72.1909 cv
21.3481 72.7231 21.9409 73.145 22.8628 73.145 cv
25.5352 73.145 27.2852 70.2378 27.2852 69.3159 cv
27.2852 68.9878 26.8789 68.9878 26.707 68.9878 cv
26.5352 68.9878 26.27 68.9878 26.207 69.207 cv
25.9878 69.6602 25.7539 70.2539 24.145 70.4409 cv
24.0039 70.4731 19.3481 70.6602 18.8159 70.6909 cv
19.4878 70.0352 19.8628 69.6602 22.3008 67.8159 cv
27.1289 64.1289 27.6602 62.582 27.6602 62.4878 cv
27.6602 62.145 27.332 62.145 27.1128 62.145 cv
26.7539 62.145 26.707 62.145 26.5659 62.395 cv
25.9878 63.2231 25.5352 63.77 24.957 63.77 cv
24.332 63.77 23.8159 63.395 23.27 63.02 cv
22.6909 62.582 22.0981 62.145 21.207 62.145 cv
19.0981 62.145 17.7378 64.2852 17.7378 65.02 cv
17.7378 65.3481 18.1289 65.3481 18.3159 65.3481 cv
18.5352 65.3481 18.8008 65.3481 18.8628 65.0508 cv
19.207 64.8789 19.3628 64.8481 20.082 64.8008 cv
20.5659 64.8008 li
cp
f
33.25 72.543 mo
29 72.543 li
33.25 66.4648 li
33.25 72.543 li
cp
36.4219 72.543 mo
34.625 72.543 li
34.625 64.668 li
33.8438 64.668 li
28.2969 72.543 li
28.2969 73.668 li
33.2661 73.668 li
33.2661 76.6211 li
34.625 76.6211 li
34.625 73.668 li
36.4219 73.668 li
36.4219 72.543 li
cp
f
40.5161 76.605 mo
40.5161 75.4341 40.063 74.7461 39.375 74.7461 cv
38.7969 74.7461 38.438 75.1841 38.438 75.6841 cv
38.438 76.168 38.7969 76.6211 39.375 76.6211 cv
39.5938 76.6211 39.8281 76.543 40 76.3867 cv
40.0469 76.355 40.063 76.3398 40.0938 76.3398 cv
40.1089 76.3398 40.125 76.355 40.125 76.605 cv
40.125 77.918 39.5 78.98 38.9219 79.5591 cv
38.7188 79.7461 38.7188 79.793 38.7188 79.8398 cv
38.7188 79.9648 38.813 80.0269 38.9058 80.0269 cv
39.0938 80.0269 40.5161 78.668 40.5161 76.605 cv
40.5161 76.605 li
cp
f
44.918 71.98 mo
47.5742 67.3867 li
48.355 71.98 li
44.918 71.98 li
cp
51.793 76.3398 mo
50.793 76.2461 50.6841 76.105 50.4492 74.8242 cv
48.793 64.8091 li
48.3398 64.8091 li
43.1992 73.6519 li
41.8091 75.9961 41.6372 76.1992 40.918 76.3398 cv
40.918 76.6211 li
44.23 76.6211 li
44.23 76.3398 li
43.3242 76.2461 43.1841 76.168 43.1841 75.7148 cv
43.1841 75.3867 43.2461 75.23 43.543 74.6211 cv
44.543 72.6211 li
48.4341 72.6211 li
48.793 74.9341 li
48.8091 75.105 48.8242 75.2617 48.8242 75.4019 cv
48.8242 76.0742 48.5742 76.23 47.4492 76.3398 cv
47.4492 76.6211 li
51.793 76.6211 li
51.793 76.3398 li
cp
f
227.32 4.05078 mo
227.648 4.03516 227.961 4.05078 228.289 4.03516 cv
229.258 3.98779 230.43 3.91016 231.383 3.89502 cv
230.711 4.53516 230.336 4.91016 227.914 6.73779 cv
223.086 10.4102 222.555 11.9731 222.555 12.0659 cv
222.555 12.395 222.898 12.395 223.102 12.395 cv
223.492 12.395 223.508 12.3789 223.68 12.1289 cv
224.539 10.9409 225.43 10.77 225.805 10.77 cv
226.461 10.77 227.008 11.1758 227.367 11.4409 cv
228.102 11.9731 228.695 12.395 229.617 12.395 cv
232.289 12.395 234.039 9.48779 234.039 8.56592 cv
234.039 8.23779 233.633 8.23779 233.461 8.23779 cv
233.289 8.23779 233.023 8.23779 232.961 8.45703 cv
232.742 8.91016 232.508 9.50391 230.898 9.69092 cv
230.758 9.72314 226.102 9.91016 225.57 9.94092 cv
226.242 9.28516 226.617 8.91016 229.055 7.06592 cv
233.883 3.37891 234.414 1.83203 234.414 1.73779 cv
234.414 1.39502 234.086 1.39502 233.867 1.39502 cv
233.508 1.39502 233.461 1.39502 233.32 1.64502 cv
232.742 2.47314 232.289 3.02002 231.711 3.02002 cv
231.086 3.02002 230.57 2.64502 230.023 2.27002 cv
229.445 1.83203 228.852 1.39502 227.961 1.39502 cv
225.852 1.39502 224.492 3.53516 224.492 4.27002 cv
224.492 4.59814 224.883 4.59814 225.07 4.59814 cv
225.289 4.59814 225.555 4.59814 225.617 4.30078 cv
225.961 4.12891 226.117 4.09814 226.836 4.05078 cv
227.32 4.05078 li
cp
f
237.531 9.97705 mo
238.578 9.97705 238.984 10.0229 239.406 10.1797 cv
240.5 10.5698 241.203 11.5698 241.203 12.7891 cv
241.203 14.2891 240.188 15.4297 238.875 15.4297 cv
238.406 15.4297 238.047 15.3052 237.391 14.8828 cv
236.859 14.5698 236.563 14.4448 236.266 14.4448 cv
235.859 14.4448 235.594 14.6948 235.594 15.0547 cv
235.594 15.6802 236.344 16.0698 237.594 16.0698 cv
238.953 16.0698 240.344 15.6021 241.172 14.8828 cv
242.016 14.1641 242.469 13.1328 242.469 11.9448 cv
242.469 11.0391 242.188 10.2109 241.672 9.66406 cv
241.313 9.27295 240.984 9.06982 240.203 8.72705 cv
241.422 7.89795 241.875 7.24219 241.875 6.28906 cv
241.875 4.85205 240.734 3.86719 239.109 3.86719 cv
238.219 3.86719 237.453 4.16406 236.813 4.72705 cv
236.281 5.21094 236.016 5.66406 235.625 6.72705 cv
235.891 6.80469 li
236.609 5.50781 237.406 4.92969 238.531 4.92969 cv
239.672 4.92969 240.469 5.69482 240.469 6.81982 cv
240.469 7.46094 240.203 8.08594 239.766 8.53906 cv
239.234 9.06982 238.734 9.33594 237.531 9.75781 cv
237.531 9.97705 li
cp
f
247.27 15.8047 mo
247.27 14.6328 246.816 13.9448 246.129 13.9448 cv
245.551 13.9448 245.191 14.3828 245.191 14.8828 cv
245.191 15.3672 245.551 15.8198 246.129 15.8198 cv
246.348 15.8198 246.582 15.7422 246.754 15.5859 cv
246.801 15.5547 246.816 15.5391 246.848 15.5391 cv
246.863 15.5391 246.879 15.5547 246.879 15.8047 cv
246.879 17.1172 246.254 18.1797 245.676 18.7578 cv
245.473 18.9448 245.473 18.9922 245.473 19.0391 cv
245.473 19.1641 245.566 19.2271 245.66 19.2271 cv
245.848 19.2271 247.27 17.8672 247.27 15.8047 cv
247.27 15.8047 li
cp
f
253.746 11.7422 mo
249.496 11.7422 li
253.746 5.66406 li
253.746 11.7422 li
cp
256.918 11.7422 mo
255.121 11.7422 li
255.121 3.86719 li
254.34 3.86719 li
248.793 11.7422 li
248.793 12.8672 li
253.762 12.8672 li
253.762 15.8198 li
255.121 15.8198 li
255.121 12.8672 li
256.918 12.8672 li
256.918 11.7422 li
cp
f
402.063 153.258 mo
402.391 153.242 402.703 153.258 403.031 153.242 cv
404 153.195 405.172 153.117 406.125 153.102 cv
405.453 153.742 405.078 154.117 402.656 155.945 cv
397.828 159.617 397.297 161.18 397.297 161.273 cv
397.297 161.602 397.641 161.602 397.844 161.602 cv
398.234 161.602 398.25 161.586 398.422 161.336 cv
399.281 160.148 400.172 159.977 400.547 159.977 cv
401.203 159.977 401.75 160.383 402.109 160.648 cv
402.844 161.18 403.438 161.602 404.359 161.602 cv
407.031 161.602 408.781 158.695 408.781 157.773 cv
408.781 157.445 408.375 157.445 408.203 157.445 cv
408.031 157.445 407.766 157.445 407.703 157.664 cv
407.484 158.117 407.25 158.711 405.641 158.898 cv
405.5 158.93 400.844 159.117 400.313 159.148 cv
400.984 158.492 401.359 158.117 403.797 156.273 cv
408.625 152.586 409.156 151.039 409.156 150.945 cv
409.156 150.602 408.828 150.602 408.609 150.602 cv
408.25 150.602 408.203 150.602 408.063 150.852 cv
407.484 151.68 407.031 152.227 406.453 152.227 cv
405.828 152.227 405.313 151.852 404.766 151.477 cv
404.188 151.039 403.594 150.602 402.703 150.602 cv
400.594 150.602 399.234 152.742 399.234 153.477 cv
399.234 153.805 399.625 153.805 399.813 153.805 cv
400.031 153.805 400.297 153.805 400.359 153.508 cv
400.703 153.336 400.859 153.305 401.578 153.258 cv
402.063 153.258 li
cp
f
417.977 162.602 mo
417.742 162.508 li
417.086 163.523 416.852 163.68 416.055 163.68 cv
411.836 163.68 li
414.805 160.57 li
416.383 158.914 417.07 157.57 417.07 156.195 cv
417.07 154.43 415.633 153.07 413.805 153.07 cv
412.82 153.07 411.898 153.461 411.258 154.164 cv
410.68 154.758 410.414 155.336 410.117 156.586 cv
410.492 156.68 li
411.195 154.945 411.836 154.383 413.055 154.383 cv
414.539 154.383 415.555 155.383 415.555 156.867 cv
415.555 158.242 414.742 159.898 413.242 161.461 cv
410.102 164.805 li
410.102 165.023 li
416.992 165.023 li
417.977 162.602 li
cp
f
422.008 165.008 mo
422.008 163.836 421.555 163.148 420.867 163.148 cv
420.289 163.148 419.93 163.586 419.93 164.086 cv
419.93 164.57 420.289 165.023 420.867 165.023 cv
421.086 165.023 421.32 164.945 421.492 164.789 cv
421.539 164.758 421.555 164.742 421.586 164.742 cv
421.602 164.742 421.617 164.758 421.617 165.008 cv
421.617 166.32 420.992 167.383 420.414 167.961 cv
420.211 168.148 420.211 168.195 420.211 168.242 cv
420.211 168.367 420.305 168.43 420.398 168.43 cv
420.586 168.43 422.008 167.07 422.008 165.008 cv
422.008 165.008 li
cp
f
gsave
423.629 152.938 mo
431 152.938 li
431 165.938 li
423.629 165.938 li
423.629 152.938 li
cp
clp
423 152 mo
431 152 li
431 166 li
423 166 li
423 152 li
cp
clp
426.02 159.18 mo
427.066 159.18 427.473 159.227 427.895 159.383 cv
428.988 159.773 429.691 160.773 429.691 161.992 cv
429.691 163.492 428.676 164.633 427.363 164.633 cv
426.895 164.633 426.535 164.508 425.879 164.086 cv
425.348 163.773 425.051 163.648 424.754 163.648 cv
424.348 163.648 424.082 163.898 424.082 164.258 cv
424.082 164.883 424.832 165.273 426.082 165.273 cv
427.441 165.273 428.832 164.805 429.66 164.086 cv
430.504 163.367 430.957 162.336 430.957 161.148 cv
430.957 160.242 430.676 159.414 430.16 158.867 cv
429.801 158.477 429.473 158.273 428.691 157.93 cv
429.91 157.102 430.363 156.445 430.363 155.492 cv
430.363 154.055 429.223 153.07 427.598 153.07 cv
426.707 153.07 425.941 153.367 425.301 153.93 cv
424.77 154.414 424.504 154.867 424.113 155.93 cv
424.379 156.008 li
425.098 154.711 425.895 154.133 427.02 154.133 cv
428.16 154.133 428.957 154.898 428.957 156.023 cv
428.957 156.664 428.691 157.289 428.254 157.742 cv
427.723 158.273 427.223 158.539 426.02 158.961 cv
426.02 159.18 li
cp
f
grestore
245.656 302.414 mo
245.984 302.398 246.297 302.414 246.625 302.398 cv
247.594 302.352 248.766 302.273 249.719 302.258 cv
249.047 302.898 248.672 303.273 246.25 305.102 cv
241.422 308.773 240.891 310.336 240.891 310.43 cv
240.891 310.758 241.234 310.758 241.438 310.758 cv
241.828 310.758 241.844 310.742 242.016 310.492 cv
242.875 309.305 243.766 309.133 244.141 309.133 cv
244.797 309.133 245.344 309.539 245.703 309.805 cv
246.438 310.336 247.031 310.758 247.953 310.758 cv
250.625 310.758 252.375 307.852 252.375 306.93 cv
252.375 306.602 251.969 306.602 251.797 306.602 cv
251.625 306.602 251.359 306.602 251.297 306.82 cv
251.078 307.273 250.844 307.867 249.234 308.055 cv
249.094 308.086 244.438 308.273 243.906 308.305 cv
244.578 307.648 244.953 307.273 247.391 305.43 cv
252.219 301.742 252.75 300.195 252.75 300.102 cv
252.75 299.758 252.422 299.758 252.203 299.758 cv
251.844 299.758 251.797 299.758 251.656 300.008 cv
251.078 300.836 250.625 301.383 250.047 301.383 cv
249.422 301.383 248.906 301.008 248.359 300.633 cv
247.781 300.195 247.188 299.758 246.297 299.758 cv
244.188 299.758 242.828 301.898 242.828 302.633 cv
242.828 302.961 243.219 302.961 243.406 302.961 cv
243.625 302.961 243.891 302.961 243.953 302.664 cv
244.297 302.492 244.453 302.461 245.172 302.414 cv
245.656 302.414 li
cp
f
258.305 302.23 mo
255.133 303.84 li
255.133 304.09 li
255.336 303.996 255.539 303.918 255.602 303.887 cv
255.93 303.762 256.227 303.699 256.398 303.699 cv
256.773 303.699 256.93 303.965 256.93 304.527 cv
256.93 312.543 li
256.93 313.121 256.789 313.527 256.508 313.684 cv
256.242 313.84 255.992 313.902 255.258 313.918 cv
255.258 314.184 li
260.133 314.184 li
260.133 313.918 li
258.742 313.902 258.445 313.73 258.445 312.871 cv
258.445 302.262 li
258.305 302.23 li
cp
f
265.605 314.168 mo
265.605 312.996 265.152 312.309 264.465 312.309 cv
263.887 312.309 263.527 312.746 263.527 313.246 cv
263.527 313.73 263.887 314.184 264.465 314.184 cv
264.684 314.184 264.918 314.105 265.09 313.949 cv
265.137 313.918 265.152 313.902 265.184 313.902 cv
265.199 313.902 265.215 313.918 265.215 314.168 cv
265.215 315.48 264.59 316.543 264.012 317.121 cv
263.809 317.309 263.809 317.355 263.809 317.402 cv
263.809 317.527 263.902 317.59 263.996 317.59 cv
264.184 317.59 265.605 316.23 265.605 314.168 cv
265.605 314.168 li
cp
f
275.316 311.762 mo
275.082 311.668 li
274.426 312.684 274.191 312.84 273.395 312.84 cv
269.176 312.84 li
272.145 309.73 li
273.723 308.074 274.41 306.73 274.41 305.355 cv
274.41 303.59 272.973 302.23 271.145 302.23 cv
270.16 302.23 269.238 302.621 268.598 303.324 cv
268.02 303.918 267.754 304.496 267.457 305.746 cv
267.832 305.84 li
268.535 304.105 269.176 303.543 270.395 303.543 cv
271.879 303.543 272.895 304.543 272.895 306.027 cv
272.895 307.402 272.082 309.059 270.582 310.621 cv
267.441 313.965 li
267.441 314.184 li
274.332 314.184 li
275.316 311.762 li
cp
f
81.543 221.578 mo
81.8711 221.563 82.1841 221.578 82.5122 221.563 cv
83.48 221.516 84.6519 221.438 85.605 221.422 cv
84.9341 222.063 84.5591 222.438 82.1372 224.266 cv
77.3091 227.938 76.7769 229.5 76.7769 229.594 cv
76.7769 229.922 77.1211 229.922 77.3242 229.922 cv
77.7148 229.922 77.73 229.906 77.9019 229.656 cv
78.7622 228.469 79.6519 228.297 80.0269 228.297 cv
80.6841 228.297 81.23 228.703 81.5898 228.969 cv
82.3242 229.5 82.918 229.922 83.8398 229.922 cv
86.5122 229.922 88.2622 227.016 88.2622 226.094 cv
88.2622 225.766 87.855 225.766 87.6841 225.766 cv
87.5122 225.766 87.2461 225.766 87.1841 225.984 cv
86.9648 226.438 86.73 227.031 85.1211 227.219 cv
84.98 227.25 80.3242 227.438 79.793 227.469 cv
80.4648 226.813 80.8398 226.438 83.2769 224.594 cv
88.105 220.906 88.6372 219.359 88.6372 219.266 cv
88.6372 218.922 88.3091 218.922 88.0898 218.922 cv
87.73 218.922 87.6841 218.922 87.543 219.172 cv
86.9648 220 86.5122 220.547 85.9341 220.547 cv
85.3091 220.547 84.793 220.172 84.2461 219.797 cv
83.668 219.359 83.0742 218.922 82.1841 218.922 cv
80.0742 218.922 78.7148 221.063 78.7148 221.797 cv
78.7148 222.125 79.105 222.125 79.293 222.125 cv
79.5122 222.125 79.7769 222.125 79.8398 221.828 cv
80.1841 221.656 80.3398 221.625 81.0591 221.578 cv
81.543 221.578 li
cp
f
94.1909 221.445 mo
91.02 223.055 li
91.02 223.305 li
91.2231 223.211 91.4258 223.133 91.4878 223.102 cv
91.8159 222.977 92.1128 222.914 92.2852 222.914 cv
92.6602 222.914 92.8159 223.18 92.8159 223.742 cv
92.8159 231.758 li
92.8159 232.336 92.6758 232.742 92.395 232.898 cv
92.1289 233.055 91.8789 233.117 91.145 233.133 cv
91.145 233.398 li
96.02 233.398 li
96.02 233.133 li
94.6289 233.117 94.332 232.945 94.332 232.086 cv
94.332 221.477 li
94.1909 221.445 li
cp
f
101.492 233.383 mo
101.492 232.211 101.039 231.523 100.352 231.523 cv
99.7729 231.523 99.4141 231.961 99.4141 232.461 cv
99.4141 232.945 99.7729 233.398 100.352 233.398 cv
100.57 233.398 100.805 233.32 100.977 233.164 cv
101.023 233.133 101.039 233.117 101.07 233.117 cv
101.086 233.117 101.102 233.133 101.102 233.383 cv
101.102 234.695 100.477 235.758 99.8979 236.336 cv
99.6948 236.523 99.6948 236.57 99.6948 236.617 cv
99.6948 236.742 99.7891 236.805 99.8828 236.805 cv
100.07 236.805 101.492 235.445 101.492 233.383 cv
101.492 233.383 li
cp
f
105.895 228.758 mo
108.551 224.164 li
109.332 228.758 li
105.895 228.758 li
cp
112.77 233.117 mo
111.77 233.023 111.66 232.883 111.426 231.602 cv
109.77 221.586 li
109.316 221.586 li
104.176 230.43 li
102.785 232.773 102.613 232.977 101.895 233.117 cv
101.895 233.398 li
105.207 233.398 li
105.207 233.117 li
104.301 233.023 104.16 232.945 104.16 232.492 cv
104.16 232.164 104.223 232.008 104.52 231.398 cv
105.52 229.398 li
109.41 229.398 li
109.77 231.711 li
109.785 231.883 109.801 232.039 109.801 232.18 cv
109.801 232.852 109.551 233.008 108.426 233.117 cv
108.426 233.398 li
112.77 233.398 li
112.77 233.117 li
cp
f
93.5938 184.52 mo
96.3438 177.941 li
99.125 184.52 li
93.5938 184.52 li
cp
105.313 190.207 mo
104.234 190.129 104 189.895 103.156 188.129 cv
97.2188 174.551 li
96.7339 174.551 li
91.7661 186.285 li
90.2339 189.77 89.938 190.16 88.7969 190.207 cv
88.7969 190.66 li
93.5308 190.66 li
93.5308 190.207 li
92.375 190.207 91.9058 189.895 91.9058 189.223 cv
91.9058 188.941 91.9688 188.598 92.0938 188.301 cv
93.188 185.504 li
99.4531 185.504 li
100.438 187.785 li
100.719 188.441 100.891 189.051 100.891 189.395 cv
100.891 189.988 100.484 190.176 99.2188 190.207 cv
99.2188 190.66 li
105.313 190.66 li
105.313 190.207 li
cp
f
110.168 172.379 mo
110.262 172.176 110.34 172.02 110.34 171.832 cv
110.34 171.316 109.871 170.895 109.324 170.895 cv
108.824 170.895 108.512 171.238 108.387 171.691 cv
106.277 179.426 li
106.277 179.457 106.215 179.66 106.215 179.676 cv
106.215 179.863 106.668 179.988 106.809 179.988 cv
106.918 179.988 106.934 179.941 107.043 179.707 cv
110.168 172.379 li
cp
f
2.37109 lw
[4 4 ] 0 dsh
171.367 56.9302 mo
125.687 63 84.6992 107.16 76.6289 153.5 cv
1 .611765 .572549 rgb
@
75.9517 162.059 mo
72.8418 151.41 li
80.4155 151.902 li
75.9517 162.059 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.3
%%For: (Remo Pillat) ()
%%Title: (fig6_pose_graph_essentials.eps)
%%CreationDate: 2/11/2023 10:04 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!Q;=*HF1ZKQ_.[JV*P2E>lCP;,)MfO0lY!DI0YM/H^5cZqLbrCZ@NDE8Blgpq(b[D0Q6l7/c4Wh_-/mOkh+XN0r*1pd!RbRc'/
%5(D2roT=l90R330h-F`$VfitqEgtHb7BQ;AH8D:=]Bj.?Tm&4Yp@#iOn3!(i2ZlF6=tVa`))BCOBE>h=Q\57RHq>&2oP1ThO?O2+
%Ss$g:jtL/&?Oj+[7E5h1.#FPmqZpqP#J^A]n2GY7m[%#5;1mTk62pp_#j/9rbi!mM:XT2Y+*D<ZhsK[EI_Js7ff@.GB"Ju.Mk/)E
%i;4k/g+EVW$B<n<"?f&'58o.R$GX-K?q@5a3umgQ"@3qs,2`b=7)0@kKKV^[)F?YTi"c-G5Wn>X3V?It:ne/(MIpReVY?)GIt8c,
%!<@iLQ[Mju/1J0<T'nt[IHXgu+k#so9J+'s!f4^6J7sT77gf:%/Xccf9'sGWDjCW!R@#/7@f[6?)>m4Fq'9)geLe1HDVD%qOeBb`
%pBM/d0]<=l6@]sYP(^^_7frs&#bggC8Aa:3I1a0qV!p$q#/Z$)3F#uPNAWDr<I-j"Y@CgM_u1cB*t-O<p),'u5A3<R#kn9HpOBX/
%J-u0:[H7Yp==sE/0b3/fDEt<!of0Qd_("'R5;Rh$eps6URjn58p]J23+:_V!)!F9cAHP,`Y9Dhn5@0_$Oa_.m!&'9&k--G@-_$Si
%D!CJ%8/^.2BYU7W,``Dbi=G_$DQk:]2Dj[7#f$Fio5-UBq:;\L&<)gM%*VrF/c$.YG67fFkPH5V!NT)u^c]lFs.ksM/I%Sl10BSH
%DZb<d#C()G=:]'IHGRM%bl7fa#(U4cFQ&W?Y^gMtJ4SlKe4,$VV#g9^(TP<##36W/*q+@;bb('D1Cs//D#CsbDO0nMM?er%iIC1[
%h4C@meMYfMqQQG,R[_Q"+9^/DI3hQB]k>(Tf-'#kb96j=s1Q4SKB7,;V$Gc.HmAr(junbriEKSm1dY0._^KuQ,<Pnahh6bpUAT6G
%KV-,e<c-=\CTno*J9Vs["+!^VX@5+^PPH+F?UNj-hc%C>D,skS!>uf^_%o4h/IPZR!H,+P'EkQ=ghoj:E6^C>jrH8hp4"_ETW,S"
%lcidPoTp^*7e6Z!pu&C3J(Y:fQbeP7\3QP'*1/JqhhWsciBMot-4QLHHr:4LGeu`JfKhd+LSLQ!+8m=04s/:Q";qQNT68TO"-WQI
%Dtqp/q"4`\r<:Ce_mA=^M_L*.^e4YCi>@3M0]G9Fo7t-iH4#.p@0'86K@6VlD6O-mS774M)sZn$e/1Rfkkl6mSCC04NPPQM6>q+=
%VbL%m!#85PnW9.cBCZ0s0J=;l!C?Z+mPt7oIB%sOm5/IAjp$1J&U/XVpAjanr,Y&Rj;H<oZO]+CPo!hQ._Lc\D#[Wif:[[6XB9d4
%4R=Mi5$b+,R\g>iUL:6X"`$&c!N1XKenck/_-7,>ia9TQp4#H_JR7(^lWsP:!PODD`Rt5.el-SC56o@6h\a)[.5Y:^Q-HaIHa=Cc
%q>WUWL3)F%P'SM[8.)Hg(ISoWjMICurY:&kDq7Nd(CbJs)(helY!I)&YK7KF'7s12KYG!g%u*_Lf?2Gr]Dp2)s)aqGqbt73J8P<,
%9Ff*'3pcR0e\=BIrM(n^gC9gh"a)4)2#96*Iq%5a%fP/Yo=o&imj<P_$i'W!"%g42c:@n]`-B'.-rQrI99g+h2';:"\u)!7q6(@b
%IPRWXZ5GNlc?'@.^?NCACbY.X27C8B%I<J4abZ[Ek(*H+:[7jN"pC5lB!Y>RcZ$2q7R`$"m$V,]?,Jc'k[.ga+Ml^_*9[ugG2W??
%"pE:gs,)9,W;U*4/?::C-@0ZEb[WOnU5S3=f'!^\<&71))FIhIA&&DZGAs009iH[$g8^7`p!P]8NeToU#iYM6n8"NhHB/8@6^riT
%L?Gf%k.C#$nFuO)?>tNie,/*95`ZB$$#cs/,;:6XOI5ddlb-K5c9?h!WOun5kj-a(\Z%BPRBG$t]/f48HL2BA="kK@ruEO'''1.c
%CGsuA,0(4!)am(#+jsqb2"4?q[***\%+`l0gmY9\[P5SbOsR_)`)0u*(lnj)9[?alh*TiMh0-,k[Mpd\SA5GPU2di:HT4*>I5KY/
%Bn<V=AOH<uh\bX2h4B3;L/Os`<#kcQ(@04YYrV.[;^PtVeond^^g1os&8l9WD+SI-W*qd?;RBjk?QGF\H7E(aYfVE*V@hUaQAC"B
%?r%<a]BoU"cI(OB?h6"&a,_J/$htp'cjW+b]7]O[;ju]7J7`;[&#+`/6%;_A.>ddbZRt#=c,N'laH/XGkF6KsRN8L0*:+RF\Ob+I
%enAegd=5&K-M<uog+jNSkKE[mj8?-3S0SLVB"K&,-]OM8r?p<P2@Ki6_0RA^!WQc=S8U^.U&4^/d-iDkL7Q=3>HW=B5:LmdUXD:)
%LIn*]6:QAnEX^^7Ko#hY7Wtrt],BO'e;a]`^5`<tqEVi%C7oXAAT.bt*'FHrF0ih/E5G&KI=&\t1R$8>&,&m9+T8CGghc11^;Im=
%Gs/&(;jc#qXY*5\Bi(SLRcDG-1^M1g-c>d0PGOSgr."El(6!p`3bPu54bjEC)8Wh-ScpN'-X-:1I`<Q4^J7*&OH(_\(u.E/d"XeO
%.K(WJ\4DpU[Z>'94?onU6?:H)YmhhR.1?'Z7T*l;^^Yu?Dt$"HpIssd]Y[!M"%1-)SqQ<kl=%F2>"dm#Yuq5W87GS-03O;J^#k#J
%#SU*gomUcYWd1h4W%KN=S!\7GN*"`5"LED4lOrUnq\<>QM8lB=:p".A\-tk3VQ9cs:*r&[CT?/kj<JLH,=,a'Kr$!?lFa\87\UJm
%V.E+=]J&=j""I$'\C/qFQ`.6>?T8a#PG:Hg24J(R%0RnaV>d3tU(0[mW@M/j.W#d,8liTP%q'i/YBEK3M9m(KQIO$N'Zr)S&Eg!d
%gj,:L#K-i91\R1V&Q%P"8=78%7&AMaV06WB)JO8(5!dGSR6%8n]`gSs(%N3&W::O9Mt;aa%!`,>+*/\Dl#Pae>]LIc%3PXkK=<VA
%$9+o6@DA>9.Dm3oHQ'=/f6"L"2[_gr+dS7LT#?=n*53M3kV4r\EJ4hXQd&k7Ss'0i+LjGhX.29'nP[_/Qs0%uJ4$-0MSrsFH;@AO
%VkJJS>TB8I#\"Pf[oq:lXXb=!W,7frCdUftq.<?0Y&JG%[:.RUQUqB=A>FCYW,5OL6Yd?n1urG3';u(=CQXO+WKUX^@r6gSgF5sX
%Br$r'/4:r38DL[[DZn,!0OH'f#)48q8;mcA$afU7&Ol07B'@nL`Wf3,<8+UPFqF=S\^Y<$>KjQD0[PMa>tNeu'H#,UJmG00RK<_9
%.G1T-@hV]8!U%%c1+_i4Cl=3o>9Us-2a`t1B7Nt48T@T;S4\RqkU6R**6gP0m;B]2N#@_UdlcGC-j%.n5JR>OH9U&C=5`alXhS5t
%Z$u2d0"g\1h"5No1ttd%"0`Bl!D\Q95#-Ao)rc3JiM^3AdJa[pn-"soc=+#kB*lcbh2V.J:58tI@8BG-0obiN*7erOCaa7d!&tMq
%WNfn,[in6DSPQ<4$3[[N$/B#i,:O4i>D[$l!c3L9!%Qp&m>`"a2+%s<%>cj;G4Xr:%he`g`5@\ms%nE+>&G\YV)8)n06)0Qq0k3R
%l5+3pM)cXSP4l]AWmP@a=T^S7_iV(UJ7);^h[ErH'H[aLD,--T^mB_^<alSA[cIW?jOo:e05_@M1u#;ZG#cOILo2;:An2j#3CkEh
%fPCdu&0@9P_`p"J\f5LQUVBes(Xm')5)Oh])suf];:JfYP[MY"K<5W(YRT+eYaqp4*bl/5@oPlRCpnul_tnTq[:a#2[TN0L"BN?f
%^),@e`tssTL9N8V#LGYu#V,Yq&#"KHeS%?h[T[O@.5_?BJlXrO9C^TO$`!1.!Ia#DaU\Kp86d%sBYDI,V:?F77e2uR2FmG!P+LlN
%/bDG$A%X10.r2HIHcA\fM9%O-dZ_pZ<?/l!]>K_;V1,u.g4A5^8ZCC`TZM-_%7[`shg*f&FF\56.^XdK!:Z+o)E\-A!kktlJ@6^H
%]R^UtP\5`AB/bGHU6HS(?n5t&h>9(nT0NoiG`lZI3Gn8XX[g%mK=WG^N2EF[=;:1gCH=UnWmHi-RGp2\8jaq_U!XRQ5]s.^e2n5R
%[L+TFgQ@rC5qR7pduR[k&*g=/MJrdWCD\G7(#.tL-)fMXYTBe6%+C#l'C^CETg-moKCt\jka(su;):prA$j*)/R-EIn/1#\Tcq#K
%?L$24Bkt@]CS,dfT0<_1DZsrCggZL(69uj[\d?2IKcY72Q_W*gC9BMHEjMBP]&&C..^r<_1kj!_d36h)m:D!L#lJ+$jYe=t)3jmJ
%e(g;"c]6%cJjP^*2ZF;qXASVCi`h:`M3sr:OWKITM2NjDR;F2!N?[Mc$B,V6RSNVmgA4#08rS[b#+^^3q+M#OmC5T1\ND#+A4%:g
%Lger)1VdZ.=:Pg#c+nYhL)jLjDYS!:XUVnYT+K^aD8<En2.7?gi+'4D10<CT5s0nQ%Y4c_MLk`>3>f1i:Dc!*"-?s\%78<iRh"Rr
%(coPG\I8HUs61FUP@;4W+@_T(NoFjW_fG6*bY]6o\'+T'g$@B57Pi]1niDOG8HB6PD%5V10W8D9&^\jJL;S<<X!Bjn["OA?L>)s+
%8+_20TqAjG9cA+M8C11Ig"6D`(sj0q8_B7<8ZK6/T^K+d;$U2McYSVs#`kg7W,W"X%bf0sl6`X3D-\Y]+mubZZrS.i4?K:=mKdc+
%d@hEqOaXFc[SBP*At5Hi9mXOjgT&LgQF.uhgs?)40\GcD[Y#N53k11&.gN8G'3a<lJ0L_r!K61jo1&l?KIe8-R:):#[cm=AAB57h
%9ENY42eM0r8e0ABB"]),kfjHJT"iiMEK/bV^Xc6B2obK=FgOXcpRu?IJ.?+)q,9S5<H<+0L%KG7BbdP8V``up_h1N-BQ*-(h.Dq"
%f#/1'naMY"G7EI`;YpN7^?TYcC6fDaDc)%k!*BX\`P4>'U8dPm.t1ROEmkc<b\3G^MP&n6;'@b@Ptl7\#dMN-7f+"k)_ABCTPLrI
%"\8B&cKC,iAGnjmCLNL'"*)c,c(B;-NguKPnG7_[Q&gLLpGY4S8Xr5Kg)M'glX>;i<,1BSVi/m!+H?3ceEEW!<:S#LB!C]!Fd!If
%f+[A)g7Lf1l'Jt1MEX.lUlqoWU8d3XXN.=s!>Pb,F.9MRC:G>/QPuk0=TQ<G7k;*+8$V0-BXgV8Uo#P+=Mr,@E3\S=r;E@:Y>]8<
%A2ig/g34s+J^#sBbk:D1.Y'PBj!/p81a'SV!#EjFa.BT\(F%=%m2MAQ@E`M2b'33Vb3KWna`Mt[ZK9LZH8?Q-RFBjmk8uNh'RQ/?
%7QHeo1[!QLF<b!B7tN`.dLa)$4B*mScG\JN2*U66*rVD)4-QCsX''8M2Ehn8/t4^[+*_t<TiNTa1<3:p@e)PK&?C1^T2YAj'JAHp
%c]L:E&24d90)(R!\qo*?]]X:1'!CUS[<qIi!Ld!#@\gP8O8I/.oNFg4!`UC+^JBl1*fkGiKW?lr!efN;i@Ymp0CEmG?^\^AgQc)^
%._Bf5Z(F%?+nMCh$f&I-I[8PDJ0m2u*f%&JDSsjn\Gc9oR;QV"D.Ten]@^17Ypb!r@QVoYR<.1)$F\r=!mi'9'ts^\jsFGRiQO'b
%m)16=ffhJ*^QTk!Hs:V9ZLXJW4BUJX5bQT<CiA%^J7"W">^9R4B&&N@gN:>M?8J/9%)rO&-Mh4nNq/t'X"?C@o](f#S_rGN]XY\H
%WN<L-aAN75ZMeI.`CH]>!reWMo97=U5tr!K6("8$I`LTaa)P^:pL&-mcHekhd]iYd!SC?@a-e$B$,tY+WUtLI>rhAGj50:jo6q_j
%HZp-QRN@_ck9<Cd+@iu_>oQTmCo,!eIUX:dB>"C$alN',c0_5\bA_=;N1jId94c9Qo3:&d%Dq.YEoi@D3>p+[HHnp*r"8N0c!L`o
%Ed\1IPRKRrE*>FlDkYc?,ZQV+Y_V!bK=8f8K)@AgkIcG#V-nDZdh#4Z^??^gW!P^V$r,g`qSS^P,hQI\\,6og53p@@1XLMT?Q!g%
%LN"T(H'^2Y0YM*"^"k'qj.DYZRSCN:!+%MrjNrEXR7Ft!?U>Q"gO1*NU&sO]d$VrJ&\3ISGmK)[6U.>f1\]qR9tX9:q8'jmRgBO.
%YL2'0Vj4Ds1UZ#61&juHI`:5"LRCE:fk1Te*ZDfVqkUQh$$=VG6LO$=T:Q"8]^a,/DHb+V*$h1cniIhoO#I-W8E4pePce%,:PG<e
%r5;EeUG]@\+:IPFSlb)BHgo2e.2e!O;Xro+P\r\Q&''<d&/V)E2]3XiaFS)V'i`Gpr71`BphoBo:-@Tn_Iq#Pp`T*t.-(Ah3*abQ
%-JF[/Q^G;XjDpI#Yg:4'G<g8%UVTOp==L-EO!N_SKQA+40%_LHShuRC^AI9+]`cdt0h"EaHB]o3/6dIE(90%YcAJMBn1.TGh$juT
%NVjVKC'q&FPm%TACsPjhq->sDC=UelGMem3*bqN_>6N_\be%/uW8+aJ(XuA!TLh)7a%danP0mO3dTsre(H'1c't`E2=?LjNi@>,(
%O4e/Q/(eX\GTdlNpGnGVDg;,C0JkJddA2lM"iHai]@o`[a$Z0H/qc+FrSBRj5Pst#ZWssul/o'g$Xc(WGlZU3C\-O9=PVkrFF>pN
%K$V.^R?4a1@n!:Y2mJZ8TYHs6,80V8:5P1u!5m8edpGX?mlOA&J*2Q;fiu%12qj,C=jm!*a"m4lF=3/l'D)>o,;e%8&rFiL[[e3I
%7FHpIqY.R2J<L0#(//h6`:/kth>b1qRRcoa1:1m?Sq7GMNM?]?DeH_qRfN7I1']Vr@JQ%'Hp;5r\'ahl.T+?75a1XpO9ZLnL3u5X
%du?^N+M:.&ThGPa<[i>/ZS5=402ujKnPIK5_r7MER<[M:UkgDQ.M)LrB8@pUS7[45G423a=!n<G%8usWEgf:$5W!`7!W1uBD49S#
%quOS!d2MTgq`0F_!Q77X(-oKe3r&B3A"'W][k&H3K<Q(##bbD_UbK%@o3XU4`]:Ih9V5_]&/<ItKSC?n!XZJMcSV#%/2T19KEclX
%V%V[".Fq+CV%/$rN99.$qttG@9n69H#Op&0)Q+q!DsO5Z67-"n+tt9j\%ZfXH>.r?&<1qCjQH9eacO`"JAu4QEqBE=A_V\[3Dt\^
%_R(!UA=*S+%n(j$$)Q&5R2.U`jqe8cI4P.-nckO%"nkdONH\k9+.'bra7M\O&/mQT0uHGui$a2:)E*nX.q0'+e1;%4U.GS"5%5,p
%0Z;e`<\#uaO/*%3KZ@Kf,aid"9UU-?)=g(T9RB#5\L#.r9_]K1#<8b.>X.T1^]p^">E`b4eN;"50M^Y@?hfF[O43Gub_W-M*ABi;
%[&,!iH`5*c6:6>,@E*'\'\e;$FL1qQ/u5RJ'DMSA+0Ii&kr$hZdn8Tr\Jm%9*?M01#\k37E#+!$(>(FR7I&.QRV(`rIO[Qcr)srn
%L=mE[I8/DN_/0eI)fg.q[jLfn:fh^:\,Cl_$#=,LVkEZMrYT'=[B6lNG'9h!kFS8o1\d%eI4AN0kGkLNNugXJG*uNr@Pgj@>/Xa'
%AO#/Q/o7>%]dEU]E)bTHr5dF\AjS,B)fmUQb]'#G*;Pb*EZkPMnIQFK_cg]FOXfMLiKaZ:?_IQA>o#=3`b[^<cj>6Kg`,^'rA+mE
%"q;tgb6QoXEF*a30$&RSd!=$t\T$[Rc_t_@36&3=H-![Qi5%gI*kK;86gJX+RSB?n%'jgU;@0#qf/Xnnhr[&(dV%ts'=%ZJp0m)@
%p#4!)hL4dRWD#Diafl2QE*!3_IkpZWad%@m"+bL>nUSPfV]`Z*L"jdC1L4i\!O`6VPi5K5-V?Q-6dfKnjP\WU0s_9_5EKd`cj9'U
%EEB,SY.2!:^cHg:_!oAMr,V1_>LP8EFiFM:@^m-V+!tE-KhX;X=JhVHoB@ngW]sI2WKo9]]!G*9"mE?"BESQfmgF2[p1]J:*r#OO
%$[d68J3?^9A/<Kdi2G-P!Ig`\T\n,>/:@1]i<@R!6u9M>&oail7@nTL;b5t64ZnsJU%dY&(\6ko>b8[AkUOI=Qg<6"&IFLJO."U'
%WogX3="eAk&)FkilV!u^?#oAPgQ.sQo>X+M(PcFYW,+W?iiYo$'%G_-P[M6aC4M'%bX.2aB<=Gcq<\2kL_C<hDs.15M+KO.`dh."
%R8PANa:P/J[53^&iM2a"`h2&aMe:o!1J]g`>2GO=9ol-&_sRj3dId\`+P1iIe5a1YkhD(Q3*(MY1$l#@Dm)o/D!#QXJMrJd+Eke9
%ohhZ_jN]p:Nc164Nqp\^:GPZ?Pq7NaD]/F=Ba[gq-t]6^P5R_;;LKEm4b:cnG`/%_G.sH$;#%m*!K;p6DcQp;7l13uqe?8VS6O!^
%ZC$&DU*_TM@XN`)^tu3\dna7ibfo2Ie&s^0?:A->$ee:iSUVc&fohb#:@=)rl!XVt9XO3S4rC'//JLjX;U(\6HKlaUg/oS("JB1B
%^9f(kq0qf#"*B$-9`8RL2I;*^GjYYh3-9KPL_24+*Al"O^$g$IAV9(<#BK?;'jd:p""O6B]PWJt3R]gTnE6cuY<)"PM^8jEcbuCs
%3Jl((^_V>%U@9bOfEWsV^H%R(BN]B;ebgX*Cj/#+=%@+rXuDmT\8L_l?fB4\*7MCu_^Ln!Dm'"8EBjo-Ng]rNSS6)e5LQpo2@=l=
%V43qSP%BrA>?C7?B"&qI8!!en]U7P-!,"\on]>WX-A+/Ue7sDuG</&(>i3Bng@d>9<;UjRk>><r1f'+)IAHq7_G%2uEJr[VNC<T;
%Qsa@l.Mp'HT782Of\H?"$uA(.\rc6D*--ZF[0o"rReYLsj&<'[gC\lP`N,.KEN3YYTX\4mAK%3(?(6$NLrgd-D?L>S`RWgRL$a>6
%@<9@[jrMf#cSNSRGmJPMfp?OP6,Fc2h?Roq!%.AW*R&Wj(Gd"5:kT'Mp^Nf$O7l@[k.q-8l;K*Q?hc3!Em%'O0TatEm$WjD8`P/]
%SXXMLJA23:oK$.3a>"<r)p!BVc"J&ESp8A!23r_a`A:`R/8+jGYbc#WoDg1Z.NSL,^Z6`hDf>WGg05gJNW.;U-EmZ"h=P;[F[2[X
%=baD[d%?pspHc80ar%0)mmDOa/r;4/q.;Z-XWr1uT:<L]TTWo_#2A$u\WBO89afY(ZsL>W-d1bQGEJ20P'6c!g<K2]ON?gomJse6
%2Pjl$e2.ondX;hPPX1N-fc=b?!&)l7HH41\Ipsg_ipqBV9SSHOW,I.Bj'@,Br'5#ZG;-u8$@(XPP%md]#7Pi4oQ\H&l=5#fp@>Q*
%/9gSZ1Lqu:Zg?6P^M\PM5.D>i=TNq!RKDg'4/7,Z*4`$K:6AHIO=U!I]:<Y=a=$>`G:gUmh;?GVRLC5nc)V/LZc,!]T]2aV#ee"o
%Yi2&-gn[LDIup&!YbbIYI=2q#$HAtXD=6e4P7?oAiS,d-UJj80*9n6DP6\k,N&^hA=q"gV^1C!A_JSIK:ABF!=g".)UO_/4%5F""
%;>Yd^_i5IKjma:35X1sLkiA[1%lt=.Vr/fjgI-LGboR2>nMai,'n=Y31?/Vrpqn;@88c]IU?&C#n8%C0#YFAfn"F8BOA?,;:TmT*
%O>:KG/(E*U_:OoO;PlclSKA$e!4CQkQ_Ba'*H!tU^cZ^SktQJ5;a:G`rtJ=^@08t60o\=XrBRhM/Oj#=<lFt'gaF`S5&O0__/aFr
%dtI1`n-W:`S&gZ%F>0%2D1B+9Xpm5[64>df];[+1IcO04kPaH<,=WfKL;#FdE9\3a)XN2l#jtB>*=!uRl7r#Y61\U*@hm<94-<Yu
%\).f_+6,1OPn3IR,%8IXHPU.JH')DC.(H0`L7:=o]"Y01F0=fsQntBN#JSq:I=omKnfq)s$[=^%\r`!&92Z/Y[oBORG<.oj=Y.A#
%rs8uYP)NE1%-2WhK-hS4;)'oeDg?!Gl3&s1\^fC[T>>i$\co#?*]_^M%?LH>Pungg\:H8dekf\'E%V*%?h2T_UgT_7h0W*4PYcJ=
%;;Ku5m9Sql]QiW%=G!r'\Q4F`dMi5h1UKi044AR<;V^Zu7_63>HZZa'A8AT2;_cH&N4NoI;($ipaLjnRqI)dK7HYg7)/c@>L-Xbm
%rH1p<7c9#W:C\'j'uV%]cAR+emkH'4JPhG71>2`JGb\)+9`_RZ%aD7:)i'MfN$n_?KP/(fDa%R),bEHo<sm0re?Kd_5s1SX*DHER
%`9f9F;_]P+18(8j<$ngdO$i<c=$%%DaHj-<O0K#&@&?o_e_eP54XEf"^9dGfBVuRLQ@(1]eH-M#psht2>e_L+o\UHM%8XFsqD.gm
%'$5c$C1m"&E_haF_#<E><_g5H8H?0mE3k%Ea,GVIg&'P](c!CBLX15oq<Q*(2p(So8/+NE;t@5O(K6iK@V+8Rof6b&kC"grb+W>K
%d$(YL\1uhcTW,Z=mC@q,BP]dP2.O@OUR#&oa_%gLhH>KAfk6!5+4K;I2`qeg^CE&e_-odXPC)\3#1-o='2G2nI$be>Ghm:Gp04ut
%H8saNE_ZbCk?B+3LuiK0i3n2BgH,BRG40s;HT_XQ=\a<:2d>7<5ecG+ohtmD?bM<5S<21VDa7rPM-ZQ@]POi<.\^"aRV:h'F71O9
%l98e-&Q]jeZcqBAd&Q3p,UM_s'?$>gH!k,n7d92:$1>E#]9!Xh;4h/h5Z^c(n\NuB#J.G%r6JXl+5P04^!<\_A<4>Qe,DGYWdalM
%_PU6+<!6O3n)Ko8-tEj#T'c5sG[5c@,)9GB`dS*"^iR=!\GGn^n*WZBRD><LNNp:3kF/9;\Xau;q_WQ-#9L5]G[CbTN0&hS\;0B^
%(gGeY^?/]W`bmm]jSf6%Zr2M7J'H8:@s>)gbe?Zm!5eL,BeJ&01(cK)[<L4,,Cq7p*o^bL*;ZVMr32S"$=ZndqAgIfV(mjLF2=+8
%-jm^3:YJU'`UT?uIdm<r9!9=q[DKE?b6Jj&BC=/,+bU>G_#(fi\QZ"g@\)']N.rgd[Nf0><c1#40L-'65<H[MM9#EZ1%Ua7XJK=3
%n'"!XUL<aT?!o6AGPP+A"@0@GgY6Bls)B!K^-PO5oW87+qOV$)3?.?o0E4+Z_jApLi"7r'.OmsB)04s%CSl>$/3YKiDh_iZg4VL>
%-:n_Ko5C">dSmJk&9?qu*M!0hg\b'?O0Lf;Km)d5bULGh_4T6K@C`"KQW3hF&>8([3:*e-aYdW`:Q`3&$s)5)05phT$&nX(q*[V`
%1ADl55.$)O_WuSm4!/']5Q'UN,[Ou0rl$Df$b_An+.E'80SG=AP.?$+J?DS/J*V14f0_?hh-[`P]"M,]b:ku@MhKLWnfB["AomJ0
%Hf?b@&$^l:p"[Y,h8HX\nD8A+#_13g[D)oh^)bS6_;$7(;#O/c1D,*>/?dSc$LFHt+M9!mI0q=gcuei-R!*=R*`Gk^>r#;M]QjjR
%pHUf9J%cT,pHl>l\52"C873jJ=Z$-4dftRYAMcT>%N&L=?J4P&\0FK+aO>\"MSNkMUT6Th)X[.8dV.NNk&>9_HuK*f*WF33Sp[E_
%5a'OCm>iqHk[)&%m>PE'SBmW\jWprjhHcr@HSCe4i6UDG(gFR3DBP2b9uhHpqK!O",.rI26W\h<i6/`m5P8ct5r<'ZM25"D-BJ/K
%3`7#K-$!rOMaiUY)$k"c;fAb&YkI:ari@9Zb)[lI]`/K@3js\mem@RRVM)?f?4O[;nlQRFO.Ei;76Ai$_gT5--=b_i7ldZrpaD5#
%^`"ttg[?d]$!)]`+V&VOM*`OgQ,RJfr'YGSrch-I.oD[m8r?_&^-FX'/5M\m#.e<==JWS"@kIVeI+dWnc>-g/1p=^PA$OUd<eQ`(
%_bR>+DL6"%/)\W[?9GV;oN/2$K37N]$l/OElocr04P"B6&I*d(L]slR(F!`t_E+E<&[EXBod0&\s+V$0!`k[nbp2)5\!_g\f$]1h
%9tne\%G8;<pp0Q:Mq(cD^t[0]M".HmHHdjG%@Q[:Ol1ineo%*.Cmn'!/!DI.,;.j0>:S.(-&]2+)JL^^e`&K5fQk_k/de>l@tKa-
%cC/e@+C`C=E(g-E[q*B\.Fq,ejbq+3Fk\0O%0o%fG6'5T1jlh%)5=E_%Ei65RgtQQG8-1Y>$Y#P7B?L6PNR/UOrnT"_au[7^B]%c
%:]=[s:j=\:@VqFoAH=<O)_p?lF/\o:KJc9,M-a.&CW1..Nr+jH**+J(g:dBSic*X1WkVQNqFnQ4+#41*o?OgEK[(dC!0)*1n#g7u
%&aPLW=ii("r<s9FK5[Y-<lf!PQe$Nr]6eP>'"QW[oG+WKW!D'V$0sD;SZh)c<lA_#<SJ]lSc*>,%P(8g\BQSUU#.J*4O0lMmq8j7
%9`(Q7'q$$J@uNVHZNN\_3l5(6\,H$kSJ8kc:J3Q@Ct!O3=;Ohi"RFn)__aY]i<FM'9:!Q&U/'cV5)KoPqcGJb\2hfth+K2eci85,
%X:MbP9>Cl\[!*=V=iX9<6MYP0fdF%0Un%1AQOeo&H]0h(B=dPt8c\1P;1d?^b>`*[/"2s[X%+r#T?Ve5_-h\)<@VJN%`nQ(gE:o7
%PeLp9r2jnP1AYJGU#`>KUjWK+d6CrSjZa:._;\#j.AaL1i/$R,_HY%@a="!5VSSClI_R6[.DHD,4dPj2%n*8n&5[\B-7\&R&:+`2
%a>CsNcc3GMdcYnM3\&aHhY)dqG-RCH`@RJh(XZocN=);-G_ftsfr"C"8@4>j*r38O,6?E@_&-c'*)!CHd;BijRCD/j#N%]XmA]tK
%l"u-!]8`\5U)c1;+l5Q]XO?8hinYUR;L84-I!+9dP.):U5/Y=jcbu[Lq.GrU[GlY3[je$nl:2TGp7]5pH5o^HKa%Vu)?'7l/%cmk
%ac*&t:jUk=T3b6Qb![1caHqU!Y428>:3M,Y/Fm_3]lc-&fY8pLc*s_kXnG7qCY=69@k3C:pF^=TPYt*8X],Z(p.Jm>nG"7.2IQPQ
%3s!([X&=R'B-P'i@rJ\k8"Fc0JTOP&D<%KLZe<#GOt:mn]u-ALr$Rcg7&RtQ6R%Yi+3;'YGAk_ARLe@0E^4^7q1Ju8,7<+_B9^YQ
%]MD;l=_#X(p3jE'h=39,1"9gMPqgf2=,]Ang+GSm+mOK9XKB:all;*O"@VW&_)o);n,.WJ#><I/#L6/I-5,.Aa_/;j\N+<$qCK&Y
%+CYgrE9=Z'(cV"f"5Stm<`<GnQ!f;\NCQYVR[I4\XMAMPcCY>6=MIk?(>Vim/MOV8bQ:gk(N]"hXF:c481DoR<T5"Li_i0QP7>PN
%B\WYG!b2#q9mRMY,+_`K$9V)A=+&/#%<OfO2[W&+,4`mSL_[H9MHHQZ0c%"1d>/?4b#flAY8q2Ucq%$00MFb6G"Q+U\?AD$CQ>r-
%r9+s?mP4BX8D(.@j17J[4tHK`fkX8C-oW!(TFqmXP=1>=Duf==ocqY_JjDPP$q!M0E5WLBIYr6T8/M<P#<+TCTu"a4[eR`9G-3!I
%3Yo>#egqcm6"oLA;Rh[;p`G-4GN^,.V/HubNQ"`UH^'0>AHB3u&3`:^TrDM%#6)!bZ2Y4n3Pbl\"SG%?NuXSfg(i;.%6J1'e&hM.
%qiC&g_[qXo#WUcoMuiEV<^]<FoGR+Vb2#@<#6+jsq*:1p]>Z^+k`[Oc@fBe-8n+J^bf+-!J'^K+oFF#MjLWNpY\"S=aCrnp61Y'*
%E?@ba%Y=TWX>Pe3"*10hmP?JZ,[SWt(-g:2c68&T14tNI:Sa=48&S[G:dQj)NU>hQ^=_8Ao9[6t/41rZ(GR(->ohEr-U"a=!;3b0
%<VHiX'69o3k!khH@O^Bk*(cj,CFd9;Nurn-BMOqW4<-m(K>Db8,_bS#`1)Y-Zg6<qp5&)B&G>6/Q@()[.mq&KB3Vr0EB,Yd4;lI9
%AoJ:A;anabR(:&R-Q8N0X?JW++0+J.,e*Kc<h@OSg'Sb-$Mm=2Q\?<D4O<cm"LVIHW=K;pk'5#o*/&D<h[.%[],.(j&jp!DBjeAi
%hJ:K8YH57mBW-@&bAn0?d#8&P$Z3CPKVf"^=46(388aJ(i6_5!A(5P":[A[D*Yi)$WiRtLrIYh%J^5rT4N[$YJ]<=on*?'$gJiV[
%Gcrg%n/o+99_A4L6,3cFnk]J3Q*I#H0ocLi2lC-BLe61hTeO^UX.4;ZbV2[Hn[&FJO/?J#U",F"\eGdV2))2Y:.\C+>*EDo;OHF;
%7)Uk(;lls?:\)"d%W8Bp*C^cUEfb<G[#eTkUDCQ2LGnfh+bq([bEmL850A)-2tN8M4`R+<C>)UR5on)NOE>KCC2K?G49BmK2/Kr>
%jq,YA6,.O_BE[uq[H0Y.F)s)nZ%CBk(bRk1TM;N&Sa-k^_r*UfR$3p)rH^kq8@Oe>`^[hTR*@hj/+IM*R8-OT*_@qr_/*^PVmsLj
%P$%O\ft-`8]**>%9'S/@\%ZD_#V`'.kuu9:"SZ;q:3!3!$F;aH_%codr2F]KJ[@R--C7)j5^e^]G_=.P'IC[(;q76-C4r0tNe_pn
%[,cdM:XBk`Vsh6b/;aK/on6aeM>nFiQ.K19jA&/BaZ5DqCQrn8:j<tb&YD2j]-YD36'$K;5TU@)qD!fC+(EFUCUZ3n,"\"7b"l/L
%Mb'@)c#/C7Zo@:c"d3u!UU=1;N[S9L_,"4K-r;#EhJ&5oi=2e^4-B#9eq93.!ujN<Lme"RQJ7U`bYR1),M^OkR+8/h5cWbR"-9DU
%q5_RKC_0K/]i5f[*5)mt'SelLf85Dk6ne(&pMakA[+JH@il/(Y`bEGer3nDE8QRT72<_8j<,i)&"1`Y'j>"9/9LM/s@%\O]77oU1
%=tbi5X<.<NmH1b7i/k1jN.q%FUVF_nJIkih49@A,c,E&5C0<Z>Wufk+:"A8i/DtXUM+%1EdO'3B\3qLKo-fI_W%bS]4sV:0ZQEYa
%]u8.g5IBj;')M3fOK+W?nN:W[:5Z:__FDaQ%kU[BCac]SQ1X&LdYjXh</ZRtY`cIk@_I$K\p7uFgFluZL7u(P;MD&*N/b/jm+!Lb
%K\2B>dHDIr?/SCRJ90GnOTmp8'EH!@1`u&tQ`.!Yr"R@[80G2"e'L_n%;4qJ-pK4ID73oC]&6X*4L;/s7uaW7jmYX8ETZZn5-A@3
%L$qLqd=<_*/I7>sd]0Ji*Dou?9mmcAPL+:=OI(^liQTtl&h")KL"_%s-Zqq.LE-D9?=dBOATJG+[uTm\#r(YU&4,nmTN6?4E>Gh8
%IdD6$RMTm<@)<+5PB^\PWuotKdB8VWSO,b[N\*FX4'>gQ6fQ/08N5S]"RQid#+ieUR!3/LZ(bZ5FBTJR2`*J/i&o,q=-IM%P`0]o
%P:TJbK*'CpP&:U2'F\[P09uZY?f,i4.<(eRU!.5>JFnX2FXTpIFBjkPdI*#rdJ$-@qo3p-n^:8[9P2_CC3rS>%OCtm.i9nu-jQO<
%\0V6J,)8!f$p;up)7hT7ZJ]"kE?e\c`R\`2&sq4ABC?-/B\F)#LimG=h6u0n$9<qf8:b5oX6t)q0XK0NM%cbNKoIE%7DiIEMF;g^
%J1f*H@%d",\,&S.-6Tu^9mgQ1id+#>c3nY#aq5-q>CeCZ3i2[m@&iG[Gr0ne`[U8e?,QO=<6g+-9Qf1f&O9:&roKB>;WJT[44F&H
%kERk-YG0SPVW[9D2#ui\D8[,q4C=VKKY!oufb7rOB`fOooqT*=PS5sNaaLaL<)JZ1)p7T7lGo:Z6mk>Fd4brSo!.B<!ZJ%@6>D:M
%4GqgV>uj?fZok08;eZUMp_%3X_(p??#hmDd>d7dPOfO6Ze0M5bBHd'%'^t%]\kHKugNr3^\SYI(.I="Q]Tk;HPkp'<KfIY_^!>]o
%3+&Q3F\C5K,T/sN**UaLl`-p54>dVk1n!\i.1%c#R5BMDdNT@FCaN;GL@_3")[h6)Wm/d[gHQ7<"tuS[9^u]*-Hdi]LG[BjBBUrT
%bishYYj@-,\P-?=%F,i[q3S$Ub0aba,3.fT&i%7i`sa#-;s;DF2*2>IDD,.`'pn;R5A)#ZnqH:EW`Nj\CO&n&#LH_RSBn0<bBJRR
%/R;?$LM(9@fCIbU`u&&ZcDP!lG9`>)?<5@,@?mhR_\8:g.d'a6jh&?%(G@6#;m59r)c.?8o;U@4h;G,fQ^%*@fCIaR9,Go-k>SSG
%A(B;pja?@$I#+K";9l(GbK#Y*ZuS?M!jkQ#*ZmW)\+$a5534i0?QFRC'-IM8d`N;ShPaZHCg'/#\dNJ#ipB62C`*%%#nY^i-fqP4
%lkFp0_uZhn8B',g*L6F?Vm;/L1:;EneW`;OSO+')>$5/=,<Vu.d8@i[H\=n?XpYNm="dfiqLmt.WH:c`d&#0gXi,rX[=7QIZ."=1
%Rp@"Q"Pp9LealF9a$W@S8cFk^5*5l"`clEI$OlIP//at*3fdn+h5U2rEcD+^G'@u&q05FjO%qW+X6`T2IYkAo"LO:_0fdEM5n'm)
%:eXZ:=*!NZ8B_DT@D:,;`7-0LL;&:P0L^3AlbM"/BhsJ"dHcpJ/uViNSePjj@8!4rJ63L_;$aOc@u\h@G)7Fn77`fY,\?%g)EDA/
%LR6'GW^i!6[;:e#C'o<CP6tVqC'mB6R9]\"biloQ>fnpEP[Y5beBHLd]J$9rhH0#j6s=(1DqLLFXiu.j22/>-kr3iUrWtH9P,P8o
%7kdLMb0VspI.VT@nYFp^>OX!N;u7Da;kPT.I@NY]NV]7\M<;PURQ+Wt*0r$GU1-a!1s1#aRCOVXW*#p18Qb]_9(u<GL&q?32d62'
%>3D]YXIba=r'@l`>93_$r^!=S7'N]q!;N-BJmgY[L'U%b8'%4\,&qVukuK!d<lprM/E+Tcl"FQq`DKPbqib<p&h0JF&`&!D`Mg@K
%_;:<g;m9omO91Rg*G;@/*AFl6!aC\N<pG/$VL(>'hdD^U@LH+cTn+s^.DTB4bs@=m4UhFf>aBMsS9231p/>!sqnefbV19nlFK\oZ
%'ISjgI`eS-JlF5P`4J9b%uu$5SU@)9UF5?U%=cHuCq!/shPg&Q-!=K.X43k&2uJMBqRUfQoLA+8M;uVMHYN*VQ:5'l]tl[FoltKK
%`d\r6h9("h,%77qX*?`iHD;Gr=?Tt1]`E`nfMka<o[h"FN8E?gSHFT2i@^,H^g]8f(5+e/0Bl>(oS-X1R^Iaid2QBA6+gb2$$9'r
%OD<d/=(4_XE0X`JV6RT?kpOH?MjmWp,\+"r'<11U*+sBh+'N(n`N2+\4aRgIF;6TfFUcX!QV11<9qG4SF='@gQ*J/9#]Zs;bS!-W
%M9G[c)C9iY.U#hR0N3e,&uX3BG(L;s.;UJBBVgtF8I#A"djj18"j`Dn!`'fbhRY\Y1/Ho3EQ*4TY09g?]=qH[SgL@@V_X<i%NZAJ
%SIS3(1@Km,fLm^cE#T]GcF\72hQ^"X2_jm!aum(2/'\F66=o!_I\DtLHG!-e*h.F./^CtOAY-co>e;ae_cp'n(FljPf-pQP.Sh:=
%?$GQ[!(H1[3d%6)!bf;`8-)!IL5nt]=jm@H\85Hg`^!@\nrV2M/4P0.0",A9A7IM'd)AKT+=QSc`3gu$bB$R=[Gh5-ZC1Hu;QPG7
%SodNTA,\9b:.$p`:rdnK??FgO+7#G![Ea$ET*fH6Q*)5M1/0J<gA7k^^fA?QccTflSBPm<.iibk!,8!XUW:>BJ50@1nnP:TQ1`d1
%</u4I7]54+TFF[X(t'jifgo!f^^,u6QJf*5h/43l\.5OAGWrH?)STLb8G;GN7C$i5.['c.]g@i4Bl[RY8/;3::6@(1FEs!"KQ<>%
%=]e.kIF,AYG>PQ'$nN*XUL86+08\/'TWC+ZO+$la0Gl<VYe%K*F+r\4njI4e:Tfe(R!QGmCi0q-r$rKC@EXk:bPOeeo$6tm:FaLc
%%c1R#.$%*.cm[MY\1$eMSIF7Of.B$H\D^1[7PVn7-5Z;S?\rhVZqnHOiGXd@R:PQua_)\%`tIc@FpmQq^bb?0?InO+a0Or%O&4Ea
%RCH*FQ&"IC3qe*R:*,.Ah2?C5ND_@2G1F!r:Qk=n`GC+'?)sm8$J'S/SO"HP&AM&u<kf(_?*g.-]M0GJ(;l'^qaSV)S2@ftof%-c
%H37KdhD@9^kn*bmK2&[ApJX:IGWUg;X.8T:$bXqnHqJd?*`EZ*qjsOf]:,)%.4m$"gKAGRp_C-pZ9-h1[_>Qhp']M;e]R<+DFLYj
%-?99k+Z$.C\kt*Rl`$0*)2$(6iD&Aq<kljAKusR<$0.Ap[;rIM3egXTKc[mtqaRjC00"$KhAfar;RET1g"hmS@(d00;ts?j0(un]
%GhYS3X903=73X(e3i06Ddmp_g<o^)<e5E$F9=<Eu<%(rr;[_3Z)rX<%\>$dV=BE,7R?D(l.lB1amu9@ndYIf'5A_C#=tig-GT+&I
%_<3G?7)u=HS@.s8O,_n_AL5UIQc<I[.PA;@me#3_`i8#$/BW0_V.@oH<mKo,/hYSbU?6_#9K"qVg%B[N4rpF*rn"_f:N$%$L@&_V
%dj;u$=Fg/kVg[<W.!JMLDE$gfH9/od-etf$35QX%]C<0[>1#.C)nFGUcE<&TFiTAG_J<C@EPf:1-C)BE/lLYJ;WV-Y"K1a(Kme!u
%a/Ld4*JJo^?@mRWm\7Q^\Z.h^)uBKL5.N'c)^)k,@@pe)+'LVT/aS[2++A.qHA-diiU3`^p;s//?kW<>KmfDXOOkrJPM>7tfYtP"
%YYRBb9N@_-`lbiGI1!Trf.QDgWE?]C@@uC4\h5Q#_t*d%W]p7GeVae3jHL;kJ\#T)T3S#XXm[bTp;p>-8M[l[;:m6TL]"`o?=BHG
%-uQBdMM6J!<IJm&.i/upSP?K?$N%2dG,<&>\Z3ABM5I&P:Tg_d7\S8rK#0]3S+K0RomM*oT:G8aPk;?jqrBY>(uOqbKmdD1(/5V>
%becQS\Q7Qh3P2L+T-\Af7SVd1=kKY1HR_qSbecQ&*5%8VUKgW=DIK0mOD_:dPEbE6fW>O06mc7`[Q>r\ZK3q1%^eV\XqO$2j<NZ%
%eG7WrRW:c)Ea7W?5:r)Z9"4RAAZkNd2*(;k9(NO#N)c8gV"/)BR\flWp].T"V0-FS6f7O\PgusbK"p$)HWkXdb4b'ZAH[0Lcbe8`
%-dE+M.r80U'fnY5.(W+OgZZL)G*sDJ0%4fLP;HmKi-S)as#[Q3:'`X+k1St*f6(F!a)RRE'O6%]*u!b_])PQ=:#@gg#f#To5Kll$
%\c5HTWKb9]J#<Jocb00O4pWUNs6mmPWT22%DN52hQb3:dN!p>l-Eq:P\Jc!tUg02E\a.djCnIkO-97Naf^$N,6r3+D*C@W>Aken&
%L?#8dh/M@,^*Vu71"5nG!Cl\753:!"h;rY?`]f@b3djS7O?-fu%'=d3QtZN<DEE$>@8W[go81,fP;\A-<*sitR9E3Fk\<@GQ@;H+
%(%MX5PA5fs-FfSp!6t1I=m7BR]Y[DNJg)s]j]FbqTMos*EoIo=FOj>PJcbjTn[^`kdN41@Hq:!'bNl"T^-@kLW7q!$db]u3?\%i;
%l+.s>`pT$^+pZI7\c`tLbS7&0=<hSGQlFi6<83oE<nq];G+1M;=+/t)=0OB*P`Kis@8-!eQTMXYGI_3V;F5B+'PMD[1@>n4.!-9]
%,rUJX76Q(k'L5_Z`de)3h@8@OrrrO&a[S<C/J]lOR1bBM2N*,\G.\m41RSl5F+X.!h"rIgR=\fEGNO4i5[Eo_DlnBdFIMK]hYY?]
%lAA[CSQP``E:;\`0(,/%rlM)rn^W,UN9_m(F4t2R;J=eYr^d10Wn"grh>=,Iq"E_1n&=s2O9L0bVfD9^rb>fg,jSY)%"2<e053K7
%IX1`s$D]\YU[CLU&<eWX(Hd:j!U0r?Bk2</5aPLJ+t/ED]Y)tm:%`>7'[iSN<8Sd/mHD,M:h86MCT3?#G$l1j93n=7L;DsACr#77
%f&MU@<#r>IV6&8/CT5g`jbCq*5*jZ>488g09LhjPe@SdaScIJ2a7@_W8C^!YrfqlW5-=89+8MK88h+HEW+8S:>)^o!"6c%c/_-g9
%j,hs(Q(e;?YAsI[/<h)`-c(^bER1Sqc$GUQq#mC1,<>@%V)%G$;mhXBG.#LILHAop=)g/kY@WpjKQZM+)k@cNG5D%g8laZ+6ML+X
%m4qA^-e2-bFP#=Ub;^Ae?HXO'-_[i@C#9u_7^3,LO3oR22/L-Z;F]ijo*@ttZ`)0rj0(jhq<>4VLrTE,e]?-"nr=Ki,)-k?9kX%9
%U@ORp$'Rf_164VHH^*gs+e"(&._U\b.9oRpF6arUXnJnuL%n#-r#83NioHr0Lt+gUp.%_Wa,2`p!6m.eP%e=A("^OobVMkj1+uNt
%rnagQYt?M;lrZF/%=`^E7c\og,$(EL-!h:iL<R."Q*2Qj'qg,q<@NDS'm9UhX@:`b>7mp$Z@upnTM&H$kY]6$Yps4ZGHIZ<%P'f^
%'I'EggeH2G;GdogqSc3a4o7ELl"Sa2XO\S(UX1i.rpAf/<DARk)9[H0ie/U=T4s-BMBuEX<_!ah_LYb==hNnGOe'TTlnUXp+1\FW
%]9%Zj=@'7WV3R%9E\!d'*1":h9lIN5-@?m'Q&-1UR(S%I)+&Y/i1)%uHm<\eNUF=*7o&X[(bFWDSQ)L4DJ>BV3><L<e&p^81-oh(
%B+XCgWY9HhPd?,&#W3:SobIN/Rp:BtkUuqc8=*iR1k"1X5,.5iFV@hOULh&YS;/V<^h"#MA1g3\L8U/85A+&9jL4C.?P3_['.s7;
%<_p!J]*Y(Dc8JPOD8&>!/UraI-t,7_[u>6i%Q;d;P,L;Fb(`k19+j+B+OsPSW5!4EbH&ack()]SVhn>LaQ(O=U$l'2e@L@YTQ!=q
%HK[<PR1(*9q?,2&-F]#aGtpK#$d_Q.i.!AHF2J^kl\iP0,$X<F3msCkJrt)k*1N^+B*V*k"Wa8:TFKY;*#I."\e>G)+pWrc\[eNa
%CT)4eK+M@!7&P'rSaoVd3_X[Y!Hf)&4gcmSRmY<#V!RmY\naqrDuD\b6cH.#7>05C("1>=oT:_E&N%H>g)L%*[8W`hbkPp@e#XlW
%M.kL%*sFo.g]9QrBI]9e7oddmc/LNP'(q]QGl>l)-&LXCWEbL/,BNe'#pkGf:+4^=hFR'u5-ZA1D`o;B#S_\4,oEOc1aoiBG!\cp
%K%N/b8!J)I:FJfa<]*M&%k!Vf.Zj;$*`6B3SQ_2Tb<;)-YDS*W;WX'24ef50?#@]El`A8:E@LAf?<2lo;+J$Rf=S+\/,X@_b6eDA
%TIiA\\?&LVe,H&a$JCO+\JGA5]r[;+g\nIF'd?D*h>1b;/&X74s1ukcjhhV5>EnK^UWBTM\taDJ'n4m\T*BN(KngYKb27AeC:9\m
%Knni]C3@OMLPg_r`i3"UKngK+5j?&Q:qZkujpJ"iTaMC7E2o1p$P2p\HX;*YTg0a2TSFLST69+$;Y@Icbji40_S[#pb0I]i:s'R5
%gCB8W@*ZIT:jm:AWqUk3E8dMeD20UGcI4C.<$)`_WaF`%6d9/olWe\5IOQ*adk8E):jj5QVRj,;lI61PeMWuK:-8?i6W*^/d;=ZE
%rlmG>*ieC7@;4>[?$N<CPiN`!*ie+@aQo<g00DAeT#,P%4;:/FhKF,`+?oD66fiDI(<ptS4B14!@:e0S(ETSWa"Y'hf;_kM^?lL+
%#VN^X:jnr@f`Kd8n5)9e>;:/Fl@k!c`G#$I`.]KR!1JWZ&P3"_OpanL_S[%_^a0d<o'@]MgYl#Rk1g=TeY1bHhG\ZEaTZkBiFSi2
%/O^1UZJ2H6[9(D&L[$n,2uNIQr-CKo_F+![7g-lm_@$nM_CsT"m2N]O8Uh&rnV)`ZAD/mn4B0)_n8_Hu^$tLujk+l34OiEN?K&ag
%%Z7p>IAGFh^$nkiMF&%dF2iohC5!_$^T?mLq1XU09ZGt5GaV6Pdqem>qjnU0Gc5NX@+c'W?$Ib/>copYeEERbKnlSXigt;OTe$ma
%'WY<:S8dHGq&*Hn(ET/PWdhoe87$]&TkHS1h0-l4\\a&U>ZI?mD252d]DTN5ocu$,\@ob5L[*_Z8$o<3?HM)JGXAK19Jl!fLZeQ+
%-XCtq,S-<t%^2.lQrUogn4%H*rn/)/Wo&!@RN.Z$Gc4rE/$Gbp\F<>n[R2W.9n/;.l>;<$&FuP'&'qLscFE@?EAl2KOEg(q%@Y:j
%LV!%;0>I!Q?!!\\W`38#qd\@i4B'fGXI;+@,N6PVS7P&]=u!3;+q1'BaF!T-IrQ&H;bDX]eQ*=R!Y\PV$3EK":[;9G6pUDOHl^eR
%[*Gs&"e[-_8UW']e&hGKjkV:*dq%OAiNjk*3Re14Fd8KAg42*<I6&rL(c='PH_m.XF8qGI`fn/7B-L[N3h,`[L</P-]L;b>*?tne
%YA'p@$Cc<p.)&1,7&Bh0-Ru1=Pc-46):<^&7u:i'hBlF<fn=#Pq^'YXh&hG3GM>U"]39C;CM9^\]j>><o]uK>na5dIM=5*3.o"K<
%0>78<`9@B7D?D`fTc^Q,XC2LD'C'pHD/+4>a/*P8,s"W*^YYkXLZP[;]8aaqRCcXtph6'ImS'LVpVg`NNpb&@W22QQl/WHeXsh\B
%E,>\1he61i#ol3?9Ga/B45uPEK?(BZX>jYO#*ljhG-Jci@WZ7o!UPD3p4gOg7RAar/4d/-CFfH6Eqgrp'0SEO^UTiOE0&!WY]lTD
%^GSFo1/Ad^0H!"d`TkW]BC:J.YaF"_,#&!uSbJ85&&MQ7)fM)Na]B\D%enBLLP3-/\KjY3GSu@@1AnS_KIAE13'eJi[K'8+CGFNV
%0*.j&CMgsEi10<q(\&DLp/DA_HSdcj9eW^dp]\BV0Y5a4Z-i7".2a/@Ah_fPDhM\=k'g1"'+3,kdZGj9!)7W#n<.a(rD^F=UsT;[
%o"O8mpsn#[Y3@bLI^OZfqbMGQ-4ft.IiD\\$,YipU-G?)['@Ap-jTOAA7lHKXM7MBh3=GrPF0T(s)bSs<WXf\+:n2AdGd)WG_9QO
%^"QG/l)2#"0-Cf!;7<+=Y[)L)`k]9tLM3o9KA5`UpFbbI?MH;EXU"8_fdj]82VBq3]r7+lM]S7m]-ZDfhE0(?L^$&_Yns`!TfnFI
%=S;``],X)FI6%BOZebA`q`00CFV=Z;IqT_9T='o9#LGuL,@Z4-_$+%'J-et^OC3W[0`km$,m&`u(!LTul@fga(Xg:\cPD,u?m`s!
%qs\s))[en*[L)/9:71!E-c"YC&`.EEN>(]K6h:b!5P4BhGm=XKCq@'`$Aj/g#Etd=F=hZBEUT37EB.l@M/r1Y4+^Sm)B_$PMn3SO
%N4_V)`Bq^>207mL]ohnL_9b4ga2UiG1Zu>2'PsUdfk4[cbq,'$#6B;;".[Jf<B$_:$d^cD#(O(o/GBZ:"?EQJm:^Bl+!b>.H\Xak
%10XBg^or<]q_\j+)!q/Ql3O1)BlriWa3/qDp`R(R4b;dN5bhAC_X^rjrRe`RdGHVLm2o-<n)rRiFu5+W#`0CJ-K:*)WLeO$SV7F$
%bVEXf?t#U:iNP_-Ql-N`A1R6V'//DjI"Z_$naKXN/BdC,"Bd!K2XkKIEkfUXTcMM5FYL]2:I*>K31<uhh_$nTa`t>_2E_kjTC8LF
%dJ>Hn?'ojf3eLhS^-^+m]2M<dFU5=.7V<0i8kbD?-4XU\H^Ys^K`b:)*I&`K*_=A]Nm[jsDI\Ca+bjlG/cifbcnsJ>bG<P!If4qO
%2(EgW!l*dS^$d_>%kO<Z%BVeEGm!W$D)1m?'!Fq11'\r8C``(YJ'Ti_aU6L6J"c(JZD&#hjXM%:h2MX@\,*0Titn/4BMuFgJO@4/
%9pE?_cJHGA^ZM\d',f4`VWAo],/X>7p<1o>$c$s<J0mr3M-@8#J<].VrT$<9)d8VJ1f%Fj1>FKn^DH.>8AnO7+ujt%6&[0(NeUnu
%A23Zp!Y[DmJp/jXIY;mAqOM%\+BY%EnE)Z!S0B*`4Lh$-d^1Wg-$Oon!([,G1^?YaFXZlg*Kn2sj'N)G2L3%P/7Fo;;^_qVhiY>@
%0Fc(:C<t:L.27BElJTF69]l5kr.:NY/=TlqB;Sqqr*+oUV^>-d!oEblKr@#!/4=FBj6YBm\J.8%J\gd]cu$#4*C\71J6F;HY]0mi
%G]2R%HC3X(AL3Le\$r>=rqA52cfY)gB"%H%0@f2ql8S*)kK9k$Y)lkN):jHHjQ;tX[sMNo=hkFY(@-s!"#Gl1(oqqKGL#)Yl"9gP
%N`/f$O_u.tZg_n4?HE]^<_r^CCmq'Z#1,aJbeh!HHtB"&i>!A&Y<M)Ye8N'ka-1`uo_2^'.fQrVWt1SS6ORCaR[hKP`@,^?d=QsY
%5.Kr#=6t2HKt\3P?9s$obcsb\&=f2%(,jpJJ/Y*.,WA!e&5QKT6lgcgc,!ZX>d8Og82kVhhieB8o4>LD=U3K\a_?+&-W%rf`I=j1
%3iUiH'8fPNkOP7!?euW[q]D:(<-DTPd&FI]o:+Huk\d*_.[ec9BqbZb&@ftZ??^P!.!NZaCQ97hX`Ilq`a4A05)p#@7!$$E#A>f[
%4/TVOjSS^mU[!Kekg(50'K18-If[.^1ae8hDWq'VD9VO$!%,!p]XOad<[BLYO`9b&\\k(B!A_&[!RCDV;n<Z"dQiuX)O\7AP`"TJ
%,?LK)`Hq(KauW[1[QC+SaThjnUqF>,$k6*F4']5\-&g/0Ku_C9,)NYNAhsh\qD7:@>Ba`n+:IC<p6Wi\82T]g?S(@Wb=69kM?=(L
%[_5*;$ADZHXhH#5LRJP+?YcO,#g(d@=\@6b;JR(@Go^Z1U:F7GlVQmpE13HQ:IiYhL"A7poVf0U9Gpu:ZWl>@j?@.ja6^h0)dNQ\
%ACN;L-aU`DjKp-^%\Pgd`1TBMi7F_>9&,2pP8AqJ!M18l1G<6[q$Je!T6<`EB68Xc)peto5R6cb]Pu=RJC\+;CnQX.k`30"@],<<
%N?9"`OS:(5Vm0Yg.s"#pHQ(T/)?sp29]$-QD1j$T\TOcQ977Oq_;KOK)?6u'ard<I0I&JS.e-@)n:BY-@1p5Z]/;.[LA<`)l+lte
%DH!P.dsW+X6dqG&%TR.^jqUK`P1UWGn)e\rqF5m'.fMHok</EU3]jlZ&+s*a&?EaT38(5s_3>=$8tFBN8HF89>dmQV6Z?Z'qeV_e
%*VG,$m3Dd+6*jmP?UT$Mgg7su:e(t14AL&E:)C@jFkD\6hK$e$D`31=kIXS=nN>5YdOq&hj]#[mEXo^"Do#Kpg,0HS*la/MpsEY.
%iC-hNmXn+7.$f']$L+$kTO;m7a,f]r@<DHchjA7!kGp$A2+lD4s.2X2E+FIbB?k`"VtA6EU&`8@``0^e:TIFO>`(R,ps(NjlX0*>
%^gDjekaeA`2m30`I<2Eg@r)1J0rkd$#b1O):-ER6ANsESE!&OV9qpo4::id=^ZHl/XVi&/6U6<%?Z,)_7_YC4Fcg5]?=]-$:0D4B
%E]TZrH%+C>+)5?>S?U;a>\%Xhgbf7nRS:?3Usq,,SC@,3ZSP)\d%%Jgc5\mjBmS?uc:%s3p=d8J&4)*^EnRY[bA>0cq!r?kmRu9A
%,uX!TlUrDqi!_fH?(73=pKlL%V+[NNQdhhANT]Q0@5\$L[Ndg(plNfb3:d&8o-)m(Jq_Pk'ZUS7#o5!oHN;<u"8-\h*qZ83*7<+R
%9K@*67^N<H.liI`c[4*]_IgKhCIU/AL5r2'qu]\(k@=TMB8/&mN81#<AT2I$T+Oj\/!S)LL'a4Hm-NabY(ikEO%+"%>s**hNP$C*
%B"S$2^t;d)r`M>)Q]YM?S<B2@Gg]4OZa9-;V/rpA3n\Vni68_B]H*B(&LK44cVi<*iZ@BFcZHMde'fW+cn@S,0U?>k>GUhWUt$-D
%J%F!6/00H:Eq#jMNC(A[+D5+qI%]20C'>D64dG33[d;fE@Fkpb#b91Z)Z8]?=NYWJC#R6W#(%@+2Nukl:X2/5+o)Yp5+6d]GlNiL
%5+6eJjr^2n'=N`MR=-pbHq)^P2Z'E='OEKjB^-IDo2!XqRW&r`r^UU.T5gnmqi'Je%^[6(BAjJl8KDH#AeU0?Zb[Ldec0U[$cZR)
%M/!6TlKbYV1F1SQ0Ic689Q=9gRf\<P4YpZu-@W.u/\7d7!FQ]D5j`9*c1;PbcKspc?8,3([V48GMuc'tR?A(LcAC@:nF=DQ2\c[D
%!W\Ht@g[N.0KPb.RYNW,@7:oe"i4*@0q!Icca__JM1:W&1X!>M@aDqk188Dh%bi&s$lVrL]0=HIqqQ2EJc3:3K0gf9(I.Ha)gr%*
%iJ`htcS1R>,e<\@a:5jL\+p/>NmsP.J6d`EYAUu>iSt;f2,FE/825TUfA,.$N'_Es0sLPZE6H_eJM57&%_FO2Cq\a8eTIusU1N[e
%:@@89d[/#HdmEAY\b6Bmch#sq$D_;eC1W3_gGP@+$:BSES.:=8.Skh[Qjul?C1iP;g-=YS&0inRADbEjNX-]81tsWVCXU%=Ms.ru
%k99_\Y:A\Y;b.$,.sl[V5f69R2BD_)d=mq'l46r4/.m77;?o"^TcpVTiZ7(!RqLqMB=]/d*GiXJqPOBNfPMHKmh3WY#rcjoV@(5D
%%RV1cK+"Yb!!DBiV.B\SW3$K?ldAP<`QRj((`j\"6)1qUeZ5u0]U'+]&;e^(=Go:u2k``\"N+e8I@Z8s3$\J@)u;B.<tI8BQN@T/
%1ZEGu!FU^1iXEIA;A^Gq1ZD3Dg2&<j_*_3@KQLMB=tW,R!9`?V_]X(u;fSWiQAs)._$HH_Fga(@T<]YG?AHnqG3t@B\81k?5&iY5
%QRHgAg:4e.#TtRoH"@lT"EsO^EX?d=Fg$5^\Qj`+R[:O++NaaV2lCqLQZRi<1p:85fp)X5cWMUtK2)XLU/(J?";%JLe;3()?.oUo
%=@o,@,<h.u[K(!jB#LUfjH1*b494A]-1)qrIu6[GcS'N^9QF$G7sK[\/kN<iU%o7HcdP&'Hb'o;.:ib5`ujN.#DJlqVY$=l!gAPc
%]\+.Z6r`<4n&5oUV,<L]Z__W3L"k34NErLP$Ir_h#A&Vsn3"e"nNXBS9JmPdB*`t&j$,ei"*X;a0P+0%n7TteKne6s[U@8&r;!aq
%:i2BGJ"&uVZP?WVe<I#/IDWQf\qp#<s2'?%aPIBR$\m-%>kkoH3T`Qsi%Lu%'E//d]l;kpBAAC]V?3)8<_NVp)%,51-!3=VLk"U-
%?Yj56AR<#S/_^YaU&edR<.Xu<_Sg93@IK3]rp"$_%(@LoDI2/3o5`%Li8>Id<Zjo+/-PT;+KpA:Q)a%D(@LDbK4Klm]*0Qh_TLAu
%q<Xg-(aE55K5\RZ)g?R/eD<j;M>"(0gLH7,3Z[GZbSEB%d.Brg_7d5a5n\DJbA5r\S?4ak9""dSl1!<WL3Obcde<EiOfM:V&BZK;
%"X`io&*!g`o/DV8I(@Zg'K0k<PP]ChAWl$Ogo)-%Ik=mOjC&!II.Wd=NP'\dB7K`SYQj\NaM@#SV]a')&%n6Fj6J?K"S6L1:hP?/
%gH.OD^&(4@e+Xk)s7#IYCg#rUgCP=KpR<n\LUZQ:V.]'af1(rrm\t#=#k8d77;YE4K^e/O=n'nuKYtMZrjtOciimlWR2'Z1[/s%`
%\g@=fA:N\FF2"3;D:`*jV;8+_S'^[RjHcZ?]&*@lk(iBS)jFM4-s3uWhYf@NKKkh@>G3,Q"ZO+12R^IRW96&8=d="]KXBSp*3?Aa
%TfQI)[9s9)@&;FYI_a#BC=%ab;R/$BU==&]<F*__QIM*FY:o)<E$>>,=.-YIJK<ZO()g$=OH9sq\&B^VHX]^Ri0?O7/6F7/l>1_=
%(j>rtiCsMmYSttXN,?!?=7dAOTWp6bHMi=T9tDfLBW"#(ftu/$]f5\QfFX^(_1U@u7i+gq[SnBqi!NqX"-@4<G(di!P;T#)iJ`Fm
%_-JV%!VqHQ/%(9M03<o)_GCn<1'+m-cJ0rqV>hL%1>tbLA;C@5&VIQA=Aj7+SknNbKBqZ\prso;FI=CYlg^i;;cJtWcT\fU*EL[9
%Dho:Dksi*dNWaFQBJZOD#B7u'_n8*RZWt@Z&`Uj2LscYC+(fPWBQ6m)fC&sT$.2I>P7OeMjtEfQ0!Y:oG;,ZY"7F>iN4.0["ompE
%nK'$Q.QO,U=_&qtlS.KM3ciA(T.=iC-&Bd+k]a@X&*4raE:rXr#unI#Hd=k!iX]S<PHh;BNU0_lREL)-3sV^'q"SNi8lTN?=Lg=0
%NML%<jrToJmboDg-Op[!W#=Dt92DEoqb@bh,cH,@Jmqct;%6'"_53-UhV`SMaTs3YI?t\9R8+i<GrN?7JtG."-a+=pm5Fjb`Y@$W
%`TRjd7^P'ZHqM:%lTpH\_ggq4-0(p'TtS]ib:$c9:;ILF0<?uLZ[n8gL^#s-!ZiT%]u(YSn*A=n#pn<XlGN*-A&oFkj/Be7';'l-
%@0^RC+>(05P$*$gS1@VH.*J.IaV;^[%i*:J#;=SW,nA8,@&qOfA[gS:_8DP*,u^jhQkM-SpDmXOf'3BCkp6%:%0,ZJE5B+g1M<!J
%m'e#tB2"Q;Cc_+(41\E&LZYt]';TdD_T<,?\lT@_9[Ga<A;e6HTj%2qCq=27IqNEQVes#5?GA58@q7bC4d6D1/;6rV=)^kucXbr.
%,S)CXlkBljOG@9#_]42hs30/a?NX5r3>;Rp.J+!Z:;$Hs-p8Ih6%FEho/iHHdCNb1QPM.`%"XUMjs!juJj1p)N?=On)#1>!/tc!Z
%,Fj??%<0JV4bsshCsi5RVj?gEN)O^uSpMc71ZeVRM`_6ko<a/GQ2c5R1;C&bn#(X,ba7QTo9/NphH-ObDK<4=^/6BMcj;D(>6)8;
%(g=m[)f(PZmjuQT'+<#8IW?3s-@UIVJ%X*A#7)W#+o8toJDp@\<oji'if>LNZ"(;2Jt+9276:^57_t>"U)ek'>/?H6U)h/=B?Q\u
%=0uJI+IW)2<4I`E3lBI&:V=JpaHs[9rnoMbP2'*u?/R%'b&'#a:<@Z*9d^u#6=>EoJ%@aO!&M%l-;`SUq,=nkbg*4+hjSuf4\E._
%M0u%dkI5&1Nr^6EP-*E#V1^M,5f8K'#,DV-j1Y6GOlMN,92>9*_a!b`cbS>G)XnR`)pNVKK['+;S5+Q_1^5t3bV<^:fP+oRpo;X.
%BQfec'5fU%\t]R5ga,%NkhL<@BI@`\5rqOq.b%sD9]07j?46]%FQh\*5T@s!*Stc[JF;>`JEQ?VM81i&:5;-p7A,;5@nB.oj8uPJ
%4f<4:o3!Yq%XRgse<hD%:u'W51L.1*DL#hBec^a(<+77e!)2rW@snXlFDe0@!%*Cp*Cb7R@qDS>i(c#AA0?;(#6=GY#uC?/C`qq(
%:KDS/4-5jcC['*6-n^L*@42D][_Ps-Q>!2!o3-?ZP+[?#3J-e3]hI).qGM%H'2A4[e:t>X-ZB(S&cf"QbJTur(Zg2nCU:\oJ&B[t
%+3<G\js%FrmUo,B2F_OmW3)1#c"1_q\gmd];0qYj,XgsInf6/uqF_O:8tog;]6t])dZJL;1tcR;H^Om!;Go+Z3))'8G%]N6EmtCE
%d2'$HEl()m#<?NC:=D?;qHO%HE*E!D\npcKS'=!YZu>[f^bAsHZ\Bm-EHmTG6:uPprFup3UD#Ee!Q9,4eMh6](bTuuZ,L[q(R4Q[
%6>ZFt7f^X]kq25/6M#10ZUM.?V<u/4J-"73oVj@>)M60./dY`u*U)R<K]!!r&L^*tY7mWuB[ic@f*P<K\P\8_?7/-td&9A^Y7mWu
%Rke_Ub3O^/Dn'jjQ(jMp#uP__!Q?JKF[D;mNI$i[3[%,&`M=9G]M=7qjW1?i.BaDZjJ7<8Pk$jY8egJeMc/gK;.bK&WS&g37TqpW
%pfdcM*47TCisnbDBU5/nX7e4%eFc)+A](;Z05&pbjWJ8)="])SmXb3BL)is>`k^)3G'"lG+G50SZbo^Z<6"u7(4UNT?#?#lk;Ji<
%U8a>WlpLKlQ:Wb&abLK\r%16<dUetpf`VaGSqdp6__e2;-f8X*Hro1!,KE[6&2*h`'*NFM_A&<C_4R#Dfl7U@Ac`$&Qu.#PfWms@
%drO-JGDjoMgoQ"qY`Z`U'GlT/OphXcr(qHCa5u'dk/6!o\BbIWJqpt+rVUu#mpq$jGMl>Ng)mc%8[+h\VXnqAn2Eenr';6grt41=
%nDA375l)Z/?SDcb#f<L)iQWH&eCm1A%2F]-mnM:.gjHK$Dq5$eDaOprlTA6Pjd[K+?s<:jlaXb8qF'sAF7@>42Gs@UVu<)L#X]O0
%e+r=l&'"_M!i?mp$2B<i1h7^kACM]W"Ali=:XBmeO?W.Ylm%.V./4C6JmVqRB)o\W\dr3I%KC_W^OEu)^C2ArGW'qs&VffbGZb9H
%%7`QIJ'_itLVb+)5N4W'^dITQ(_)"NiIE<B%g3;6n1Y^QOJ)X\=p@.(+SR8u$%lheO5D%=TP&fUGRNF0=ItW3a#jcb5Y(e2gF2%N
%q0ZW5Tq?TI+;b4]D?qDAL-,nBE6(D^IKYJ"-Q3:ZR>4((0MDHL;:6*Y:XR'N'HdOl+bKWYbci:eLB-P+LXNGZLD'h0'Yl!$R#)pp
%\XPg2@6YkhkZo;LnIQkZ'e@\L-l<?M'(@"X$3<=64oS!fNuekHW#n.lH(lSJh$AJlo70+2_8CdN&.$,@85C?Fr4fXf>H9>;G2@S`
%q%*AAi&l6_\lG^N*AAfeOMhX]&41&2RW`*+G1+F,ahNnNbE,\=cJs#>rQqIor3iDa`_EosL=/?@pYJ_b&?;'ZJ86tqL5pTCrB7!1
%`qg5Oe/LQbNdCcd?V8WH35;AlF<]>%<3:U6CEC/]6_'2&)Poo9qH8VZV4jU1i;kS7(#(l@F5L3,2?oer[5BgD>C3N6&%;?5Y#j;f
%20dql]sjTB5m%nU`n/Z67tRU))cUKph[!4PQ\PE#aBADu_N?dW&*,kE`g6jrH`h"#N$5%hgMEkG6h"<\o6^-_6ZC)\Yab&\*>3T,
%ad`73&FVgX+/>kW*35F+R0Id>l<R62A--]Y.:'lnrVTup>-)A*fA6]J&h9>'5jD3)p.^3f2j_!_QA!dfaNNV%QE&K=&A6]h&C8As
%6\lNr6I7*V66.->[*gM"0=;/,]P-3C4-c$o+2=bX?^84rj*RaBrDmS6,s20@6`,62(qcp,%l(.es*iKS/Rbd5ot;I?Rds^==e\XG
%V7mFl<mP:)NB5;OdJCEGV[c&%>TR'L0,jf%FKqFA_emlS3]MCkj,[KJleqT$m^<q4KDDA1:$(h!5O3Y``q"Oq`hj5+m!!;Nc\JT.
%RJOH'E(gqIZD,Gp`-`!'DNnnR^gApg)aO_MBk>\?+@f&U@a+t?>\p(PB=9WcCjp=>`7_=*f@faEd;siMi(lCeH;%42%17FLC,W%T
%[;g5!C@#KhY1SraX'!H[C+:Lkn\l'@eZTOug%>p(`rJJg(EGip-`KEY*Wuqs=`e#n'teh>_2iet\Z,:,XaR,$0Jn(Ip`?('YsX.#
%(Q@J>o6o1u(J"4?J_e9nE_ccTF?I_]MLF?KNpa/9\7*2Y4g"uN3-oNa.?eQW'AX5D5"p:dFW,o]6[TC_IZXT>3Y>NW_56\:Z%O$9
%J#7QAG"m+0K9Qgm*Xp@8/!PUlZ/hT\N($kHVGI\X5'u20%.QqBjC[uWWt.#cp_mZXS6VV:3.nrGj$W+X$e*'Q]V-9sM.ra$:nIsV
%>',@^AZQhoEXjet4)Is;6jOr@S6:[#a*N:Gajg5M>N4)7[-`K5lAsDYRJlDn/G+ZS>C@TOe23KAgBbiOnNQP-obrM)6ZT>iMF"=k
%iLe-$I*r^":1p2f%FXD_3isL&B^Pj<X+SO1phdDcQY2]tK[ic;bN!@]<i].BHE6'LTDS,T'Mg2P8Y;69$F(7dlHQ,OW7GM((\RZM
%e]9B^rC'jJI6PC>0c"YIc?*Nad2lt'19?b\N.pZF23q0"[m+@N*%NoQg^mjdPD@'eHS`HGerI$!_hK;q6,Wk0LU!LE<t=^LY_5A\
%Y(KrD;5YCAaJ%up9&D?n-@EkgShU<Kb'b+22j=R7dJDM3II@3&YuF+UC)KLB\KBq[kA*,nNtkfTNRYeTB7+PI/lP`id'+Z31U'(A
%Fh$;Y]V0q6H@5Tor+?SCESlteebu)PWVlH#@j@G_[LnF"N8P6(rl`[:Dqm;6FD5<J#0i0'j#d,:4UkeL_tK$BIcEDmRH%P+Gp2:S
%oXeP>nOJ`3q7D'Uq_**Uf@n8S&$,)5b%(/NqMbPDAe4PZ@916%35.+kUj5Xa$0H0I5d+IHI&V"`]k_eX`BTZ1@uGg!CRE7/r2Xr4
%k?mH<hgLmsI>ICmVa.-O:UuunKs?^VAoDc,HX;<Ag9a!/nH"h6OEt:nR:0c;O396O=%:.`6UO;H>T_nV`XKu2fMa(1X(0h-%qJ3=
%4.&[g+0B)P'.[ObA!K(REQBBiN@n;`)g:qj#KM&Ve-V(f(al8e8fKgCmhM?0^kQDONqiLKFW;Vc:+S)M?j*Ph9^GU'^"=Ji\JcBl
%T5euCptegUZ=3D5l3r<ZHCb<ME1HP;hb]cRZ=8o(+NHdb#H7ogBilDjKcLeUK(&lAi5oF<&aTLLLT]iMZ6u]L0euIro7KD,bMAnf
%lIHeSa3&OII10r9WnRN/ETGbT0Bb*IO)60-"g,dWd`(YY8OljNc,6:RfU%[cM`V#T6\.-B''ZPI:9Qu-$`bFDbl5.%=0ksOHF)X1
%5kjeC3=[N4;4iN1)R5EGlHLUNdOk(P70>b@"*\_ApV,*Z)mK?"mFP^g8CauF^INeRnC(M$N0u&-%uK*Df#r\H1t:a6=I"lV,iM/M
%)"ac)j?AoWBmRX<+KHP1,[FpRak/%X#&;2hIXc7M/(U/ek/aLm%Wf=5r97:4s3n0#pX?>Fe!Q]@rV=5(p()ZQQqDf8)$n''=Kf"#
%X&dZ71Q?+OKA'roc*3l=HrjTQIbX5T$t0L(jl/"."Cq;3d%-eYTf\hLL,>6MA#R/^CbWH9;kb=G,,5d\I.m$:f=JcD%Fg8ofW>#]
%gFN=%-^]C4WpPmCliK2P+Ut:-@(9X:`PUrHBc?iK>ln'GS>*:\XBrkT)16tA[6b=`P?YSTeQ&_]dun/PN$TAmNq,C'l("+k:='Jf
%>A9O@*Mrl'X"do'`ird4iMesNHSP;!LSB<4!4_H$)A`\E'q@O.=$2CdL=o`[14bJs_GG@s<iKF[Aj#%>IEu$8@Mce?&:2OurZoFd
%Q"+`72e$?:TH5r7fP9rP+\4hZ`YI?@cU>uFf/(uh8ln[KWG-C$E,;=rd;6;gFV`6*X7&Ca3SUYZSiGF:AV(D%2oeL1d0cAWbf+gg
%FDMBSnNg.`aq)k3#jsO>DJ^rcDss]Xd4R4$@C@opB)gMJX4aB^^"Md%TPJ@BMC/G%Ue`1/L"L*"ok'A7l!(CRWs4%>)JEsE`4aRN
%kD&$#s+Oat(cJ3$`oR36Ics6l$`UBOm20I;EQ<`4#&u,9TOX1fNR4%kFXZmfX8))JecD7RCi6M9_CD#o`3CBI31IHSS]Z6Bc"0M`
%;$C"lT@un$X2ifM9s_So0g,.7J,90Br!WIK^H^@aoFlDRA(d$T^$XJFU,U+H%a\?d+?+gu^fk]n2iLQO1O3]%[B\j[R1Ifb"_P%t
%3jj/L]4pR1%TT'[<:#M5`?F$UT59tJ`c(77d0D)JSQ?oR\,8$?e[O-r^P&j10X'^g2?5@?k/_`(l<5Yim*rZQ!9ZiPBM&K%,N&T!
%gctT4Z(AhAL/-dIL*m49pXX<Mp&L"%F<(bNCk;YOSK(?^Ho)koHg9+Vj:?oV$KT&.dS@(GDLURj)8-TV2Ms]6H!%>pa'15G)hnAm
%-RHcI^><%e$lRF.qCq3>DSYFG];"6HS'#L@?(5blc*kQma(QM1a(*6KdokjFcdfapi[mb+hfuq$[&27M(5W(;(=QRh718]#be;6p
%0Wb';&"SsYX3kh:Y%qZRA^*2EIV:cDHE"!N^2*>$=E+8]]CPRjY5CkP*,<A$UOQ_#!_^c!6YT;cX[>[j"DCmYPrb"*D?QK4P30fJ
%E'_IRgfqG.j"&@8A,%mW"e3c;e<j>u8!dY([0RU*c38i%E&?%i+WtoTH46m6Km-2DdU@#Xa0p8D@nT@pY";hE+BiDR3=LSAL2Q10
%=fblB/=9.k4X<PtpgP\d/=?Ac=Zb?fpT`Z8?N)[tEbIJ@.$8Lo4(Mu$.sj#A+DSp%V:LY""/-$*r)nj/k_]SbVnp's'^UV+OR^:E
%ST%2/`TYt$aU3/rSVLpsMKFht=:oG]3Q<2\JQjU)%!!@j-Z:g^^Jg$/Zq6>ENXFoCp&IZoX0oGs&MO%'m&cWY@Pnm0Z[Zp$Q[:U/
%Dt\NMkrua/b``B4i$Y@u?L.fcl8.\=<%N:cU59s&9f2WI!5?k:s7apYbJ&#H!ZfPrHCnIU4-gXkAKLKmAS]<`di'm4@TTiU4l")e
%Z+]:n6VdRN;h+WL@Jp$!bQ%K1*%PD1E/>7bC])O3W])meN)^3tHe?]=D<H'-Ec:.bB?Jik2Y-=*rF;r,^I!-nre9e<Bb-QpTTSik
%G%&$^bW`P3Db,l26Dt[.RfsUG]MhMUnu-<;H,L"=I8MW>`egHNH*"B_ThT5]<9:XS6p8,q>eUWc!=0]V>5+SeoMp>sEO1NA1qMDf
%65:NrKhr".h5U6#6cYd?D9^H-kP6Pf$/Kmm&cIO.en7#_V=Y`GI?H;R8HH=QSKrFkM9\i_8P-KYYuD:)DGiG!T1l65)N&[dR>P(+
%0\0>*[T_ZB+l03s4kq@#KeJsqfIL8g6G[<\GqGH]2F-,**qs]Q._anQ4]=u)T[PjEGGV]#B<$(<8sO&bk)(cs(ZYF?qGGZ+a[O/H
%eO7L"j%G]6eXI,Ye`/*Bqm\t5kNG:A-\8-!lu\bT19!F%Bl`:8b"X7`%=@W=HE-11578L>Nqql!H$=nQjiOW:`nVl%<]4I))hdq2
%FC.3gO#dE[T)8^gObXlmYe4EP,?VYjqsq/Uf7*(]H.U.S2c"OY#MceY;mH.P>4M.`+T+TX:oB+Sr(YH*mgkD2/dAZ'jXV.G"g4,@
%:fpo7FE$doWe^WW4KoZ879ifN2$,BM=1]5/fBP=DBbe7o;HU!XihGGnV!T8A?;S*VgW,&MiEUrQ:*S?e21>JTpO"G2'o24bHKb2Q
%h7eC@!o!q;#_4i]XOd<_EXNlaWOMuAW)ID(=LuQmq_8b)kddi!X)F.ul-p^lmf^ui:P3V;7bY0)krWV7RIdR>HB"bq)@BXP@`I6#
%VS1V&f8[mi'j.%m8r@``6djiH3*0'hJr]:A3e'R1\kV*`YPWA@YNs[A$Es8VLe;V53/.]8.'Y1laG2&6=c?6LRKLBW:SP0_,J\(!
%O,k;%R,s0VP'^$)a#36f<e5A!dY!iFJe\ek0lAQ,=05Eq7_#(d2Goi1K#&Ju]3?]nHq<.,2..9dV<_^`S!Jb+K,qpF0@E/T3I2#^
%9EaG[Q`-FC%U[,*-(!:cjMM#4_6&9"GhJVKG_^GqC/4:Mm>oX*#b[)%H[cO$#M78-0-H(ScPa)9Pk><$&Io)spPb[Sp$FcHWCg!&
%0Vqsg9%/Sn-5UFGdYh]uNBL"J.4(mX%FEWm%9[R`P$J?raF[OY.@.8kLZFkhRU$9=[$%7l`N%4.d=)B)r>\ic+(e3S!R"jcfHN0j
%V@!GK>KZj]RWOmu`"?TC9*$aMIlH\*_^nBMI@eD1/L8[Uk@[O_A/hU_>J.>FXMM?JgYuXq9h#"cQC>suQ;5C;cmm\^Rhj[,_-Q"4
%;]<J,/a+DTYS!sCAq5IQICJ0?'^S^]P.dlO/PYFr+D-rfR*?bu@\+9Offr/.)]a4;5YuLO/YE2[blheL5rq@S_ZF3LWCc<^\JnHp
%WP*+R^"9C`f;\U$f=t)@02m;AEVGoDY)5Zkf`#>$Rb6e`h)]Z=8n7AaUa*ni<k7Z]C+o($<4?M]4)gQEqAnuGIu!EVf4a#mX$_e7
%3)Y!]rkS@!QgVIbJ,FULpSOc'GMKH+kE-L,)X/rkD/'Chm_Ls\`\s)UIt6dX:=%Y6F:b[/38rjWmT&Dc3F&YY,L:sK41(Vj]^+t.
%OPmNtissjgnY5-#^gX+/5^Hu$=<Cfj!,qW5@*pY/S?'FUK\k1YeE$ese!hr;5^.AW]<[2L/mCl"Ym97(4,S#<!$kofC,Xq'H&ddO
%^u9-Fe%lp:=?%AgDm"He@aUIao8@*_<,j!?MPY&5TjqVm^,SeVnt"g>kki1>^,IR&rE3\R%Qh&X*eO`'Dbm!ciD+r2*1OF?Y%ea5
%Sa+IkHKKman%=LrBk09c9rruiAFkeU.UF(RK*AkCS=Ih;:0d)&E>fiO<o:/B<Du355g2\=Hu6j\Wiq`L&".k:cF/-S"@]9:4L]'E
%!-B"eh=[ELpQ7EB4QD((&EIP2ou.f>9hDF;*"=JbU#[,#j?mtaV&7.6V!$\]r<g.?*/JMs!33)iBImJQ)^(kUG8N[i(:[B78^oIZ
%kX$>r75j/.HWD-05)L./I<hLm&Jlm8(3leh;V45s7TYOX3!."aM5J4@4'LTq]XB%^o:cAaQS,>'RmDB]$=kdoae'-S>i_I#S!6[o
%M.50IJZFJphUsjVXltl"?fW[TTSnL7'TP2*ND6]o,e0O$)RNqKJXKLc"^;;X5,8!D(P$=<k^oV>#)B3iXu290Q_MGR4B#UU$.c\9
%*,t/Ap2?LE/7CRMR145YD?sY`+KVr9LVlq2cg4URVAB^<.TL^6"af8[M<]P]lY$Hp/R5`Lc,KOsp`+Y;8ji^e2.I?G.X$K9cdkl#
%cs>kajM<@(SY)b>4Um<Ah`:`r3=$RN/@O9,emMq<d0%V#ea?bb[-IICesZ\m?oDIT0PRh8jZIYd+/2D4M0Xb42M\Cs08BgaVUoo%
%a^8c9Xe"B=G`p]+KsChj*dUkU`R66uH/uE=7'AMC.Kg,eZ_<Q?SsLJjVj/1A*I9l."M1V$laCLILhG&<Mdmq@0D3qbIU=V<>6__m
%InlQJ;o/"g+1_up12erX/r-<TBO\kk[T-<9#>j32SVRH)<=oBO9gI%#oR^n*1VnBm0LR<,%\Y.%>o,sDn^X2AZ&2i$,K/ZYqf+T4
%;5A!"0!t[njT);jE6Vrr"SW_!&/gg"lm=V@\lcA\r0lq0Ur7"VJQI*K2_W-b\7"8XU@(Qs_WaO7(;!X:MB<.\>JJ2qB<4Jn5q<KM
%FPq8QgZQdOP*EJN_,u`Ub_bZd]1F<=*q>-oQZ(L:UJqjV)]Eg'Le;^QlF[:nb-nl*KBH[iAHD%:%X&A8/u;dn[8o0nm'.VB_i*rC
%)6/&YJQQs"]NiFQ(L<+QgO"Y"Dp_R(/Q65l8WfM,gb+_@]Y<1s]qS1N5Y(KDlI7a3"Sim8[9l:sXe\E;'rM!^FpHX%OMco_BH^+a
%N6s5;1io'[kT!Hj5#[C`l;(I#qP[iYCQH\R:Y*M_=!R=hd_)hMn&uII#-hJaFq:J;*mh#VS57Ca$7"=l/q*K:T3d(s`Amh'F+Bf/
%(?Q*FX.KQfSbY%.0E$8=b33A&3+T.322Vj@&9J:E'd3lOYt7<Jqm@T=<"m-#=#%o<)FIAR$kAp(I5nEF1#6O48No)3<(OIYpsmpa
%S7h&(<U/PtHRpW`e;7[iA.L\KW-%F8pJ7(BG[$E,>LNaBOUq@d3TV=oQ0=6ZfS%_]kem[YOU9eh$E7Nt&Hb,n[3?%F5OlHu?-iRc
%*%UAFck1%`pp_+7F+j.X,Um*3P3/&DGA7:.]%B#TJF"DoTf41)q@6));j3MuQuh?e<fA1*9aEbG&Hi@P"$pS4*(nVmIF:a[U"N?\
%?9%4bQ1p"`aoMV+je7u//Mq18j1k_Pp#VMq@KZ\B'f)/\bM+G?+!I$:A[+X30ljjm.<S!!kAQ:3WqM.:@o"aAF>FKOZrsZW=Uo2B
%d)8#UFkD7$+4SO0mD5dQ/<eUgZm2`K,8;8:]tu(Qb=rX9?Hs\#`$LqL&EZ@cU@9Z,"H_`FFkX5Yf-&7=a2i=T3eXo$6\`sChC(X[
%APASVV-B/tI9_:?i%GDCc'&HjMN_d<<&hO^@/_0i7_tFihSGH*nqGbgUW)qoKIc;\**1c+hO4r2JC8I/97"`0!tfpC,mjOj?9rnm
%,geI"lr>0?N3)\%f&W\r2p+D@eOrrhN3P7P_VR2Ob<ST*ng5h]ia?tNcrA8!q7Fk?Fn&QSkgR?CBQb-.IPVBYXTcn0K1-P3c:6I;
%D9a6/C,!ghgaS>qQVf9`k(UeuN4gZ<^O%kP)a.^CiAX5!R_p9!XC@tCLL/00Um$nJKHG';#1mR568\fNS^NJ'RAX33VFTb[doK9X
%'PJP[>`c3dVdS$P>s/^&<8CsG7oM'$/O9l)5K5]<$t".l52OQ>O.$$m[/MiT,9AMchm)FS"`lo2dMOD5WqUPVr<]C?FK*c4$9SO'
%^B'uQ,)k#fAKbC1hO!O?r7'_prg'cD]YGZR4<.=MGZ=4&N&iW+f%lF`]9a%P9jht*$+-;<E+=:d_B$'O?OXm=8$4e[@U1Kn+S=pW
%WZ8RUd!3`o-5ks/93k6OpX#_D7Ku1d40?.JR39'h`kiB."jZg-%=A58>gucRO@_9^_]E))VkS#NhP8.fD&1#Q8]C6.EbGatgF7-b
%(\ZWHM<>]D#.XjQE/G:r5.B+lL%b*GLhg6g$TCHam&R5TdeZ]M?gaV6iZ0\eDGN@(((!'FI"o8"b6OtAYk"l6<[NPGU+_T]gsD2M
%9,2gkB5N]]?TYT$(qo1tCRR(rpTirT##Y.=&GPt<+Dgk:pG`1cjqn)Y`?t)J@IO\F.okuF$?Il(^8eC\3&+e!H$*,I5P[X/e`al*
%RJ:/Wd57`[1TE<<Acf&DZ`At*&&a>A-=cpZPGmj*X*4J2P[*?h]%iAhqHB!s\Iu)[$M.!EZ'"e,5ih?V'jVisU%U[U*PJbmFpJG)
%0fWq!_EOjd=R=3(_cjbjK,\ceN,t41jBtT#1K0;t`.gZnqGe_pc0.d&U:C&:mtsP,"0?[gDdX;@m8dBVgP:_SPS<gU<gc'BIC.7H
%+P.X+cUqY4%m0G>;$C+iem/TqVb]DK0r`GAXeSkTXDoF+P0.F2e+C]B0n$L6e&"5/YSJ(Z4*`AkP*c4]OW%O!-=DS3H4NojDt?^:
%<;@+MiQ,'gO;hhrj'q\(526jjn4(*]J-U;Z^!*<l1:/9LlaT!2F-?nj.3R7-IY<q2'a)=2M*c\29@j03Y(EssHj(oFRT+S1TQ.OV
%^bm-M#lYs;V<G''V2dfEnEs<nN!'gd_)?A=OMW[qX"$\rhq$WsI;d;+p2]j8BSQ>G6cL_h)JOC4N-Fng2fe-JTN4:r)IDIN!FAKS
%"@_Ca[6p0\Wim?\!9&hcr@q[udoo6Z7/p`'aXT2tX,kAOT-#iA[U:t5+=/NGmWN,PDFYTL&j"R'^)-)jiWHD7T!JNI>.#]4K<8+J
%9+MHnEJ8:lFfEW1<.O>a)4WeUR*FCP/chQb1>+hE_P-WKMikm-bOXGWZr3Mh.llPYHeh/uLGd!^N1=K#$ruMP&98iQ`5)M_&R7;#
%9X\R`80B7WkH`?#c!m7k:7K2O2hIWAVBI?2CR3T5XK0Mg@J<!/\TtJE'R)le?2gM[72\?1M-OJ*^/!PrGMkE$qs/"Z'EOm0]E?+S
%TR6CJ,fM(fk806S+9q)o"H\O=+HAfs[TEIB"l)'Z-=<cRdSRmb$W\B(Esu]t$B3ij&?Uf!*bB%9f%^nP`t4+KM*'r2*8;d@aZgm*
%Z-m=ASj'aGQt\`@`T/)2TUQXn!>(%(l%,Y14Ctfd\&n+_>"p\KmH38B`I8,PS@RS-?(PC`jbflp&MB;01)&J;&1h_(E;[lQa3*q3
%:qR1fr!>s$'%<X:;)%pOX(,N<EgQR#5T^t^rSaXWJ&J&b$nW3ppkDREluA&;*9ZPiT%[W&1UR)JBiXr%$sj#(972)8(q'__cZG5g
%/GlNtB9WilZ0>L3"[?W*kq>M7hn%<KC]P%@)25bT,^`4>8TX_h%_9]]b$8-7Ije_Cmk+l4>Z7H3ah0B?;`j!^Zj4Z33As=KmKgKO
%-GkXqG-@q`ZA.5;GY62:F:Tbe2E.j6;t0i:57^.,3h0$)i>NJ3J@n2LaEnO&Y+(/Kq>o[D47](qGM_0f<.+S>M_?4@_iA8]<B`\)
%C9f;Dd6/%I7SUg,2348Q$"N$R3tU8&En"hRD-rg/8C@EkE1?kmi`^\[m8b4KK@I".`AXM+';&@9)4,(2+99I42e3))`T5i6&;t=[
%8g#:IPc29_6\4);ESpEhYE3L*Y!*C'5ToL[)-u>L_p0>Tjr8R1)RE.i%T=iD!LX/C1;"0ShhKpt:OZ8rK*q8Co*`Y:Hm!Ma!MYSp
%pQCE@FX)\>Qm7#NFbT;eR0($Z8dgLPdbE6k9b1c4m)9r]f);_QqRS;0YnV!56U)Wb;cjZ0>?-Fe5Rs3T2QtmL(5a$O.Jb=N4!4dS
%e&:<idrd<s'l/2:(5ou-dlq2*CoQ-1O?m&@Z_m$[Ko%!6X09fEUeK[[%Er67oAVNDj7,Pi&5M-VZXT'c.6ub'-RP@"8cWb>D%Rt9
%D\\c0V70p3/$>b>G6,cJNV4WH$5K-@b.<R^jl=BCk3h4`qfk/ofFRN2'TEP'0qZ-_!WaX=k5:;\d7P.Iln9W;H6G`RnZ5i_.q9aQ
%2Eoe!$_1#AbX?bW#`-4Y$m_'$;.Yd8M"tH7S]/mAY'l7tkQ5O&bL8YGEg<<!;(3;:422qSN"_.1C*?0,++>r3]RMYkXEfb!AoD2+
%=$D)GA$2$S]OUer:!!;NN$i7q+(%:t$[5tq"3`XRjG?BRmJ^SF]Cf_QruR&*:TF`+k)g,FFCSs[#NFuUS%5iF[YjU$q=[/^U`,=9
%@m$JpJ=)A1Jpr6UiB+m[!t_ZVZMqtJ:#dl7QLe;RBE=39=Fb81_5+T%PmJ#$AX;S-+EJUW6"s*>+YF_^%SouD!laiWjU"Hn-<mr&
%a"gB!r79(leA@DY-/.5g>4N[?ca=4h)pXYs@In\rHacCmgSQiL7+lU-U06W9aheO0gNkhIjfoj:M;!knZ#kIaed?d,F%E]ue:u2,
%c!'_rYlM:Ua2Q?E9\1R*L\rGi#B),Z!WqEs]H]2V$YaYu^4A_!qY::Gn^0Ca*7;#O7G^s&dou^=,:T)(nfVF+X:X;9SB'=hI-kdp
%)*9T&p0s'U=mV]]H;-GmFn^qJ6MGb<V&7@d!@N[_E[:)%/N.Wlj&SSt'V-R4q.fbLEdY>tq#gsV<1-KG>ZLVDT+OK1Fqp.K`'(WG
%/:=M;U6Np*-Jo*ilXs+sPuaM09_2Iks8MeZY&.=;F(i\kY^!O@oG#H\k=.>c^Yc2T6TL1;j#eM7ca\?B3j7aM%;uZZXkofe"7Z+e
%JPm#%kK*)_SH@V^o,34U&p!T[q%*(EiFJ.d#JKDF+]aPL<.,B2qMb$C[LlBObpdp0XWm[-GREEDZeNrg8DM!*X?YDr%EeOU18sm8
%jQP'\XI"0/,!-6;cTrT6L`mm:!s9V\8G,"Nfu8T79t-q9]hFnlV<DJo6?GW#hTY9Q@1t>mjT)`UROs?s364;>KbTKXm<8]<eF4Z'
%*+Vb($r;aGgsK7Z:TB>f7sn.)%B)Ll:#anfY?/7tW&b/gm>&T#8im>FMBk4AR%77Ha*F%p'$WW9VC+fYZ`9ZWqP+5+Zi(I<#nC3T
%8DpDf.kQUhMf?r5\o+DSl:l;1qAuA"1LHe[NN[u5j&_;%?SjXCV9DlO;^ogLRPJPj1/fG]pT_BoH?b:"^-a^rJ%?HLDNfX-[X3iL
%<q-GAZNhZcg/cd=n\@[@U@"(6o1hr\>VRg^FF0Np`U(L[VC^?q>5/9o,Kt=q:q!5_FR,%7'2<'u9;)t91r.I'S([;u_ZZZ!m.NFE
%!?r7d0?^TC\93/G+DJ]g8@;56o=#D?Bihtd/Od6>k7CisN220+,Ou8Jl>B&U&;[<!CHm`B2;*7E83rNP;.\l!L>LSlaXZ(gM3_c`
%E^&d1#2E.Jlq[dQInZ>U[tbuO9[(,8`k,CNF_VFo67DD9J)Yp2rYqr_^(U9knjT-h=i9ntZbp[iD]n8&(j.7VS<]?#FWj2A6We8Y
%RJ.Y6aC]Gu@C,r:TT+>tURh[&Yu>OD2#E!AV]IPCqEonDai,G(L%qPYb@6Kk.>`jLBl[Vt1QA[Q95I/IkZr1[[G+N'jt]6J0PkH8
%g#6U_=*(Vf4\3.V,149oXJ+I4aP$+O5\)5r7JHW^M*&`eXHDQ=rbd'5GHUJJ#03W'(S4P4HS0N@hO!K8&9PO4O.iFik@4-+NW,/E
%G^(#lg`O=3f@LH-_A[oK\Ss>V!/lcE!_c<A(S]7ojLsXsLRr2s>mVCm4"i(pY47(1\m7Wura,G;p`%EpMVsUZa.4s*o['6ek/Y2H
%]VHRQ:79A5=:]!0+aOg4<po;XSmq;D&PN7`"uMom\uUpE0pA)XiPl?S:SA6(;8Z]3`KiWfd2PIE@Z<(`2d]h-/)Z2eH$-6nD8+-R
%]NL,HK_ru!(>rc4dX&#nQZ%\,`11:FSSDE-f+tE(hq$Zp3CcO7NS(jR[=(&KcQAs)lh[1n7K+Lgnh[o:p-Haq5!O9Qp@5H4"&[cQ
%/GOoU"hhM,nj\Fmnh=g=!/+9?[7f3;C`NN3=H-cAqGeN.%G(bDk2_N!9g5&V:/h?JYO0_$Z=?CNFh)&@h5=bC;!H*I+COg]&W3;V
%O>IN4<*gKDQrB+Z\RMO/:OodtCbT+48,J1VmqHo1Z,Khsd.Q>0ee`Zm1@WN(qaV7aN%",;WRV'+SX-k%Q""K$,)D54n>N,F->Yh+
%H;;kf;+`RH&1<?P+Ju)"TN8=5[:E$;p.OJ'7s%^U[rB3X:hIeGaNtp;ME[SZ!?PTI;k\+/&Kpoi8=+];3pU5R]%$t<PB+^`N[r#*
%%LUF)L0M\rRuUFg0#pLp'K[jHI]>)UJ'uKY75ddpEF)JTR[(*!Mt-M@0bTEnDN3SPWEc!+Ym-KTB6G[`&HJ[r"VOCrVup%eR<+*A
%9QKU\\"__l)'dasT@r?(9DmX`<E8,X'I.qaKc&Xng9_!,BQWkC!rWBP73f(j5G,pc1a*2V`_&QMR:dck+r9T*MNR)meG`BZE,=*p
%PQ<_GX6dfcktA"KBFHT+7%#cVlo_io>7O-N\A"K58u-XD_D1O`V/2C.;it=/$tcj.nTGj1PdU[8&s2LUX-tDn8XO%\a4kZ#[u:(S
%Pp5Uo\p]q"+=Qs#N*$<,8?!Yk)GEj3,SZ3s]o!gb@3..Kgd.>)6(#j@W5[nuKs00o1g-&lbk+`\3:tQNYU_o8F:?V6Jn1@%Hq`r)
%g>L5_s12(<6s'T>K4s,>fN<@.a*i:*,(">j#r%ZpIT>)KiO#`m1=&^#O5Qq%E[29Mi,'2))1mAY-DspNU2LAP1Qf=u@=fdTSfo(2
%.^iGIe7G,Rq$e-V(G"IY=Nt>lVi&/RYI6?p1=C-P%WQU0Ct$nO3Rc)2/<.-0VjZc-dmjd$0kGd]m\%P@-#cIR>iqQNh);%*@]+?!
%4/KdsP%O%4U`#Y_a3'L9G>tW$s8?,LO4fr\q"_iV&sa35A\N[*.=8.(?R>3\9sDlBdjZg=6X[01'YPF6f-rb2[qabd:ZOk\EofNp
%MNnGX3,KRq$73>\,>]_rn=RTB0Y<_8K'LI%2-uWAoI(LC`GCc)fNJr'IC_UDQ>bm]>kV-KHBd"Afb<?B#0O@Ho!Bq%*S!i;_u@Qp
%"*$;qClL]2QIQi'!@jAcb#.0Fr#Ms,-9[PM$iJTNP+S(n6UXg=?7g3_ni1Q]0^#6;o_bdVQ_7q5jr`2]ZVYlRTA`/mlmYW(39m6/
%X*%=TSZ;j]^Y9W`:q"]hdc%Q+2@pHMgTWIo_Kdfq6c/*%DoED<E7u$J6ZGWf->)3;%kr[:b[PcM?Ftj&*6_Wl9qA-'C.We$g;WVD
%G]pH-hoL.T%BosU*41FgH%[],MqW@A+:r7-o(PHpcFd/h/<6VaAb%l%X1C)\/T0=Tq&V77oY!#L[BAY_]\RJ$%Ti!F2HTDaDQBZG
%8]XbI"O-TU/+mtsZ3WADhOYuSF+Q/FS5jc2n$Lb8U8DH[NY4'2ciCe`a@udfjq-:')JD.BhdqP:U6b+Ko<i%s(EjSnL9<?DJ]O9^
%S(e4U0JU_p$n<skD?-Q=6Q2[q&(;,kU#o8h+Pe2co(9OWf:C`XIT8W>ApK0$2lafB@21m&Ua:UB,TJZg_mDb=>*Yf=$@-hNQ*#B*
%>A!L5.Zm_4=bUCB*L3&QiV08G5(a-G>_&LR]5NmW`?([iA@ZgE`<eoNqMOf`;gn'@QH2gAT!fJX1Q2m?ljl]W!X[BahgLbN/M/Pd
%N&IH82R8hk?Lslqp*M[\;on*=k*i"^7cBf)<LL[&Ylb-_RVR,jpmfNOfC*nsrQAs69V)O'oAX6;%RhP;4u^R[*^dBuGKf%?>5ag[
%pKX35i%MSdl'14/1bdb2P/!s6pLaVD"lbCtJQjiJ\!oM4J3K`P(?VQNcNfitOQ,aTGfE):#WoAH>HP&?Ri2^5Kp,r.5@Btr>S1cp
%qp%sTg>SC6E0[?q7/)(14Y<0YCWYL1TWIrtK&Ed6Y?s9'Mp*,SG`=M%-Cb8^XN3A^I.ct[+ik)fQQ>p+`2dt0%tC%)I&J5pr3g';
%%WRIWaGLP?PIAQJnt?mS3iOq_6$+hBSM[2kokIfm-bk/kMY&N9bk%6=qr"o72e0&gI!fpF-J?,cr*oWdXIDJ"?-A<f+a#r)Mi)o,
%2*%jpN`\Q(`#DT+4$+PQ>o/VcY#/]^V2jb?dWHH%)/s$f124mP:4VgLf*EDhdLP)^EE7[`(4]@/o$$O[m?e$8Sf_$1-:f&2R7Ltf
%7kqR[Z)K!YY1J:,e2ehNB(NN>;@o=E^l'2d:&(jN\_?^>^BXrSILOpeJ5V09:DaWKGHm!P=EN*h=j2o)7*\^dj,UQBfLg7m/]ujG
%9[=V%MO/@1Cen5AnWrcQCc3S?3)(TI4F?@(EXbelFAM4s"-OR<J)^P:E&VF3&l][:X$:4BCj^'MZI:T+R(^P8+!BGHY!1:.ZPFD<
%A42rVDRS*WcGNQ1;KXn(YH-FPVXmO=K`M)28$aB[GOW;g$Z[H-L=<7:r%s803ihZohE\"dQ\1o\Zob)P:jP3Rk)H,Ln5csoJ%5N7
%Ds3*>LFbu^ZBBu"J#Ue#@nBOtdtL5!k',_M5RiFMFP!0.(I-pH'Ldm,Hk\WZHJ%7CqsPl\7%8#l848Xo!4d-3*GV=#Q:e<hkgJN`
%^(m^>nE2=VOq;7t6l.$`(;mq$#$.uK"J#m4:N9Rh2QMsGl!.D+K7(d2Jb+f>Z<Ql<FL\CtD9W&=I,!]=4(4"1fOG,)?3_TfagjAc
%#q`]Y"MOKN0'e?n^@bch&r7uO6U$FY&=>OkNY7#5YMV_lD*g!QfsW*t.;,5UqL$\6R>*QkbK4VS!C!#09d,^gDYETT[6J+shotu$
%0rS7,31O'=F.;c%[&4(VmU.O9#+>e84[1[*!XEA!g'bP7[2HUT$_S<_O,q$\pZcfbDo'u#'leN_T_C_RhPIrJ+A1Y@qq)_"<-P56
%GKmjVqAag3KC3)Q^bH\mQ9Q,9Y)(<=Xlh72E%X>jGte5J`6.:[qY!!JN7[$Jc[BJ.`E3bE_r!t/18#>"$+k,"!&2fA^S=he$aXX8
%:a5a41$q*.AZ<SPe[f<OmjCF\&_<FZif4<SV:m!*8brGbZ)_-U9"t*l3m%N`'AP\\!uO5Cqj?e1Sf-l`Rc&-h_/%3LX5>!+daB_A
%8g$=(Ku4]"1CT.6=eG!"4[\Skm2/#&I>IBbSOPHbRJUK)9`N`8<[b9,o-Bc@S4M*UkX0>X##Cf#+>?6nf/o^XSC<m];(gsG]mP8(
%IH]AbHU2k=Gn9,-,*@\^?M"kW8;NSa=LE5HLj1&/idMcP23iQn#DVHeFW`tD/-PT2LRk>f7:PS7Q'unO)d-&E\E"k0i>["V@Oq-P
%VDRaLY^tfIrFSr]!)-#t@2:W7\)15)-=qJNo(I,o9*>H^$RnZ$e5+OjST+\.^S*aNd1d:m$MUn2b^?W!SRj<Qf>=DdiBS,!AY;39
%]%bj+$\<*F%0)k0%o^8@nR+kEG^N:7,X-l48_f3V2!g%.^@F-8VDHG):("UE[KRkVQ^f!X/EXu7>Pj5hHXhk=K<WY_CgQe1Dp$Vu
%M1RoMLfQGB.cK'k0J!jR.57bS/F@SX=8*)Gq/(ia]C2u;m^`6<?a8:N(!^6[n29?@_-+SOr-YL(5e!)7?3lL[b:/0g/$m%.DQsJ'
%Hj4GT'2k+?0T>!^Y9#<_ZW,O,l&iPi#:Q.G-EP\4Ai15iSKA5i[;Pm@mA8m-$t"Q?g<jV?I`DP/`Q'>/n[qq^lLO8&"JX<5FT@eh
%ktpDLa]smMicgO6nq-Kj%(f/NO[C@8KLf<#T?RM/Oc\mc*7kjk0,3fHhT%r\BK6!"!KBc:r8'^uPWE/L6B=7[.(7d2FiK>UI(YT.
%?#8E>dYkb<]n82!aa=rG`+[p,E7V/:1^?9+o4!QsY/p9%p;=.V`J<,Bd!<=ch;4Fi!`,iD"ZVZ+!Fb,P)O\;n+C%Tf'o0T%atn+t
%00u](DX_UfNO+9kDohnZel,HW;"#bIV^8*bd)Fm_"?i'&i8(eU=6J6c^NoJe,T.KqdO$l/6O!NehrC!D*GP%UirZiYL-XgTN'X5>
%^41IWF9?0j2G&1L"^.2a<A=\n7`eZ@_?]oMiBfk7Mdi;3'l>s<>5Kek9`B_?p!sUIPWo:+glnCopG`Q"/67q+R$hML:siDZo_rK(
%)F;AS'4GpS*%.D==.lY8jLK0"QR4"f!J.1UE`RHL^NOAfKu@*IX4E\c-nA&[Dq$Mdd6b.A2-Fo$YnR8TJB\63jd$1fT@5OL<_+TC
%29.N@7B&0?et!fiQl:pqG<Tng.l3OU;Q4-Le90::S!Enpa=Q<udkNW#-^i#m$Y4b[g6l*SeF,tZY3=0]CWERF6d'JJ*egn`"n8M)
%'_tpdSC>m^!HQqG>gb[eg(BCa#V259i)YfqaVtl5+B;0qm\nE,l5:5"K*`"l@/_`4Zd$/aKrhg%2d2lY8_$/KRaOV9R1tY0c>([9
%-EBhlh?P#B8Y3(2AD-ct+mP5N*2hgk.HMVdPj09Z]V(WfT_R0^JA3EdCkY:N%C!.)fYoLa[d:A/;\C"X"blc&fh?2q8q_62,(B+b
%NM']lF<`:ThiP3^@*&9dHL_I/Z[9m:X?f-*SqZ1"]@gD16]UuE%H:e+F6n_u'5<=aT85]jXkG<Q6a7kFIQODO$,C6tWV.%/.!DY#
%*8ZD^rHMt*\(T]AFac((Hk&&;B!Ygl@to,rs%STCck26?F2HsVk4$@<OfrO]ZO*r9l:kc[,9kqt_inJ&^*7i7-eUahEb8Xt<=`DS
%Uhl\+&)]h2<#>7+>i,VAj]5e6jl>tpa-Tfe<:!M`%Wr#n&/N!@N)P'M+@afPM6LGn'j]%/m=FbMCE_f2H*/22DeSob5pbO?5\.jI
%,9A(^OB/W,7)`B.lV-u!n`f=UN5\)@I+:+F4>Z[IYI[X32l+Zak8p;f<'1'hN9(("^3Jq$D'h1BaIjVY3h/a9X-T3_3cA%\Tnt:?
%+3;K$E?ku]+*8^0"a!=lWtB-]mmQ2p>&Ef@+,#mK;Jga`&0tg8nQ*kB6.A-I$514\i.7QbB08Gq=%c,?Hj5_(AV.*]jQ:)]UL$lL
%-_FC]E[e_N^og[MOCBjkc<.K-3(l76@;E>d5DtdO3-JL1(ZLdmXIKJJ/LV[qi:7/5?]t9Yp)'D(.1\=G`t\m/KKSTlj8sWb0"ZCT
%B6dh-'Ac6q1N%T&*2NJ:K?uUbnu5.C+PIN?+?U.&#V"+7Ts,8QYQ1,d?%*nhR0"p`A5\JcMR0Lg0*]:NVqdOZ`HZZ*mRYjqo/n.X
%q1So3gjE*+q%t:eWT>T'rJ<p2KE+/n?1-<Z.M*4M.LPfX7XQ^Q*Lh?;RuXcLqKjn6Dp_g;?M7Vl?-%$Y*GI;Qh#k$<C2t[,_@*me
%%qSPT'g;%hCl4(A`-N/gO*B$ZbMtZ]H]cA6=4I$__o3lGGid#m+d\V/I=Yg;#l=>l!IFA5W'.Du<A&;!ILh0\4hgk1HrQ0c]Ydd"
%-B5#G<?L6SG<AF0O+3J&Ac-pW?#@>np*FV9c43,&9C>q;Q$7DqrS\/Y9THuofdMU=HNgK?R1E8ur2iHm&IZpX=Wi+5lTTH9"X'Be
%71=TcbBaulDN8BnNi8<CbQj^pO!iNTjX6`kH+b1%Q[QSqJfHIl]kg3+$Hj/3aP8o5`q)W^*RR5,JUAkTQ54ft`qs6Cel.#0QO[Oi
%:kheY^2@sm/Y%*@`5cXI<5(#0a-05KO>L:[D8hlX"V'^Y[G+"I5krFSLU];?/i')LI(Ep5r,uD!a7sO:>-erbpiO&B5;B\[Vl++F
%%Ff0;[pT0g!KZ>GYN4Ynq=:U'DdGSgW#1F:J9pNooZJG!M%`Y7`%21'l)E3oAPHb"ahiBN&ZS8MLL4T']uOP5YI@>j]/aK?&G>2K
%Sa30.gKU;ZdiBFR1KNtc/95tI\05udp($@NbhLEe%n+h"JbXlqhH!1(%!KSSDXWp_Rcp&DrXDFaf/XX4FfhNd:)T_&]/>L(LT'7T
%"$Y+gUeQ5KkpYl>?tF1i4!BKBh,d[Uak91/HnEp_N'\Us58KF5(O(u?CV6%?0q(@'45pcG1T+]lP34^>N[RK?Ok'nt\7Z2-WL(gP
%DGa*Rrn`bW.'2^S4,^`V)8.iX?YqjZ-1p3@m6#VX"L8(oG4JQS%h6Oi<S?$_F[j2#9J(mFmW%M/AKi4pk`fNiA8=qH$>[SD1kO"1
%8%"O&QnuoOUZEB"O?R"RSfjn]-I4IqB>i`i_/g<=E?_KOD>%#8UpDF@KH'u%Z8ms@hJkXT":mcpdN-b@9KZi0&A;qu(F<VN=cAi0
%gJ;I3MF;b?p2D4r8MhPNXuM;P4-:&9;(p(p@Qs9h2ngD_DS\7#oWd+IKB^Y$C5:WW@,iK8/-g<Zl,R&F/[2GFp#)\gML'e[j_^46
%\&.naZ,ru:g$C;q?Jt4;Am8eP#GNFkpt'Jg&dX5US4[o=Mlc`=F1I<+jI"'`*h\OFB2^PAou02k73B6\`N0kh8uIc5NP+&e4JZ\R
%baG,/d,l1+n7K!/j[<AD%$o.Ig2$(M#mmV$7=j9miop`?3r:iIM1*-NcI3Q>btC8;nJB'+nf>8Q=#\J9QA8?h!mr/;&AH@'Lb!5u
%X4WZ#9:U<nS<%mRZjYqV=gLBmYD5fC$7t:B!3Dti?A`uu?t0gW4=G2.j^48\Hr\.beF=)45c0$ao,eVj^fl1Um-)]O'21S_:3Lsc
%UNP2(98?C\ntH&p)mbq1Kdbe?MoAOG?cUg,!%t>)#i^d1=S&jI>kjEReLu7P_MWJ9SAk8L$POgMJ7D?!4/UK[j;2[E?cX??q?D>'
%'?i#3Q-rt$1h%^N+3rS1LNE"'4dS"bKha`tF#uDJ!m7et'<=$nG`5:#B_H@VU/?C->W*J'.e8jfgUXp6=s8HbY/EJ*m.Af1aE/^.
%jarHg2fZAiMIIb'bS`LYb/Z$4ge8HF4X\0i3>oUrDhc<].b1%/jTnaM2!EJ2UogOsiPEY+YeDjmK>(gbi!8)9PC'lBeCuNuT5$u$
%;qI%K-uOL(r]%bLpi=T&+P&5l2QgN7-?C0cPM=@#p#>h.l#q.2L)l5b?S]6sblD*C#-kH'&t+=7P%U2EF0hWKmE3=+]eMQ+:5u;N
%R3=\Rm6t+=j<W0=rD+7)a.IhRpHSWAGJri%H>jJ,)Ucs^R$O,3>Eu\U<cNTL5Q15TqqIbCRrA>rpMV/Mi5lX<Y$7JnU&a6Y$_Sh(
%S:iV_-&M_3&4I<'_%Sa0"=rAPm+Q7UTi%118/%DHCN_71YW+l"*ELZf<2>S&Y3Y2;H(pmMbcX9fcCf6\5-`q+H)7g!>(,@M#2>7F
%_EI``i\6s!jEiWL=c)@<doR1[U5].<#5-n"3M)ZRAak#U:3Wb%HVK1dWe6+.0k[EeihK;aIg]dOka^Hf-+o#gqL7\[jY9.C&a+#`
%n[*&N[0;sZJ\I012b`NA4OK$rp]ofPoQe@U:g_sLEUWTdEn!aKP!&>i>Pdbhk>Xsdc%pX)H3[6lF[]<s%@-*f5cI&K1IS?)#,XEh
%[lMjqMk!K:(qI^(I42gaK9Wg(1g(I[@m<3'cEL?P]!gL[/r&(hJjb#WGa:#qP=7lA`IdA:@[4-<Ksp3e!,%B>jIeN^3<1RDREI"M
%MQ1#\XS=YeVPi?-QB!q4.0>$t?q42=U]M%6qd\!rl>/g=oqe$sPVOJ;XN*a"p;IL541$:nZQT[F$A9/;1j--hbf>`7'O'@2$L;:\
%F[6Qn8jHA'B<p!jI_7JZNs#;=(Amb)^M?,2.soE+O([L!V8G"mT+CG<qSo27N$lAm=Bdn.j4@ICa?XN!B#dPpg][[g>,r:%R5mI@
%m]+S&5*6AH`cJ9]-oRRC97[IRBttKdV`X7"-*O2H6^iO=X]Kpm#UE;!Z*R-W?;2OPkVg:X&.h!N;c=s(g9<rR=6N*E;X5.7R8jR+
%]'Al+>ut,nGZh?r/*kL_ks3Zi[.`SYj'q&.=M2^MCX..@.s6-L/M(*KQie_:7p;M/@/`F<7qB&9YkBO^=V>,X\;FK]R]2AiTP1Qu
%1-rB&)I^V+qm%#Jed2?3J2OqoOlB-#<G!-aZXt.bn>5s&mYO=p`g-#3'GnNlA3^iO2.?">i!QeZk*[F&AcPF5J@eF#H]e_08qkmX
%K:iUO[69X1qmh:+!>oJsrrBp<:%OjF'/;d1l;]C2J]k[;I=%*EO#M*d$fW*CH]^[k/d220Y0.sE56QS6_!GE8cDjAj+],7:R!C&Z
%BaaU$Y<LIE&9cE]FA@q"+kjVEV3\5JW6W'[(Cbbb'-@B01-I3TJq_u9j6$L&M+--hcJpc^YTV1"^DI5,HLJG&[9HVg'LSqP]"![<
%,?H9YDHNd07^`jV(!NO5g.fo+U8*"6gSLeKlb,j:*-?_"<h,gbo4u[MZcWHeY1r6E6<ViQ\0"!'1IL:/>%e9cQc\:k\%Um&6mS(q
%Aa4o/*N3caOk@Iop7;W`H"(,lC_tND!r1d;NbI^XofO$W5D7.nXn\J@>n5;P`IQ$>1s13=,,=-'@K2TFk>21Ga/sG@\bH2E8qk4Y
%=Z2k:',h.)?%KMWZX-Gr+]RNtMmqJF\=61TWOOC'E]nnAi;!K9RM"rN`R,^RUT/n?F)h`GMr@N5r5P0F^Z>Ze]ua]j*hKO4>\VXN
%&10S,O#:mf%f>c#6Fo.d?n95607#Td@7KC%];Ze\:^3n2haKQL*imbVK/+NY6TDUrJ7gUK@"Ytu\2f[8P9Oh9G:Q8<Mk>O?@>+<V
%pu#23YlYF]77D)ch,F-Mk8ppKM@5boClgBXo9rHp:rq]b7KGT&7[G&SQ/-'K4.-+,5/fB@&CYNGgki2t\$Zeo;9GpCK@sSEqrK^+
%".95(^iOK],/,:B7h3Je]ZOP/8A6=so9BVlOg9e#<bO/W5tC7;&_:[DTinISElDrk!"^AJRnjcL:<:A[&\o!b>8O3"fgg45/I$Vq
%2D[*)4#0%15TO-\_d^dbS_<HO:K%6K%9=A"M@GXI'L+\<5#1E7[ASC@0j1mETR\_h+)bua*[L<r0#-%V4E/M'XC4hC`rk@]aEO3@
%nBBh^!M/t:oJh1hIYVpWh-KAkRc[Q4--_Etila:S;q46FLoKNPhSkPT!F\[K6s)2@n9cnOVW+#h*LZ@f9ecIEnace$$YX4GkNCOm
%p-8uBm`t,%dI-r<gtPCB%d5Z7hi#Dh1R`i=5A\6ID.F_*,khZXCOV.4B7@:mM&cKR:#6B(GImnYCU7?eIc^;V0^j\R7:P\p1X*S@
%qsa[b`[27f$R!*4O/gSR+`@Y`Gh]KA(@-.(A=NlHmTW4gmuHh/8MHVh27G69GsVn#=8.bb>n5[^f8i2`qjuqM4@bXl^8-+81&,ed
%%UpVZOU&mQ0tBO;9hcm.Q8[*VPNWjUpLFOE?eFGO?'iHQiZ5uZ:@Y;:W\/rX@.$RBY3qr?+?Z<\?(1RXH;=ZQWbUIufG"YQ(a4N<
%,j43Y3:-eC:=``lN6osb&Js[hi/&XKca_H]jcF`P7Dg?D<F3s_@h6at`NF9SJr7do%T_rt&9-+X\RtU@d:0q:n1d(2hU/@bY]I>P
%^Y=Zg"?(,4XWZ8'_W"-LF@8Vf0iE0H7OkguOnjgn%dG&uhY7lN'@2#U1rj<)h.baepoq>PHWTqF,lJaq'i9+$A-!6I6Upk%".=)k
%mN<%tJ^>X2UK1HCE-!Dn#"Hos@<hsg4>hp60Cm,\@R&AD^0^0''4Ol1.erh:Z@aad[/"HHZ0a$r:h*f'6QBSo0OW$c!G=X0Nf-8X
%KI<i>GNJ"H-VX"Z`Sk_!%Oq,L_?<)!0Ibg\M'W\K,<jeFO"fPOMP@5fP-S>Q?]Ue)"ZeB@@+Z6"H]J*K+DQ7(VO+0R`"s=PYScYc
%7)mF[4I'ZF#hJQ3QoG[P+6rhc,I.rS(]n=,k"j;T=I23:QsNh-FD>CR9)]$96?4\E69'(ITi_idF=,!4a9+%Qhh/\r=.gAhhF?6?
%Rq1<MjW.sUY$'V!N<OYBA4leDWSk(g+Gdf*1[%*MdjY"eY-u=G?)t0+=q<!FmP*98_R04#4);p3Fi;G37pbD5PaSq(a*?<09>NE>
%?:-5\n'M3A?0Df\.a9ht\!&rdVK4@`m*fhM:@HXaBDh`+$<GAtIQ%@Z1<DWi-^9%04ELbDmEILWi`'=^6sPe"n\(0q=HR,P_.<`7
%I\]l'gq42IPD=?U1#n:4IuF?rWP`nfDkQl%V/OD`oF68"A&APU?+JM_gHYVtB^FL2I"ML<8)Y!9r_*2j^\udEgOK50R7)<.-#_[F
%dra$EE)[L@o.Y)KFTQY)ZM70:ci8u%r1-6t=8.2\YC;JJIl%(@oS7id:sG<e?,KSu-ihQLpl=+f%-=,<]r*3L@-4Tmpeoodn?,n-
%o&'K%T76HGJ,/QeJ,?;(rV(gAli6RGhuCZ&%,fJ2j0*t0S,`E`?iQ25hu*JO?iB]]?iTTPI/EU*IeQY<r9Jk3c2Sd`o^0-&s38mi
%r(k*-c*s>FnXod\"I3SQ5Pqe%q@BA"rsOn!Jq<~>
%AI9_PrivateDataEnd
