%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.7 (Build 19H114) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 218 205
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 218 205
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: OWUDCZ+StandardSymL-Slant_167
%!FontType1-1.0: OWUDCZ+StandardSymL-Slant_167 001.005%%CreationDate: 6/16/21% Copyright 2021 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.005) readonly def/FullName (Standard Symbols L) readonly def/FamilyName (Standard Symbols L) readonly def/Weight (SnapShot) readonly def/ItalicAngle -9.48 def/isFixedPitch false def/UnderlinePosition -229 def/UnderlineThickness 46 defend readonly def/FontName /OWUDCZ+StandardSymL-Slant_167 def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0.0002 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /theta putreadonly def/FontBBox {-180 -293 1090 1010} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F1837402F2027407C3E0FBAD5A49A011D1F5CB4FC5994D87EAFA88F3EDC78A5CFA31EE38A882D36F8B4E300C1982B2AEBF43E1D23B4B97DA11E58BB351095965C3ADA6B542EE417224B6AD28770A5F21A0335F6F8503C9973C4140C886C6F82F7E792CE07E57C6401925390185590A2D02D4B76400D2B1EAE8524395E216CF8D16F6DAD63B4BA2B4D0A0592AF1FC705C48DFB09A7609B1A8AF35BCEA9029F9DB9C996CBC90DF7D640A7A4DE8C55D506C4B98EBBED4A31C2C0259D41E285D031EBC52944B9024F389790A437EEF2DF250938A99735C0BF2A95B7B205289226B80B4480FC550A4FE4B5163B2DC1E1243E3E1FA65A23BE312E87F3F05E3CD75F2835EAE2C56F445EED371AEA5F8B54D11BF76E1596FA1D919E16B03FB035D38873EE03488B4455C37EE60193E3DCCDB09C5879DC024FAF909E8E73D7212AFB8B72FFFC53B386D9B89C7DFD840C4CBE64E92E9E7218AC38E6D2D2D3043284DD52C3058A45E69CEAC1B01B7D43A191BE8F42E7060EB9F4F528CEBFAEFA3DF4AC498AAE380917F0174B49171822CA142838FBA84DE595DE4971D97F4F7A125B8C3EEFCE556933DC2B1B8E0E18A15A964B65BA120A67D6468C4E2ADCC0A26359919DBC1622FE1C34DF5B656A83427E4982AD719687FCE4A56484E277C4C670C0EDF53F5A1216DD2C2231499D8999F47E4D93EF867F45D9A757F07D7C3CED86D529326CA97C06F04CF4128B4EEC7DE7DE4AA049ED583D56425B51C4C871F421380D512057E9DF85AEC1D82D3CDE1F858C66FB6E5C2A499957AD463321CBCF332E206B4CBB6366A6D3A9EF91FAEA269D8064257F1A919BCC476A0BFEB5310A2ED51308FB52F864AC5C96F0AE1814CD3D5E97C1713656C2EF7BBBCA9BD8C5CC0D5AC007D96447BC88F3B41A3C6FFA4B496FB3F31D1D26E09187547D4E01E93732DB4009B14C25B6BC153667733F370551B6821344332854B1A26164C7160BC9B1CFDD347B736B808C78150F573337E7A812D88278F5E1C4E6930AD885C053B89FF0A624DE6012DE5F58DB807020169B28C40584A4AB301E551F4BB385C273A3436ECDBA7670B7AB66E55BB74376A91F0DE18C84CFAEFD2A25041607DEC6565B1DA852FF36441C18EDB92EF144B4C4121BC67CA636B9997C42B76867FE31763EBBE49EF6803A5B892CE716820CACD28FF314EC29F3BBD095289A502CC3277A33AFD49C50EBF62535C8EAF8985F43052ACD5A8ACC4221A3EBA422D71BDAE36DCC4EA8557AF1E92A4DA7A37EA46DA0068209E6481431E8FA029D60E8E1A011ED3B6ADB08FE570D4BA8605945EED62291CDB7BCC9AB67230EFEF9E4DBB5631DAC2A860A8889CD4EE8EE19B9C78D02D305BE20B2DC4B904CFB5D515A9B0C2B352B0D36716A1849693441D4508CCE02B0AA28F0AC6B751B3453677D781063D1368FA379EAA02072FD6FDD7B4341F8FF930FB9F19AED407C4D7BD9E643592B7359332A1EE0BB6E5F169F636948A42A3A600D81C75393FFE737B45CF4A557484CCBBAA6427711C430BECD74C5EE6E1DE6A1302DDB9A7C014EF3BA2F916A6CA0B72584CBFE2B0DD8B4FB87CE1F85AAF1105EA6E246F8FD8C9195E0C51F4FDC835C06DE059B7397E6127047D8E0C901709F0B83313454E56155AF0B3C69F5E8F585A78D1394D79F2C42E491EC8500619B62C75778EA6E5474C43914B1E67C9C960EFB9FCECBAA84886CAE4AE882928CEB4F29948A4987D80C2D9D2AEEE0C0AE58421EB9AE44A40E54F14C900A9CAA5564FA0EC256F6474331ED0482A5D18DA69F89A2A2B0EBE5B8D35DABAF3D9E4A063A43259E158404675297ACA91E655D1F940521FE158C67E4243EE6E5A667300ADA1A0BEBAB5853AF6EA6B75989F8D8D22654537EAEC4DA30CFECECEC8F57C275D19A4AAEDC88941A91F61F59457AAAC212DA3AF06481C4CFD7D1CE652030467C0464A030AC054533AFA6D1AABC2F81085453306474F28CE581F6D99718D54F78C5825E1F5D2D92C990FFD079C893BB30FB721A2FC0DCD5C7337BAA3619CEBBF7000AA8C83EC87AD140849A8C836E80600232B1725BDCBC12D65CCD9F3D313AABF3738DDEFD2D179E372F57F414C367AB5C1E0C8B7F463DDA77F15D748A7F98A834A65C5821A96245E8A0297D12891CABFB5D6D0DECD7F18D134239331BCF9EDC4355A21FC91C4C4669E0468391029918C23AD5BAAFD50273FBB5EBC870692F25D3E5E3904DFC4B13DB55CC24C303CC2F1F9697C2A5A546E03D887C9770EC0A4F90FA91BC5138693FCD6588F60848AA75F45DAC21FE6E3551BD49DC3866BCA98196DCE73019C7242735F8B7E5A0FC30D3A9B3458B66D852B309B36D39CD5A29B30239581E8C01B3F5B0E1172350B1EF96BFDEBD81CCDBC842B171B8D7E580C705FD6EF42228BDF51DB6CCE77F19668E9EE1052FA1A671BB77182B5FB916B6B22F54BFCB5B1EF215A02FB57EDA5F88CFADAE8B4CF437A7CBD5E0C01A9BC479E92EA48C808820C567E74D62ED7597FCEC53DE9A0B3EBB9A3FB50AEACAB82BF92AA56D029357AAE016053FEF87133C911F3B5C5F8DDEE1B5D69FF651D80787D351106BC22706EC4B0F01F7A9F1550C808187B462C29B2875D3663A70ED5052DF297429DE16E438D3E11732E5CDE1F1B4CCA6B93789A103C402383A4FA4E6B64306211BF76C4C98463B921FB642653ECBD17580E58472465EB26EC1EA785D68C9A8618A0042DEBBD1652A26D6A751D68CE46EA6E3A6124DD73B5DB48C0309E95A42A18EE96109C218DFEDE858E4FE62E565E9F95966AB8579A1EC1ECEA0E96707416C82108ED41C1403A6041C8B0503F12FD138956BADD579390DFCAA6301400149A878C07A267E864B6C0A29B984422F0C9C7CEBA18D5F584E5D16D798743FD609DD6C7FB5AEA038AD68EDB7CDE9B4BB7246883701D24FCBCD2FFBB97060ADB2DEEC481B48AAC908E3445A5A8C464C73E7C6A63DD2261D8ECA29E410F5EA5E31F63071BC0214A62E950F745E0A48D8547489C0237DFA17A0F9A96DF1AC7397F86D3F440C1D001A773B351BA1A94B832F222EE65BFEAFC123FE55D5AF04F8BEFF0BB76EE232FC8DC3921C9350CAF279D937F5F6080AFE13516180A0FCA40D60C50F0044AED6E43055794A1BED026CB6B8484AC9EE8272B7CF1873D4DCD0377FAE4D93C85F0661E6C9833A65423274E3517032882B3563A0E2DE85082C13C67BB8381FEF89367DBA1CA77C6594B73BCEC1B27415AB0D19D5120DD45687A70AFF0CADE8394B208E9BE0D664BBA77FB59D9DE7A3EAFE7A20B129A2A8C00737144ACFA36823EC107093D90FE5731CFCBD5870C0B33A08D85E83BABAFDB2A27984D26ABABDC6298C09714E46F49743C4832F26C9B3A62C54EEDCEC02E527018CB58A77B64BBF5A563E7FEB528B003E5D0EA6C679DAC25CAD9A5794F55147B345468BC58BEA9618825DC4B3233CFC523D59949DBFDDEE8880EDA564FA40E3A006C560B2036C22C2F22DEED8057DAB8C4FF7C14AF21B76C8C0F43B62CD2E2F0350D6FA3644EF925D89A9D93A105C6AEADF04929AF432880CC3F8AA15F9283A11389000A54171EAA7587E75D1C6E76F06767C1EF3BCAB951227658591525D45782E96B33C4C679012D93CDF719D595D1AEE8E79398D5986C653297F44932E0C1BA32E04543738B5BA2BD682754A1EF99420526C861500F952806C29A4766A3ACAE1E3755F608AD7F2EA62B73FB7420C6965F546F1AC678A482F766814E7D82E7127A45476F14C8ADCDF7E6FC2CEDCF12A82FAA0591CE9AB4C5CDA81E23FD78122A1E5D0A3991D217ED14033CF295DC33DB59142B041FED1FFC49F71A729AF48B1CCE8E1053C96E8B87A88F73E814A25FA68FF2B3830B05F450C0F06D089B37A3D6D4540C27B06346B6551BBFC48E43E7D033B07DBBE84453840B3E303D0A531F7576D09EB303C0C34E2D3E116065AC434345359405495725CF00E8C435B819EE11B4E3FCE32CDD4072B9176BE714A5AD94D25988B79DF6CF6A35B406ECC8014C69CE2BE932B5C2A4A99A809460F8B340DBFF32082C8DF546CEC8378798585772BD021CE0DEABE61529618C7814CD8055C0C2B3540427D564DAFF7D933C53024534ABCFC269E9D9E98A718487B007189BB703031EEE149A0B8D610427C40B42836C788C33A30A934CB9BDB50C08F0DC575D58E9D97D5E9D08CBAC15A49B8A53737BE8061A9AFBED0EF114CB92BBF0F45555297FB3EF0B5E86A9334DA91494290724F348A0A655C1550B8434338BA2840AE30F425BD18DF9B8BC5A566D86A2234EF66BF76FCE70141DA10768712610BBDD8164C28B01387CF94566179F28837C825A5873FE19FE977CFF9AECDC7A120EC161A4726CDE47C4218BFAE5A9DDA45F8C531CA049DECEC76F8BB4E806D1940F5081602DBEEA3F906820DBC5559FE06E2110625EDA7475F2A128FEF5003A9BD7AB7BA3DFE1C1C6A0E1D4F4885E565A9DB0AF842A50230FA9DE08C883BB892EE64A5819B0FDAA9F3C8C7C5FC52B2AD6C0EA0ECBFEE087684728FFA7BB4EFD121F4E0677C05AC08DA33E8334F46A3008EA8EFD504C9DA3750B0067BBE4666F9FADBF3B1EFDA4604FFA01FB2A0AEC5AFF97FB332CA6B0E3D10DDCDB2080EF6CC118ED1D9644A2DB102BCE68BC6F002A85165D28AC62F4FE08671C74D00268D729CD9A9C58F225C734835223BD3AFC7E3DADF02F10704AA6E79F138ADFCDBCC0E0ED9EE84B9BAE5EB17A500F8126F610C9033EA473A0A0391F083FBC21BC59BBC32DEF7F4E27B8207091BFEEB11CBBE877A77F9F2B864F3FB59384E0F46004EFC48358C97EF4E6071B6D0DC21185B3C563DDEC701669C4F0A7F61E0A1C79875C08A5F43FB5B7EA16DD258ACF4D86AD88921D9FA38CECF3DDB6BE2C018A228C3A4662C946CF1BD868B1D5A4B6A5E0259B0A51DA5EA452EB06991F4D25C83BF043F6788CA4CBC93C6C22449723196C51B6ABEEA5091FEAE9F2F1F2E0000ACAE345636A050AB2405838A4CB08CC9DB96B698E23A5646EDECBE7B6ACB1F23D276B28332D2AB8CC3E959E29ECF85EC9515340159B820F0CF023CF4561342A1CF96755C0158388C04751C09F527C01410D8D3EA39BA38B2A1E82E24B4803B2F2EFBB1658037804CCD0FE96553C4CD3AD39DF6A4B79A17739EEE235E2629C7B6AC6994C24F8511CE4010DD775FB1EECA6A2038D1588D010655F30882B52240853A365CC36BB7584E15094E4B589C391A1117592F59E7EC3C872F8F95429ECC0E2625839585C2A7BF353C9EA1B054597FCDF334D8CF698331F01F076F474B693898C76D76583049D407DDD99346E04655C2C855F5E4C3F1D1855923BC4627FD21AFF2111075D8F200D9D5B6B315980C0AEF35BCF60C8FE90D70FA81623A549BFE76948AAD67F3A3E8DB916EF0E09D05D2CB2DF7531A7D2DDED45D2070768334C3FC37642BBDF9463E183AADB893EC19E517C66EAFC3885EA29FD54DFE23CC15048A5A80E654B471B6E4B9C3314CBADB940090298A5FB611A126B92C0CBF845C0369D064D3D3E1B1217AE9FDEF60920E401158D64E090974B25FA9DD8642646562BEB85DD72C64CCCF69DB4937F5FB2D4188153C66A50B615A1D31DF462BBDD51C7088CF03DD5C4D19960F48CEA0B40572E175EDFE97ADF16DC2F6CCF6416E2CD227A14B99B8F9AB3F479BE9F92C1AB4A7E8DEAE8848E149B872F9F8C5D1C4CB3CCCA559252E83827476D4463EA3C91F6CA5589871FA031EC8F48CF2A836F3A589DD11C8434C7A387DAA167799835CFF021F0B8F011EFEAAAF615E1BB4D82B26684412812CF74D98DCB9FC7F727AF14322287CD3CFF8EA2292431A6DD7017F7B1AAC4EA2F67456FAB418C1CF2B26E450A6CCDEA9B2BEBD3BFC4FAC237B60B655A2EFC570AB51DC8044F679E31E7E1F4DBFB392988352B096EA4F05A31B898FB15A13EE33046B00DAB455A40FD74A12332CD4B01F4F9427E99A3AC3039BA780472783C416C4DBC0EAE1BCF9DF0D7BFF986B43FE770A7BDCBBFED2EBD35D95673E9821358C050F6E760F815D9D89A08DA3BBF33A093BC35BFBF2BD58B949F24BC2D1BAB2E168A70C55067FB0219737E15F1E55B6772A3F536A13EBE97E3EDC1C749A1563F2E89DF3D8849ED25923F51832E79E2C738803AA4E17633F56AC9D400AEE64E75D9DF33B16D6192985C048DE3E946C9E9B67674354AC0F7C6873AD8575DF379A100044F088E7EF2B7D82F9C2384D56C26F3CC24EA718939C2C91C26DCB4885B930BCB6F83C09BFE3DCE69107AA668B5070521F0C899FEC928552BA637F1537439CB979769BF8D916C206ED8830FFB338DE01118C3CE3A8D748DC6FFADFB0DA0807ED3B483634EC9D34E3C3B6594F617E1B544F2E258E986D8BFC255DC62471D7C00A016DD50887F466FC82DEA61EC98A2CD7A480BC95FE3EA40188504B185D954672274CF2584903884B51DB0CBE68CF822D1787715070280A92FBC73C272687DD286F527C51C7B6D45A96EEF2EE7E4554054D262CBB52DCBF261002356532FD43FC83C2B0DE9B342028229A853C66212EF63BA2AE4A0EB903E9107080A1677A4C63C0166CA2CED77D2A6171FAAD7485EECCEC2D99BB17AAE2163710DEAF37EB34A9B16B6FB4F7DFECDBACD126A3D2425279A0959DC501DFD02FEFBE08B68CE098F2E1D4CCFF74DC99A2CCD00ED4B1A5CCCC9FFCB29CC1E4FD5ED1EB69A61524BA26208E1F6B34047B0066BDE655255879528E22F01A8C3F524B6AACC3FBB2BD375DA9F1FDD2DA40B5D9615825E5B56EEEC8FB1BEC9CFC694103A3358B68D541BACC2021851F2393D91F1B77733553B1C584C764A7DBD4FD85490A6D60F38350B2768B1B75081979A10178B2046A8041C3C574857AC42FB77A526B807FFF8831A5D57914B103B603ACFD5721DE4FAED200A1DF8C65E24B5BFC296808B4E422D93792AAEAD6B96F3F9C53CE56DDD312CE3885D04A6817F0383D741DC7F7995E05553D70A4E429EAB8C1EAF772CE90C613B02DC955BE95E23CFEB177AA45FBCC29F9B9AB0AEC78104954F7D19986A83CFF2920F1E6A2D7684E06B83C5A076A91C179E1D52C9B543445E86D79A5410E1052A02BA0426ECE7BA1F467CBE876A7563A573E4F7F186DD718BC5DEC6CFACCD17179DB484D977753735E789A80B039044286AD0D6E102203ABDF755B043AB08EC64C6D1A1F9465EC8B1D294241D577F0D9D7149D253794942C086B10BBC12E1E3B08310773FD4A442EA254B7F21EBEAF9706851A3739D4769493ECD0BEB6917D93B7C4D05439BF287F0C90FF0AE604180B9B88A6827D64CC61BD0BBA641F3586F7D420CB03A040AB85774FD66BE70B643E84340D8968808048535C01B025EB684CDCB4891B00B712227E935024F8334E8F060970031C610C39423C7EEBB24F4F5534E1F49538151850832F8D0935A4DC0D4B3A734D5363306E20E6B3CE6A71CDE80B853CB46D0EBFFDB0810CFDB36EF76C655A62004EC30ED61B8D2EABC8659D79DF0E8B15B735F3066AA7D09A7061C768BB0D5F20D020CBBB90474C175D7F76C0EE65BC2A77A0265F1D9E150D3C107432686ECBFF6B890C8CFD0048F77D39BCE85FB4F6D6977287D3F61AF135FF18202108133530F9EACD021B0DD0385B9CC9E1F019FD52715E496F7050A16AE91D4EEDA64705D2190DD1DCE03DCB6C3A84D3D76D4ED8C77E55B9E967CD852F84482061F1B1C7AFC088A13EBE6CB2DBF17C292D742320095AA0AB79B914B16BFE8F5AF07337DACD25AAAD8279BBC4FCD3B5DC459733371EFD5140A5A0E9958490F023FEDCA40E00FB067ADE16866F317B3D2F9D46F7AE28444627A4FCB0CAB555A8A7535B9D42B54494DDBA93154B04E782F987132011DAD131C595508B4D08520D5BC6450A6EA03F60DC69262A33F879CC6CFB31868D30388DA1504A2D7802A5BF4C9235E2320B447EF769F6DE5E8EA678D3F0E015E18CC91BF72EC8237FEE054035F0C9CD86AB8998DC2FC9A5EFDE45BCD4DC443F364F86276ADD4E870F09B4AE8F8FC801932403F9F7B563EBAB4F2ACF99DFBB5E53A372AA93C20A6E49EB6C24307FEFD68AB40AC85BEDA286F8703F0C9B4865CD2867EA03BDCA926850FC1200AD5A5EDA91CA567FB0E3025E1AE292DE0026CECE5F98B82B76A91C7AC9A32D15DACB15570568394AE9B226155887719D23D8FE9401FCA1F53638C2856D81C4F73C097BE0B8941DB749CF3362CAE1ACD4C74C59DFEE08E98E730EE3F7CAC6F2DFD8B1F7D7A7B4525AED4AB31846819A6610D4A84D0E8D59FCC838B693E68F29530C274900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/OWUDCZ+StandardSymL-Slant_167 cguidfix
/F1.1/OWUDCZ+StandardSymL-Slant_167 renmfont
%RBIBeginFontSubset: OWUDCZ+NimbusRomNo9L-ReguItal
%!FontType1-1.0: OWUDCZ+NimbusRomNo9L-ReguItal 1.05%%CreationDate: 6/16/21% Copyright 2021 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (1.05) readonly def/FullName (Nimbus Roman No9 L Regular Italic) readonly def/FamilyName (Nimbus Roman No9 L) readonly def/Weight (SnapShot) readonly def/ItalicAngle -15.50 def/isFixedPitch false def/UnderlinePosition -100 def/UnderlineThickness 50 defend readonly def/FontName /OWUDCZ+NimbusRomNo9L-ReguItal def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /r putreadonly def/FontBBox {-169 -270 1010 924} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BEF1E80C47652E4B814D3F800B6A7491A565C28F46E815DCB947327309DAA29BD6FC6EFAA66502DDED45D203B21553CBC7D365D524C2110ABB56CE9DD1D9949631AD74F00ED3387D23E83D06D3C34AD1EDEFA64499F61E73A58DC20D5E2B1D63681AF37D209B0AA5A6D51103C576633F09596E3DB55F284E8AF53320283079855DBF397A20ED74237BBCACDEEAD11FC16748C0A2011B6DE478B59190A3F802B6FE4A969E029873B9EED71C5750FF3A68634F5209E12820E66C9F653E1CF4F54CB5288D79B51A11D4D18F5BA7369E8000DBA22F8C3A3EFB0F3A5DA9E52CCC740BBED0674DD83806465258A09D0E523D98009D88E7CBB90C155DCCAE49F8974FFCAC22DBE4FFE7648E03489588A76E5A6B8CB9FBE5A225F8A055502CC89516A354CE135F1617DA907C367EBF716BF35810C675B1096F4DC866B84D8F374DB76CEB3F5E2719E9E845EDE3672B1104022E7FF928F76BB0CC1E59970FF4974C52D887463A0C5A44668BE764515A79962368F995D2532171BCBD8FD7D9EF4B55F1D7F32DC3DE4B71864F148A6619D73AB1A3335506DE004D83E67CF5FEF14D61770B55C88EFA8B7107A43EAA8C61D2596E62D839FE1370D5FE7134EDD29C14DE0B07397433E406821B704383A0D9A28888BE71CCC73B223245440BC6D6C685656F4D1662C1B16FC35487F9DDB87AF16AC834BC06403C34423D3A598AC5E7CAA96E96E00914168E963B1D0E23F3F27ADA31E915F97B4A2F95C1E541D8340FD19404CBFBAC6B51AC8F443C8210944C3FB28D421AB3C7E0ECB281E41E35E278FBD0E183895CEBDD1DC763E28CAA3D6C2F8684D9CE67ABA9B79BB8C99726648FA8C9D347305362DAADBB4E133946BF4022B6FB95A3A9506C2E1A15AC5CE52C6CF4CC5B0CFB6D24CF78CD0C9314B6CA5265CD0AD4C030C709529472EB6DD707A1B9E34A9996F3CC8D4AA0559887FC7F13FF2C743F566EBA621AF25A9DC475657839EE9F314778B5E11CEECDF55E8C247A462C2A428723C083652BB5997724984101FE436950328A06737A71BE09F5699398AF36D4902A3DFDAF44C066EE278714D1486EB709D327865A483F62709E89D082E17950B40D6781309039F71949A1AFF7AD8166CB2FC87EDBCED86A15C9E835AB78EE4C9C9C286332911CDAF38C7BE10EEC79F9E96A035B6B1D6BC560F3481220ED246815E9126B8C992AB1F2835BF514F836DFBF343892140D981858D8C599DFEDBAF388791C4791EFE2772B4F172F1B7A5A456DF9FD9A0C4159F5663E66C1020F921C8B9998A950E7882AE67F58F9ACFA107B9647AA4154671B03D97FFEF1C646CC761DF1E1C8793F31FC4F74ADB23358611A1674149C22694D57418DF9E011108D2EFB6AEE3E10127B787D839121D7358C59C4670C1D30BC372FC14FB1D848B82E8083250BA3695B65A103EF0B6303EE949F8B31A9CCE9A988FF15432BCF6B857DFFF2F7AA960776DB1F90050D2853553B65AACCE92C0CB5607D50E71C13ED2A664EF6BBE2478D93529517D6907564BF65DDFE50766CE303DD62E980484ACF61269342F07F83AFA86D8A92AFD27C8E838416665CF365BA58AF537189B126973B1B18C4313C1F325A10074BED74214C759838AFCCE5B0174794260507F83F78E6CCCFA16499C1DC74378ADD0E8E9D69E3D9E4983CAAC6E42E4B437298FFC1180B0801E9D4C9398F30E70FE1FCC90EDA5A27EC3F6CABA73B372803A3362A0F5A3044A8AF16EFBD8993A355552DF4EFDC5C313FBF1D7EC438BBFD957C17BEDD0CA6C9E0557EF4C26F0C07FAE7A9631990A3B73F2F771452E15F1927FF66FB733AC223A4485432ED2F9F2FC9551D09E12D84D4D9BDA26FECD80F8AB8A864F7F3BEE301E14E75BA17FACF6476FD683115E2AE0E5D56F97666878836A1D1EB11F252355D4A793B13CD39FFB91D75B73FD02D56A5C91ED781D73392DE8D2829CDBD0237F81AAFC2B7800821B26F19EDDF807DCB0ECEC20B1210D1E08DEC6EADAA660B86D09C3D61131DDF4C0BC3C2C7244F2FC3C22FE86698D52361A168195C065CD9FA261A77096F9F3E939BE1F0AD6292B21BB1A272972D49ADB0321F960B16A4D40A1F28966160C561FAE1417D2FEB558AB52E53BBDD4A7986D77DA7E6A498A8D56AA61B46D768C1059B467DDE0A7ECC0285DFFF6A1FC0C516A0111399DE86C27E459E34AC5BAC5F8AD479FA2AFEFFC1CB4E10AC93640408545F8F413059991C0F481A65145BE70086E9712E7B4A3DA8D1DDAFDCD8B139C3720C2B8C1AA68B7327C3EC5C5491821C6305B8D422409EC34D2053084D2187D227651F37DD7B7C6EB72CD73D407B599DE8397C2BEB2ECF1B8395AEDEC5B06205A4F7BA2EB91B6480EFC42A0010D7F5BFA883A39AED18982A1DDE83475458E7D80CA59D308791442173D5368007CE24229D0FD257FCAB4B533C49A5D9C128832EF03ECFCD27BB7CCB85E22DB4B28FDE93552D7F3995D1EBF5EBAE2D6A143AD3BD60797B539638BD192220B89BE7B097A86CBBD71576B774DB8DA39712119D3CB565D6556AF0C0518F8EA06AB822D25523E62D0DA1575B78446E06DACC4FE0DADA781BC3829E9F54194FFD02B420790539BDEE31B1645CDDE31B6E164F4484EBECFC0849739525F87DE4A5D9EC64D002CBC38C95643E31E9D54ECA466C134C4744788D157A39E0D8E2870589446462992A2713EAAF6ACC9CD16B9CB633E1935D69A119F66C9996D34E57477212D6CCADDB11171662E9618DE9637009A7E352A31B48D3E6BB66702F6F56DA4BAF243314E7CF869D1E41CA155ED0DDCAA26E1515C13677047A49AF86DD803AFC54FB847847CB98F3455CB5957F2E0A0F5623645DBB5C5564C7F8B117D6E27E65C0F3EA81AE67B4AE4B206DF54CF996AFB75DF08609F61CA259173AB12AFF1DCD0D0DE962E016A5A5362726D6D9626304866D989C66835D820F07E413A5416F14A12485FE946D32810784031B9A292B3832363B70E9FE1BFCCFEFEA084D161B42DB77CD512E1B9DEF94FF42661597834B9DA3473214AD5564034F3992A6E9AAB9CFB6CD7CF0EDA108E2EF36F7D0D479BC6AA3B38774DA7EE5389FAE5E7F37CFDECD222D9F011E2E9FD044057EE18FF21368E6AD63242EA5DB7FE8F4D6CBE222051806F735004A50AD288053D4971C2363FA9B62770F9F69F0F2D48399FD3E2409DD37A6B8C4C8246DC2C90B8D02838F4B4B3DF7728F0A14A8075202B3465A679DEFC74F2D93A648812EED66461CD46F38D7001527CB665788B0300B39F3CF4ABA3EE78F21926A864545151770061124C155A555C09BC9BD5B54235F8F18AB5766F02865A26BFC0A92CC3539A8905F2DDE7DDE3FC82E57053A4ADB0338A073F89C56E7C4E4EBC13806EA9B2A0B30F1FABA95C8FA3A89EE8A964927C06608249F7BD62D69117F580D0F6416DED2AD99F1AC3C40761753EAD2724C1B9888B2E494EB8BA090DBD2F3FB0DEF12C89277E5AC6A460255EE0AD6025C23A60AD5D5714E4A1DE35A01231D76F20200632E7109C45F052D31BC4EE092D5EE07DC2EBFB128180831869BE79922D5244BB7FCB5D96F937680A47CD9528B467143694A3D9CA930640B62AEC3AB8DB1E86EBD39BC5AD6524FC5472768C213A12B90E6AD723F98AA2E4B1100FBB707BC0E43F7C939437216CF05FBE1D846A1734C6E0265764743181B229206E1605F70B483A6653AED2236A0C6948EBD05DB5EF7FED5D00120CE30259192D45A73ADEF3D80527942AEA19CC8E34B2327679E5E30E9162627A7610129445D99CF1258C614A597A716EED73E7F1728ABCEE1BB87E06FB8FD666663884E4D27F2A50F316B3038F15E6AC85EDEB13165F8CA12B621F9CCA07055F3D3EA6FC287E8E7598EE00A931C294B26AC35CD1D9CA2A735D7FF9FFC79D3A8831741621E2CBE29FDD5E162EF140E587388B9301ACC2B06AFAB2E10CFFE659BC584546BDA0FC50621F3989861200863F368696B003B7FF1CB423B95437170837C77DA2BFBCDED755B21AE3515562FCCFE381A4BD7599B22CF6C50FFAE6D79F80D061A392793E38FEB89EEC295DDBE86D0D1D2B65B2072F23AB8F46D518FD3A57B8ADE5BD1F32C88AEA3B98306742C0A50EEF6D5932D0D7FA5F1BC82FF8E7252D06CD4FE69C05674A52B864856DE3E53269BF7592B8355B3391A9108F8F3733D5C0DBDB960E855BFACDFF4E2CAA53105A2272A9BE25ECFE838F193FC9C6E9F5DF39A300960AA870CA05165E37434AC76C244BBE6E1C50423DD2132256B09611038E9B8D60C2E94B911521EB7A77400032C53F330334EE700A734E7CD80B3E951FE544927EF007E351CC27F5F787057338953708558D1C23CA28F1BC2D2121967EAF4F4F7360057E1F490FA66EBF0DE1D969A6BCFDED62BAFFAF28038018686F3D9165CEF0287AA0A08A395E1AD2194A9D453C0D4EF3AC34D242817E20122E22943E312EA5A7E0E92C13D246C3DC9052F4CDD92EA5AE5322767480FBC1BA44388EABBC49944B24C1EFE2A3391F4DD49A78B39D3737B540067C0E2D56C1A6528CBE60AEA35F91415C4B1F9341A03D819313F0B470D73FD5D9A38DCF476EF983C64D0B60C3949310C74E017B6EEBCB619884941233D60A37828297DF4AEDF474FCD589F621207C49D20E9F589E42FC211B846E95335817A8CB5559D78134E1907715A2C2579FB6090587DAAA68AFFA85CE6D24AB65AA7C2E680FA604FC2C2EBD798B5FF90F8961D742D827CAF49EC84D86538B1551A8C24C7016815DDA586E2191AB614AE29C31DF882D6C90BEDBB209A36D087E7A60F1F287D159301B515C929D8B0AA34B33CCA6E3A1F56DB39C25EA40730D175784C51C6FAEE3553E57A115F02E756DF9E7FA851275155B16EF66C505A13F4D5FA2B7DC2E068E87D27EA2B34ED549D36D4598698CD105F6A4218CF5B65C8BBDF9BC4DC18EAB3D72A8804113FC3149C9BB7E51BF3B1D3E4754F0CF699F6E02954F15FD967E9784ADCEDCD1E2CF91440F550708D60472A56669C949D792CAEECCD1061BB31F262B8A4F9493470474AF51E63673A7E6525E4281081EFA3C4B268BB624ACB6391271A60EAAA422145C4FCA5980ED58E08731D8CAFEDFD31DF4BEF8292FEA17A6EBB9DDBFAF64C73FF1423D062BD3621DE40AF6128466BCE4B32430D30D05858D0E1304C4AF3A3E18EA7BB2785CD0EB2F42064FDA78DE1EC0715631EBB4C7049691CE292E610F6D5E253D5AA36193FE3B507CA17A630DB9651CEF3A449E21882DA9F7D702B6F515353C718960785685D77A4317EEDFEAF12D1B489A8355F426AD81D3C0812D08F523E2003532029EAFAF9DA1F16C4898316AF231CD19450B8FFCC1A2AD7EE74F7DA75687C75F5825680224FDCF12DA7FB7FF7CE603D0CD67DBE795EACC80E9ACD4860F117057854E026A95F5CC577BCF43E046D7DB0A2F00BA9C6F7B3E5DDB6674A0E85C3F1D09EEA6D83400877E746980EAD78F61AB383C8DFDFA89B80B17467821DFD3E6A2705A7401EBE3D9A0F091D04F376DCAB0DA97EA6EC1EBBA79CC35C2F32244AAD9A39153E9CB42BF37E03CB4D1F2B9475B6112CEC16F41F3C3197D2CFBB71B1AB68383F308F857DFC1D09C442C33D32C1A6F616F2BC3B3685ABE9BC47299D54FE06CB029836EF33F3A64D5468FF169B76A30E0E793C717F8E8B7A011DF853E036F620928D686887EB3C0F09DAC1B31CC41F6049798CE16FE383798DBBD506DBF1A4B6E65D6374A9BFF3B7A83118870D3B627DDA04CD3CCE6E4E88F16D0C8D900E2C9EC349D8A254F338EF7D2E9FBCA842CBBA2F0902E39B1EE35FBBEB2FF101D545B5D7DF693AD91C2B2FAFD6818A2B195994DF3DC193E6BD986DCAB2AD4C5A50BCBF164A5A9B0156E47EC724E2B9084CAF299E9C71F7C3A5BE09445F7171876C3A15E6E2296A329A999DD66659ADD4179E2F19117C31315F2A3571EED0BB7C7288A807BE8C88012B83FE8C5C069B7C410141453CCD4165E11328F81370A18921D97F5C33665C96BEAA8419E51B47D0A2404F473CDC4AC9CF15DF8913A18FDAD1568011921687B697A6588B79A5E6CD08F677F2BD1505674B5A4EA2D5EB8EA2FBA3A60F8892E1A25C66976762B535903B2E0FF3AB849A5154EC2204828824FFBE90CF3A5F9AC6C39391A657B6C045CA1EFB8835EF53734A4655E91FAC8D51EE463187A25D7EDA056B5313CD119433D1520FEA2824EBF6A08972354533A74410D94D5BEB0A7B890536DFB7579D55E43EA68E96CB2B708B6E1787C35D81AD7033D6CEC2030083E44E7BBE49E0F5B58E1F6AB2F0E8C08586F8ECFE6558B12AF97BD58FE7E2A451B5E474260E47A3679CE3EBEE2CB3809D20C76B882CD38C95B33B9E72F09B0E0796F9624DCAD1E25F7E8BBFC21F8874CFC674CC4AFD410B5B12A0149438BE842BF0084ED381061F811BADE91A5B22CD863339E8993E4C8FB56F835CBFB9C238788AEEDEF780377F43E4E9109D7FC8794C33DE536089EBB3DC4F7388E0CE8DE07691E3CD8C22445792988DB1C684A2398522BAE17B215A376BD18D3E33800197FA0AB375BE1BE06D57E5F80EA219E4F887C0C8924183DA924706016EEDE8669582F011509ED6011A0EE132A5E08A1CE07EE64BDA0E502C5D8E051FF1C70FCBCD56A4E1B1E9901DC4DE31B5AE6D31E031B0EC2BA914598DF3E66DED534183EFBB8EBF71018A9570E086746130049022A9E7A7B9BC3E26B0533BC067DC1E512127A55582D31690A76C1351FB75C2D78934F7ADA809E2C390982FF6BE87857DBBC8BC8F629C3E858FE42F0CA12E0DCC72881FD15378F92DD5D7707115CADC01FC7981DA8B56B96A542CFC13C0553BD50C24F337B25178CE8AF6F89AC62CE7C5C95158FC307CFED0E96D28814F34102B8D542974A95F6EFA5671E498DBE665C4A86F1BD1D796246D3BFE26704F4EF44CC8BDC349C206835D7E6ABCC2E558371FEA09DDFA67C8756AE03DE549F033D5D5C8669014DDED56D3DD196D4CD7B848F21FD820F625F71CCA14848346961340E687E6EE6507F2B1ACD194FB4B38544EE06CCD6BBAC11D0A879CA4FA2E4A4B905F0422D943A6EE125EAE4FFC23E649034627BC7594834F2418378BF7D262ED0003397CD13FE12AD417FD8691F17495F0C594B10CB2055F4AF9DA59AA470551CF0C3B3274AC58F8AE6E9C4F833BEB19B74B315D02818C6978A9B4BFFC52090E8FFAEC0C7C0AFA23B790ADD6EB1CCF2CAF6CD9A881D2770AFDFE9DDD300E8A302B8A24BEFF12A88875DE1536577A98D806FD902415266327654A06B3CCEDB5BDEC3E4D196DD936780D096C1C9BF9916B365833E7710693401BED5CDE7636D6B493CB068945ADF47DC15800D2259F393C1BC8B1001C4E437C542DF09DDDD6EE7787CA2A90AD2D17E6E6297667EFFEE25CF3DB8ACD3ECFF3BD45AFC4EB86C39CD961DF041C0B3281D2432CEB0AD07D76AC6CB62102F988E2D95A32B166A5DF3649E93E84B27B3F21353ADF80500B4379C121A088D2AA4DD96C34007881384535D3870F506B70D87DA55481BB4766FCC42F512815D65A0662B50E6B9C025AB588C7FEE772C5B7CFFDFCA111A42578768E9B7FCB7D3D8F328C9E4D83DA1339B76B22FD3FB465EED2F1F447EEFF3F12FC6EB244100088CC6E25553632D019C1554958FE8A02478E2D62647A14489DADDACF8CAD7F63DF9226DDD490352654561460BB069217363AE6FBAFF582529301A6E01B5DC1A1A01367B44E50E7118E8252AA6509B95D4D5C91D0208E33D940E13D8C654A5ED3993655A7311BD36A64F4A15E0CC49D8E711E9880AD8EBA268D83B462FC0BD103EC07291CFCE44EA4B87D98056655830BFA407CF8835E1D47F152AF583CA64B4D46BA6D7D7F48DBD7295F451DBE586726B5036C8C27824EA9E06CA84934146A84350661558C49D240F662BB23D7704D4E18B6F2485948E71CD8A0D1FB50C503E513098B9049EC4B93B90EB7D9287D40C5C81434C319D0FF6D9613A481410922618A6715AEAE900DC93A2D60E17CBDF6FDBB0B2688AF69B6C989CB868721F1E1BC4590470051A6C198C74F39BAFBBC2B4FBAD634FE8F813991823EA5EFBC771FD1CE6C57932267D863311BDFDB5AAF5CEA2FA589D59F869793FFF31189DDDA6732895BFD291CA2364217BDDD4F541A7E00317DEA353DCE11A3E041D29A77789D26549DE4C1D277736BC5B310C9321BAD03F692BCB7BF652B70262CC2F0BC2779252ABC78420DD83CC1CD509917FFFB12ABF4A6BDB8D1311C812B12A53143BF701830AA882A69FEF39034FAE2DF4D8489F3B0DBFB41AE5A2C524228A79F7973DFB08EDAF1A66F32F1F97B571A978971589349FB3F66548F47FF95B2228A936BD58DA5A5BF06E121D0A16DE906ECDB60791A3AB2235D2EBBB7CFD0E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/OWUDCZ+NimbusRomNo9L-ReguItal cguidfix
/F2.1/OWUDCZ+NimbusRomNo9L-ReguItal renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
2 J
[
4
4
] 0 d
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 217.10001 204.74791 rc
1 0 0 -1 -143.45 396 cm
327.41946 284.58054 m
327.42493 274.70728 325.46188 264.83835 321.6785 255.71875 c
317.90521 246.59497 312.31491 238.2285 305.32962 231.25092 c
298.35202 224.26561 289.98557 218.67532 280.86179 214.90202 c
271.74219 211.11865 261.87326 209.15561 252 209.16107 c
242.12675 209.15561 232.25783 211.11865 223.13821 214.90202 c
214.01443 218.67532 205.64796 224.26561 198.67038 231.25092 c
191.68509 238.2285 186.09479 246.59497 182.3215 255.71875 c
178.53813 264.83835 176.57507 274.70728 176.58054 284.58054 c
176.57507 294.4538 178.53813 304.32272 182.3215 313.44232 c
186.09479 322.5661 191.68509 330.93256 198.67038 337.91016 c
205.64796 344.89545 214.01443 350.48575 223.13821 354.25903 c
232.25783 358.04242 242.12675 360.00546 252 360 c
261.87326 360.00546 271.74219 358.04242 280.86179 354.25903 c
289.98557 350.48575 298.35202 344.89545 305.32962 337.91016 c
312.31491 330.93256 317.90521 322.5661 321.6785 313.44232 c
325.46188 304.32272 327.42493 294.4538 327.41946 284.58054 c
h
327.41946 284.58054 m
S
2.1286793 w
[] 0 d
0.64233637 0.64231712 0.64232802 sc
306.79523 245.79147 m
252 360 l
S
CM
167.37805 158.61407 m
166.40459 148.74069 l
160.28584 151.67635 l
h
167.37805 158.61407 m
f
0.53216982 w
1 0 0 -1 -143.45 396 cm
310.82806 237.38593 m
309.85458 247.25931 l
303.73584 244.32365 l
h
310.82806 237.38593 m
S
2.1286793 w
274.43652 222.26205 m
252 360 l
S
CM
132.48541 182.93961 m
134.33566 173.1924 l
127.63741 174.28351 l
h
132.48541 182.93961 m
f
0.53216982 w
1 0 0 -1 -143.45 396 cm
275.93542 213.06039 m
277.78568 222.8076 l
271.0874 221.71649 l
h
275.93542 213.06039 m
S
2.1286793 w
320.82715 291.17285 m
252 360 l
S
CM
183.96947 111.41946 m
179.77657 102.42775 l
174.97775 107.22656 l
h
183.96947 111.41946 m
f
0.53216982 w
1 0 0 -1 -143.45 396 cm
327.41946 284.58054 m
323.22656 293.57224 l
318.42776 288.77344 l
h
327.41946 284.58054 m
S
1 w
0 0 0 sc
144 360 m
360 360 l
S
Q
0.5 w
2 M
[] 0 d
/Cs2 SC
0 sc
q
0.55000001 0 216 36 rc
1 0 0 -1 -143.45 396 cm
271.27924 487.27924 m
413.26627 345.29218 l
S
264.91525 480.91525 m
406.90231 338.92822 l
S
258.5513 474.5513 m
400.53833 332.56427 l
S
252.18733 468.18735 m
394.17438 326.20029 l
S
245.82338 461.82336 m
387.81042 319.83633 l
S
239.45941 455.45941 m
381.44647 313.47238 l
S
233.09546 449.09546 m
375.08249 307.1084 l
S
226.73149 442.73151 m
368.71854 300.74445 l
S
220.36754 436.36752 m
362.35458 294.38049 l
S
214.00357 430.00357 m
355.9906 288.01654 l
S
207.63962 423.63962 m
349.62665 281.65256 l
S
201.27565 417.27563 m
343.2627 275.2886 l
S
194.91168 410.91168 m
336.89874 268.92465 l
S
188.54773 404.54773 m
330.53476 262.5607 l
S
182.18376 398.18378 m
324.17081 256.19672 l
S
158.00072 409.63889 m
317.80685 249.83276 l
S
151.63675 403.27493 m
311.44287 243.4688 l
S
145.2728 396.91098 m
305.07892 237.10484 l
S
121.08974 408.36609 m
298.71497 230.74088 l
S
114.72578 402.00214 m
292.35101 224.37692 l
S
Q
1 w
10 M
/Cs1 SC
0 0 0 sc
q
0 0 217.10001 204.74791 rc
1 0 0 -1 -143.45 396 cm
252 360 m
252 191.80208 l
S
2.7042606 w
162 234 m
252 360 l
S
1 w
300.36465 275.99481 m
285.77551 267.59518 269.20813 263.11765 252.28751 263.06747 c
S
CM
163.27956 116.00422 m
155.53004 117.99041 l
158.61978 122.50703 l
h
163.27956 116.00422 m
f
0.25 w
1 0 0 -1 -143.45 396 cm
306.72955 279.99579 m
298.98004 278.00958 l
302.06979 273.49298 l
h
306.72955 279.99579 m
S
Q
/Cs2 SC
0 sc
q
131.20552 135.28961 17 20 rc
2.2 0 0 2.2 -533.24829 -1258.3064 cm
/F1.1[ 9.9625998 0 0 9.9625998 0 0]sf
301.26099 635.31799 m
(!)s
/F2.1[ 7.3723001 0 0 7.3723001 0 0]sf
306.45099 633.823 m
(!)s
Q
2.1286793 w
/Cs1 SC
0.64233637 0.64231712 0.64232802 sc
q
0 0 217.10001 204.74791 rc
1 0 0 -1 -143.45 396 cm
310.08405 325.63068 m
252 360 l
S
CM
174.65758 75.116982 m
168.36206 67.449005 l
164.90605 73.28965 l
h
174.65758 75.116982 m
f
0.53216982 w
1 0 0 -1 -143.45 396 cm
318.10757 320.88303 m
311.81207 328.55099 l
308.35605 322.71036 l
h
318.10757 320.88303 m
S
2.7042606 w
0 0 0 sc
315.67917 271.16415 m
252 360 l
S
CM
179.97395 135.64026 m
176.16164 122.01697 l
168.29668 127.65472 l
h
179.97395 135.64026 m
f
0.67606515 w
1 0 0 -1 -143.45 396 cm
323.42395 260.35974 m
319.61163 273.98303 l
311.74667 268.34528 l
h
323.42395 260.35974 m
S
ep
end
%%Trailer
%%EOF
