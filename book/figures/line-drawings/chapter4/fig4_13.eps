%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig4_bicycle_polar_coord.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Remo Pillat
%%CreationDate: 7/15/2022
%%BoundingBox: 0 0 494 460
%%HiResBoundingBox: 0 0 493.0708 459.1099
%%CropBox: 0 0 493.0708 459.1099
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.3 x691 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2022-07-15T15:29:16-04:00</xmp:CreateDate>
         <xmp:ModifyDate>2022-07-15T15:29:16-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2022-07-15T15:29:16-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>240</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA8AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8l/MeS48u3N/wCcIbIxy+rZ22mWDLGTcX0UsjS3g9NnKh7Q&#xA;lPi+JqfEo4rXqey4R1MY6aUtvVKUt/TH01Df+nv3C9juXFzzMBxD8fgPU9Pvre/sLa+tm5W93Ek8&#xA;LeKSKGU/cc5rLjOOZhLnE0fg5MTYsK+VpdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;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&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>493.070801</stDim:w>
            <stDim:h>462.617188</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:D38346FA7304ED11B3AFBB1527F8536C</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:D38346FA7304ED11B3AFBB1527F8536C</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:3705d511-caa2-48f8-9f8b-5ebe57dece5d</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:90b3b53c-d48a-4ce7-8fd0-0586a09b22a8</stRef:instanceID>
            <stRef:documentID>uuid:3705d511-caa2-48f8-9f8b-5ebe57dece5d</stRef:documentID>
            <stRef:originalDocumentID>uuid:3705d511-caa2-48f8-9f8b-5ebe57dece5d</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D38346FA7304ED11B3AFBB1527F8536C</stEvt:instanceID>
                  <stEvt:when>2022-07-15T15:29:16-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -459.11 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 459.11 li
493.071 459.11 li
493.071 0 li
cp
clp
277.065 67.291 mo
447.144 66.8555 li
493.071 122.596 li
447.435 180.241 li
277.357 180.677 li
277.065 67.291 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.917647 .917647 .917647 rgb
f
43.2539 331.168 mo
190.546 246.129 li
258.125 271.612 li
247.24 344.325 li
99.9468 429.364 li
43.2539 331.168 li
cp
f
gsave
282.065 29.7661 mo
340.065 29.7661 li
340.065 34.7661 li
282.065 34.7661 li
282.065 29.7661 li
cp
clp
282.067 29.7661 mo
282.067 34.7661 li
340.067 34.7661 li
340.067 29.7661 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 459.11 ]ct
[57.9999 0 0 4.99999 282.067 424.344 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 174 
/H 15 
/M[174 0 0 -15 0 15 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&K)^H&K)^H&j8T,OU$fGY!;HKm!;+Y+M=(B<rr3&lmd>\pg$Sk7rr2ugYNi.Q!;?El!:eq2
K'N3t!;?El!:c*7bN]*$rr2ug^$;-Q!;?El!:fF@K'M^f!;?El!:cTE^$5Ukrr2ugbNb,Q!;?El!:fpN
K'M4X!;?El!:d)SYNc,]rr2ugg$41S!p](Err2ugM<`IQ!;?El!:dSaU$;XOrr2ugkN[Zan`g,Jrr2ug
Qg2HQ!VZNps8VVClI>)!pAY'ln[.SXl2^PWrrDTLl@S<ol2^PWrrDSQlGi)hpAY'ln\XRXl2^PWrrDTZ
l@S<al2^PWrrDS_lF?*ZpAY'ln^-QXl2^PWrrV`Ul@S<Sl2^PWrrDSmlDj+LpAY'ln_WP_lMBcGpAY'l
nW)nXl2^PWrrDT&lC@,>pAY'lna,OmlKmd9pAY'lnXSmXl2^PWrrDT4lAk-0pAY'lnbVO&lJCe+pAY'l
nZ(lXl2^PWrrDTBl@S:&lK\*BrrDSGlHnerpAY'ln[RkXl2^PWrrDTPl@S<kl2gVYJ,~>

%%EndBinary
grestore
np
grestore
gsave
383.065 34.7661 mo
440.065 34.7661 li
440.065 59.7661 li
383.065 59.7661 li
383.065 34.7661 li
cp
clp
382.35 34.145 mo
440.35 34.145 li
440.35 60.145 li
382.35 60.145 li
382.35 34.145 li
cp
clp
383.067 34.7661 mo
383.067 59.7661 li
440.067 59.7661 li
440.067 34.7661 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 459.11 ]ct
[56.9999 0 0 25 383.067 399.344 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 171 
/H 75 
/M[171 0 0 -75 0 75 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
!<.WLf)>XJYPkL"s8LdOK)PZH!WMeKlI"ktnb0?TV<S*Op>G4flM0WFnb.t-bj#6!p:9I]l2gGKjm%H_
oBHAHp6+^]l2gGK^?V3Q!V,mKl@S<hl2gGKQg2HQ!V,m$lB^]9nb2G:K'MUc!V,lRlFlH`nb1&hOm2u;
p@RX%lK%42nb/[A\EX+bp<Dl]l2gGKq<ERshs(74p87,]l2gGKdcuVQ!:^'_KBh%Q!V,lelDj+Mnb1`&
K'N="!V,l>lI"ktnb0?TV<S*Op>G4flM0WFnb.t-bj#6!p:9I]l2gGKjm%H_oBHAHp6+^]l2gGK^?V3Q
!V,mKl@S<hl2gGKQg2HQ!V,m$lB^]9nb2G:K'MUc!V,lRlFlH`nb1&hOm2u;p@RX%lK%42nb/[A\EX+b
p<Dl]l2gGKq<ERshs(74p87,]l2gGKdcuVQ!:^'_KBh%Q!V,lelDj+Mnb1`&K'N="!V,l>lI"ktnb0?T
V<S*Op>G4flM0WFnb.t-bj#6!p:9I]l2gGKjm%H_oBHAHp6+^]l2gGK^?V3Q!V,mKl@S<hl2gGKQg2HQ
!V,m$lB^]9nb2G:K'MUc!V,lRlFlH`nb1&hOm2u;p@RX%lK%42nb/[A\EX+bp<Dl]l2gGKq<ERshs(74
p87,]l2gGKdcuVQ!:^'_KBh%Q!V,lelDj+Mnb1`&K'N="!V,l>lI"ktnb0?TV<S*Op>G4flM0WFnb.t-
bj#6!p:9I]l2gGKjm%H_oBHAHp6+^]l2gGK^?V3Q!V,mKl@S<hl2gGKQg2HQ!V,m$lB^]9nb2G:K'MUc
!V,lRlFlH`nb1&hOm2u;p@RX%lK%42nb/[A\EX+bp<Dl]l2gGKq<ERshs(74p87,]l2gGKdcuVQ!:^'_
KBh%Q!V,lelDj+Mnb1`&K'N="!V,l>lI"ktnb0?TV<S*Op>G4flM0WFnb.t-bj#6!p:9I]l2gGKjm%H_
oBHAHp6+^]l2gGK^?V3Q!V,mKl@S<hl2gGKQg2HQ!V,m$lB^]9nb2G:K'MUc!V,lRlFlH`nb1&hOm2u;
p@RX%lK%42nb/[A\EX+bp<Dl]l2gGKq<ERshs(74p87,]l2gGKdcuVQ!:^'_KBh%Q!V,lelDj+Mnb1`&
K'N="!V,l>lI"ktnb0?TV<S*Op>G4flM0WFnb.t-bj#6!p:9I]l2gGKjm%H_oBHAHp6+^]l2gGK^?V3Q
!V,mKl@S<hl2gGKQg2HQ!V,m$lB^]9nb2G:K'MUc!V,lRlFlH`nb1&hOm2u;p@RX%lK%42nb/[A\EX+b
p<Dl]l2gGKq<ERshs(74p87,]l2gGKdcuVQ!:^'_KBh%Q!V,lelDj+Mnb1`&K'N="!V,l>lI"ktnb0?T
V<S*Op>G4flM0WFnb.t-bj#6!p:9I]l2gGKjm%H_oBHAHp6+^]l2gGK^?V3Q!V,mKl@S<hl2gGKQg2HQ
!V,m$lB^]9nb2G:K'MUc!V,lRlFlH`nb1&hOm2u;p@RX%lK%42nb/[A\EX+bp<Dl]l2gGKq<ERshs(74
p87,]l2gGKdcuVQ!:^'_KBh%Q!V,lelDj+Mnb1`&K'N="!V,l>lI"ktnb0?TV<S*Op>G4flM0WFnb.t-
bj#6!p:9I]l2gGKjm%H_oBHAHp6+^]l2gGK^?V3Q!V,mKl@S<hl2gGKQg2HQ!V,m$lB^]9nb2G:K'MUc
!V,lRlFlH`nb1&hOm2u;p@RX%lK%42nb/[A\EX+bp<Dl]l2gGKq<ERshs(74p87,]l2gGKdcuVQ!:^'_
KBh%Q!V,lelDj+Mnb1`&K'N="!V,l>lI"ktnb0?TV<S*Op>G4flM0WFnb.t-bj#6!p:9I]l2gGKjm%H_
oBHAHp6+^]l2gGK^?V3Q!V,mKl@S<hl2gGKQg2HQ!V,m$lB^]9nb2G:K'MUc!V,lRlFlH`nb1&hOm2u;
p@RX%lK%42nb/[A\EX+bp<Dl]l2gGKq<ERshs(74p87,]l2gGKdcuVQ!:^'_KBh%Q!V,lelDj+Mnb1`&
K'N="!V,l>lI"ktnb0?TV<S*Op>G4flM0WFnb.t-bj#6!p:9I]l2gGKjm%H_oBHAHp6+^]l2gGK^?V3Q
!V,mKl@S<hl2gGKQg2HQ!V,m$lB^]9nb2G:K'MUc!V,lRlFlH`nb1&hOm2u;p@RX%lK%41nUL~>

%%EndBinary
grestore
np
grestore
gsave
282.065 34.7661 mo
340.065 34.7661 li
340.065 59.7661 li
282.065 59.7661 li
282.065 34.7661 li
cp
clp
282.067 34.7661 mo
282.067 59.7661 li
340.067 59.7661 li
340.067 34.7661 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 459.11 ]ct
[57.9999 0 0 25 282.067 399.344 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 174 
/H 75 
/M[174 0 0 -75 0 75 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
!rr;jL$I1Q!;?El!:dG]V<S'Srr2ugj6D6]p$)PNrr2ugPNp0Q!;?El!:dqkQg+SErr2ugn`k_kkNW'@
rr2ugU$B/Q!;?El!:eG$M<Y*7rr3&ilKWudg$/S2rr2ugYNi.Q!;?El!:eq2K'N3t!;?El!:c*7bN]*$
rr2ug^$;-Q!;?El!:fF@K'M^f!;?El!:cTE^$5Ukrr2ugbNb,Q!;?El!:fpNK'M4X!;?El!:d)SYNc,]
rr2ugg$41S!p](Err2ugM<`IQ!;?El!:dSaU$;XOrr2ugkN[Zan`g,Jrr2ugQg2HQ!VZNps8VVClI>)!
pAY'ln[.SXl2^PWrrDTLl@S<ol2^PWrrDSQlGi)hpAY'ln\XRXl2^PWrrDTZl@S<al2^PWrrDS_lF?*Z
pAY'ln^-QXl2^PWrrV`Ul@S<Sl2^PWrrDSmlDj+LpAY'ln_WP_lMBcGpAY'lnW)nXl2^PWrrDT&lC@,>
pAY'lna,OmlKmd9pAY'lnXSmXl2^PWrrDT4lAk-0pAY'lnbVO&lJCe+pAY'lnZ(lXl2^PWrrDTBl@S:&
lK\*BrrDSGlHnerpAY'ln[RkXl2^PWrrDTPl@S<kl2^PWrrDSUlGDfepAY3os7(g.eER&-rr2ug[-FLQ
!;?El!:f+7K'N$o!;?El!:c9<`p*Qtrr2ug_WmKQ!;?El!:fUEK'MOa!;?El!:ccJ\EX(frr2ugd-?JQ
!;?El!qGR@K'M%S!;?El!:d8XWp0TXrr2ughWf^XqW\(Srr2ugNp=gQ!;?El!:dbfSE^+Jrr2ugm-92f
m-4TErr2ugSEdfQ!;?El!:e7tNp6W<rr2ugqW`[thWb+7rr2ugWp6eQ!;?El!:eb-K'EF&lLt5W!:bp2
d-:W)rr2ug\E]dQ!;?El!:f7;K'Mmk!;?El!:cE@_Wh0qrrW6#nV-8Xl2^PWrrDSrlD<bGpAY'ln`/nd
lLjEBpAY'lnWW7Xl2^PWrrDT+lBgc9pAY'lnaYmrlK@F4pAY'lnY,6Xl2^PWrrDT9lA=d+pAY'nn`oCk
lIkG&pAY'lnZV5Xl2^PWrrDTGl@S<tl2^PWrrDSLlHAGmpAY'ln\+4Xl2^PWrrDTUl@S<fl2^PWrrDSZ
lFlH_pAY'ln]U3Xl2^PWrrDTcl@S<Xl2^PWrrDShlEBIQpAY'ln_*2Zl2p89pAY'lnVQPXl2^PWrrDT!
lCmJCpAY'ln`T1hlLF->pAY'lnX&OXl2gVY!rr;jL$I1Q!;?El!:dG]V<S'Srr2ugj6D6]p$)PNrr2ug
PNp0Q!;?El!:dqkQg+SErr2ugn`k_kkNW'@rr2ugU$B/Q!;?El!:eG$M<Y*7rr3&ilKWudg$/S2rr2ug
YNi.Q!;?El!:eq2K'N3t!;?El!:c*7bN]*$rr2ug^$;-Q!;?El!:fF@K'M^f!;?El!:cTE^$5Ukrr2ug
bNb,Q!;?El!:fpNK'M4X!;?El!:d)SYNc,]rr2ugg$41S!p](Err2ugM<`IQ!;?El!:dSaU$;XOrr2ug
kN[Zan`g,Jrr2ugQg2HQ!VZNps8VVClI>)!pAY'ln[.SXl2^PWrrDTLl@S<ol2^PWrrDSQlGi)hpAY'l
n\XRXl2^PWrrDTZl@S<al2^PWrrDS_lF?*ZpAY'ln^-QXl2^PWrrV`Ul@S<Sl2^PWrrDSmlDj+LpAY'l
n_WP_lMBcGpAY'lnW)nXl2^PWrrDT&lC@,>pAY'lna,OmlKmd9pAY'lnXSmXl2^PWrrDT4lAk-0pAY'l
nbVO&lJCe+pAY'lnZ(lXl2^PWrrDTBl@S:&lK\*BrrDSGlHnerpAY'ln[RkXl2^PWrrDTPl@S<kl2^PW
rrDSUlGDfepAY3os7(g.eER&-rr2ug[-FLQ!;?El!:f+7K'N$o!;?El!:c9<`p*Qtrr2ug_WmKQ!;?El
!:fUEK'MOa!;?El!:ccJ\EX(frr2ugd-?JQ!;?El!qGR@K'M%S!;?El!:d8XWp0TXrr2ughWf^XqW\(S
rr2ugNp=gQ!;?El!:dbfSE^+Jrr2ugm-92fm-4TErr2ugSEdfQ!;?El!:e7tNp6W<rr2ugqW`[thWb+7
rr2ugWp6eQ!;?El!:eb-K'EF&lLt5W!:bp2d-:W)rr2ug\E]dQ!;?El!:f7;K'Mmk!;?El!:cE@_Wh0q
rrW6#nV-8Xl2^PWrrDSrlD<bGpAY'ln`/ndlLjEBpAY'lnWW7Xl2^PWrrDT+lBgc9pAY'lnaYmrlK@F4
pAY'lnY,6Xl2^PWrrDT9lA=d+pAY'nn`oCklIkG&pAY'lnZV5Xl2^PWrrDTGl@S<tl2^PWrrDSLlHAGm
pAY'ln\+4Xl2^PWrrDTUl@S<fl2^PWrrDSZlFlH_pAY'ln]U3Xl2^PWrrDTcl@S<Xl2^PWrrDShlEBIQ
pAY'ln_*2Zl2p89pAY'lnVQPXl2^PWrrDT!lCmJCpAY'ln`T1hlLF->pAY'lnX&OXl2gVY!rr;jL$I1Q
!;?El!:dG]V<S'Srr2ugj6D6]p$)PNrr2ugPNp0Q!;?El!:dqkQg+SErr2ugn`k_kkNW'@rr2ugU$B/Q
!;?El!:eG$M<Y*7rr3&ilKWudg$/S2rr2ugYNi.Q!;?El!:eq2K'N3t!;?El!:c*7bN]*$rr2ug^$;-Q
!;?El!:fF@K'M^f!;?El!:cTE^$5Ukrr2ugbNb,Q!;?El!:fpNK'M4X!;?El!:d)SYNc,]rr2ugg$41S
!p](Err2ugM<`IQ!;?El!:dSaU$;XOrr2ugkN[Zan`g,Jrr2ugQg2HQ!VZNps8VVClI>)!pAY'ln[.SX
l2^PWrrDTLl@S<ol2^PWrrDSQlGi)hpAY'ln\XRXl2^PWrrDTZl@S<al2^PWrrDS_lF?*ZpAY'ln^-QX
l2^PWrrV`Ul@S<Sl2^PWrrDu#qPsAlrVlfsr8.:%qYL$grVlfsr/UWsq>gK)s+:9&s+:9&s+:9&s+:9Q
s*t~>

%%EndBinary
grestore
np
grestore
gsave
383.065 59.7661 mo
440.065 59.7661 li
440.065 63.7661 li
383.065 63.7661 li
383.065 59.7661 li
cp
clp
382.35 59.145 mo
440.35 59.145 li
440.35 64.145 li
382.35 64.145 li
382.35 59.145 li
cp
clp
383.067 59.7661 mo
383.067 63.7661 li
440.067 63.7661 li
440.067 59.7661 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 459.11 ]ct
[56.9999 0 0 4 383.067 395.344 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 171 
/H 12 
/M[171 0 0 -12 0 12 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
!;;'1f'3;+p93b]l2gGKgZjCUrTXFRp5&"]l2gGK[-FLQ!V,mAl@S<rl2gGKNU"aQ!V,lolCdDCnb2)0
K'Msm!V,lHlGr/jnb0]^S*C%Ep?LpplL*p<nb/=7_Wh0lp;?0]l2gGKn*5Mil08<>p71E]l2gGKaQeoQ
!V,mUl@S<^l2gGKU$B/Q!V,m.lAY!/nb2eDK'M7Y!V,l\lEfaVnb1DrL["m0!;;'1f'3;+p93b]l2gGK
gZjCUrTXFRp5&"]l2gGK[-FLQ!V,mAl@S<rl2gGKNU"aQ!V,lol_*PEo(M22K'W$o!V5rIlc8;ko"G'T
s+:9&s2"_c~>

%%EndBinary
grestore
np
grestore
gsave
384.065 186.766 mo
441.065 186.766 li
441.065 188.766 li
384.065 188.766 li
384.065 186.766 li
cp
clp
383.35 186.145 mo
441.35 186.145 li
441.35 189.145 li
383.35 189.145 li
383.35 186.145 li
cp
clp
384.067 186.766 mo
384.067 188.766 li
441.067 188.766 li
441.067 186.766 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 459.11 ]ct
[56.9999 0 0 2 384.067 270.344 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 171 
/H 6 
/M[171 0 0 -6 0 6 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
!;hEDf(]:Dqlfdpp]:<ig\?BqrV-EknqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1
K'Msm!VZ)IlGr/jp@>r_S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ
!VZ*Vl@S<^l2^O.~>

%%EndBinary
grestore
np
grestore
gsave
384.065 188.766 mo
441.065 188.766 li
441.065 215.766 li
384.065 215.766 li
384.065 188.766 li
cp
clp
383.35 188.145 mo
441.35 188.145 li
441.35 216.145 li
383.35 216.145 li
383.35 188.145 li
cp
clp
384.067 188.766 mo
384.067 215.766 li
441.067 215.766 li
441.067 188.766 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 459.11 ]ct
[56.9999 0 0 27 384.067 243.344 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 171 
/H 81 
/M[171 0 0 -81 0 81 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 171 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
!:kd-f'3;0nuq>Yl2gVLgZjCUrTXFWnqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1
K'Msm!VZ)IlGr/jp@>r_S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ
!VZ*Vl@S<^l2gVLU$B/Q!VZ*/lAY!/p@A%EK'M7Y!VZ)]lEfaVp@?YsL["m5!:kd-f'3;0nuq>Yl2gVL
gZjCUrTXFWnqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1K'Msm!VZ)IlGr/jp@>r_
S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ!VZ*Vl@S<^l2gVLU$B/Q
!VZ*/lAY!/p@A%EK'M7Y!VZ)]lEfaVp@?YsL["m5!:kd-f'3;0nuq>Yl2gVLgZjCUrTXFWnqcSYl2gVL
[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1K'Msm!VZ)IlGr/jp@>r_S*C%Jo'5LllL*p<p@=R8
_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ!VZ*Vl@S<^l2gVLU$B/Q!VZ*/lAY!/p@A%EK'M7Y
!VZ)]lEfaVp@?YsL["m5!:kd-f'3;0nuq>Yl2gVLgZjCUrTXFWnqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVL
NU"aQ!VZ)plCdDCp@@>1K'Msm!VZ)IlGr/jp@>r_S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mi
l08<Cnso!Yl2gVLaQeoQ!VZ*Vl@S<^l2gVLU$B/Q!VZ*/lAY!/p@A%EK'M7Y!VZ)]lEfaVp@?YsL["m5
!:kd-f'3;0nuq>Yl2gVLgZjCUrTXFWnqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1
K'Msm!VZ)IlGr/jp@>r_S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ
!VZ*Vl@S<^l2gVLU$B/Q!VZ*/lAY!/p@A%EK'M7Y!VZ)]lEfaVp@?YsL["m5!:kd-f'3;0nuq>Yl2gVL
gZjCUrTXFWnqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1K'Msm!VZ)IlGr/jp@>r_
S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ!VZ*Vl@S<^l2gVLU$B/Q
!VZ*/lAY!/p@A%EK'M7Y!VZ)]lEfaVp@?YsL["m5!:kd-f'3;0nuq>Yl2gVLgZjCUrTXFWnqcSYl2gVL
[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1K'Msm!VZ)IlGr/jp@>r_S*C%Jo'5LllL*p<p@=R8
_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ!VZ*Vl@S<^l2gVLU$B/Q!VZ*/lAY!/p@A%EK'M7Y
!VZ)]lEfaVp@?YsL["m5!:kd-f'3;0nuq>Yl2gVLgZjCUrTXFWnqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVL
NU"aQ!VZ)plCdDCp@@>1K'Msm!VZ)IlGr/jp@>r_S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mi
l08<Cnso!Yl2gVLaQeoQ!VZ*Vl@S<^l2gVLU$B/Q!VZ*/lAY!/p@A%EK'M7Y!VZ)]lEfaVp@?YsL["m5
!:kd-f'3;0nuq>Yl2gVLgZjCUrTXFWnqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1
K'Msm!VZ)IlGr/jp@>r_S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ
!VZ*Vl@S<^l2gVLU$B/Q!VZ*/lAY!/p@A%EK'M7Y!VZ)]lEfaVp@?YsL["m5!:kd-f'3;0nuq>Yl2gVL
gZjCUrTXFWnqcSYl2gVL[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ)plCdDCp@@>1K'Msm!VZ)IlGr/jp@>r_
S*C%Jo'5LllL*p<p@=R8_Wh0qo#'aYl2gVLn*5Mil08<Cnso!Yl2gVLaQeoQ!VZ*Vl@S<^l2gVLU$B/Q
!VZ*/lAY!/p@A%EK'M7Y!VZ)]lEfaVp@?YsL["m5!:kd-f'3;0nuq>Yl2gVLgZjCUrTXFWnqcSYl2gVL
[-FLQ!VZ*Bl@S<rl2gVLNU"aQ!VZ2sn=]7Oq"<b<K(/C$!Vl>NnAk"upq?]Zs+:9&s2"_c~>

%%EndBinary
grestore
np
grestore
gsave
282.065 188.766 mo
340.065 188.766 li
340.065 215.766 li
282.065 215.766 li
282.065 188.766 li
cp
clp
282.067 188.766 mo
282.067 215.766 li
340.067 215.766 li
340.067 188.766 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 459.11 ]ct
[57.9999 0 0 27 282.067 243.344 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 174 
/H 81 
/M[174 0 0 -81 0 81 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K)^H&K)^H&nc&U`POc`a!;ZWo!;FA$Qgt.Prr2umna_;&kOJWKrr2uhU$B/Q!;?El!:nM%M<Y*7rr3&j
lKWudg$/S2rr2uhYNi.Q!;?El!:o"3K'N3t!;?El!:l08bN]*$rr2uh^$;-Q!;?El!:oLAK'M^f!;?El
!:lZF^$5Ukrr2uhbNb,Q!;?El!:p!OK'M4X!;?El!:m/TYNc,]rr2uhg$41S!p](Err2uhM<`IQ!;?El
!:mYbU$;XOrr2uhkN[Zan`g,Jrr2uhQg2HQ!VZNps8VYDlI>)!pAY'lo!I\Yl2^PWrrDWMl@S<ol2^PW
rrDVRlGi)hpAY'lo"s[Yl2^PWrrDW[l@S<al2^PWrrDV`lF?*ZpAY'lo$HZYl2^PWrrVcVl@S<Sl2^PW
rrDVnlDj+LpAY'lo%rY`lMBcGpAY'lnrE"Yl2^PWrrDW'lC@,>pAY'lo'GXnlKmd9pAY'lnso!Yl2^PW
rrDW5lAk-0pAY'lo(qX'lJCe+pAY'lnuCuYl2^PWrrDWCl@S:&lK\*BrrDVHlHnerpAY'lo!mtYl2^PW
rrDWQl@S<kl2^PWrrDVVlGDfepAY3os71m/eER&-rr2uh[-FLQ!;?El!:o18K'N$o!;?El!:l?=`p*Qt
rr2uh_WmKQ!;?El!:o[FK'MOa!;?El!:liK\EX(frr2uhd-?JQ!;?El!qPXAK'M%S!;?El!:m>YWp0TX
rr2uhhWf^XqW\(Srr2uhNp=gQ!;?El!:mhgSE^+Jrr2uhm-92fm-4TErr2uhSEdfQ!;?El!:n=uNp6W<
rr2uhqW`[thWb+7rr2uhWp6eQ!;?El!:nh.K'EF&lLt5W!:l!3d-:W)rr2uh\E]dQ!;?El!:o=<K'Mmk
!;?El!:lKA_Wh0qrrW6#nqHAYl2^PWrrDVslD<bGpAY'lo&K"elLjEBpAY'lnrr@Yl2^PWrrDW,lBgc9
pAY'lo'u!slK@F4pAY'lntG?Yl2^PWrrDW:lA=d+pAY'no'5LllIkG&pAY'lnuq>Yl2^PWrrDWHl@S<t
l2^PWrrDVMlHAGmpAY'lo"F=Yl2^PWrrDWVl@S<fl2^PWrrDV[lFlH_pAY'lo#p<Yl2^PWrrDWdl@S<X
l2^PWrrDVilEBIQpAY'lo%E;[l2p89pAY'lnqlYYl2^PWrrDW"lCmJCpAY'lo&o:ilLF->pAY'lnsAXY
l2gVY!rr;kL$I1Q!;?El!:mM^V<S'Srr2uhj6D6]p$)PNrr2uhPNp0Q!;?El!:n"lQg+SErr2uhn`k_k
kNW'@rr2uhU$B/Q!;?El!:nM%M<Y*7rr3&jlKWudg$/S2rr2uhYNi.Q!;?El!:o"3K'N3t!;?El!:l08
bN]*$rr2uh^$;-Q!;?El!:oLAK'M^f!;?El!:lZF^$5Ukrr2uhbNb,Q!;?El!:p!OK'M4X!;?El!:m/T
YNc,]rr2uhg$41S!p](Err2uhM<`IQ!;?El!:mYbU$;XOrr2uhkN[Zan`g,Jrr2uhQg2HQ!VZNps8VYD
lI>)!pAY'lo!I\Yl2^PWrrDWMl@S<ol2^PWrrDVRlGi)hpAY'lo"s[Yl2^PWrrDW[l@S<al2^PWrrDV`
lF?*ZpAY'lo$HZYl2^PWrrVcVl@S<Sl2^PWrrDVnlDj+LpAY'lo%rY`lMBcGpAY'lnrE"Yl2^PWrrDW'
lC@,>pAY'lo'GXnlKmd9pAY'lnso!Yl2^PWrrDW5lAk-0pAY'lo(qX'lJCe+pAY'lnuCuYl2^PWrrDWC
l@S:&lK\*BrrDVHlHnerpAY'lo!mtYl2^PWrrDWQl@S<kl2^PWrrDVVlGDfepAY3os71m/eER&-rr2uh
[-FLQ!;?El!:o18K'N$o!;?El!:l?=`p*Qtrr2uh_WmKQ!;?El!:o[FK'MOa!;?El!:liK\EX(frr2uh
d-?JQ!;?El!qPXAK'M%S!;?El!:m>YWp0TXrr2uhhWf^XqW\(Srr2uhNp=gQ!;?El!:mhgSE^+Jrr2uh
m-92fm-4TErr2uhSEdfQ!;?El!:n=uNp6W<rr2uhqW`[thWb+7rr2uhWp6eQ!;?El!:nh.K'EF&lLt5W
!:l!3d-:W)rr2uh\E]dQ!;?El!:o=<K'Mmk!;?El!:lKA_Wh0qrrW6#nqHAYl2^PWrrDVslD<bGpAY'l
o&K"elLjEBpAY'lnrr@Yl2^PWrrDW,lBgc9pAY'lo'u!slK@F4pAY'lntG?Yl2^PWrrDW:lA=d+pAY'n
o'5LllIkG&pAY'lnuq>Yl2^PWrrDWHl@S<tl2^PWrrDVMlHAGmpAY'lo"F=Yl2^PWrrDWVl@S<fl2^PW
rrDV[lFlH_pAY'lo#p<Yl2^PWrrDWdl@S<Xl2^PWrrDVilEBIQpAY'lo%E;[l2p89pAY'lnqlYYl2^PW
rrDW"lCmJCpAY'lo&o:ilLF->pAY'lnsAXYl2gVY!rr;kL$I1Q!;?El!:mM^V<S'Srr2uhj6D6]p$)PN
rr2uhPNp0Q!;?El!:n"lQg+SErr2uhn`k_kkNW'@rr2uhU$B/Q!;?El!:nM%M<Y*7rr3&jlKWudg$/S2
rr2uhYNi.Q!;?El!:o"3K'N3t!;?El!:l08bN]*$rr2uh^$;-Q!;?El!:oLAK'M^f!;?El!:lZF^$5Uk
rr2uhbNb,Q!;?El!:p!OK'M4X!;?El!:m/TYNc,]rr2uhg$41S!p](Err2uhM<`IQ!;?El!:mYbU$;XO
rr2uhkN[Zan`g,Jrr2uhQg2HQ!VZNps8VYDlI>)!pAY'lo!I\Yl2^PWrrDWMl@S<ol2^PWrrDVRlGi)h
pAY'lo"s[Yl2^PWrrDW[l@S<al2^PWrrDV`lF?*ZpAY'lo$HZYl2^PWrrVcVl@S<Sl2^PWrrDVnlDj+L
pAY'lo%rY`lMBcGpAY'lnrE"Yl2^PWrrDW'lC@,>pAY'lo'GXnlKmd9pAY'lnso!Yl2^PWrrDW5lAk-0
pAY'lo(qX'lJCe+pAY'lnuCuYl2^PWrrDWCl@S:&lK\*BrrDVHlHnerpAY'lo!mtYl2^PWrrDWQl@S<k
l2^PWrrDVVlGDfepAY3os71m/eER&-rr2uh[-FLQ!;?El!:o18K'N$o!;?El!:l?=`p*Qtrr2uh_WmKQ
!;?El!:o[FK'MOa!;?El!:liK\EX(frr2uhd-?JQ!;?El!qPXAK'M%S!;?El!:m>YWp0TXrr2uhhWf^X
qW\(Srr2uhNp=gQ!;?El!:mhgSE^.Ks*t~>

%%EndBinary
grestore
np
grestore
gsave
282.065 215.766 mo
340.065 215.766 li
340.065 217.766 li
282.065 217.766 li
282.065 215.766 li
cp
clp
282.067 215.766 mo
282.067 217.766 li
340.067 217.766 li
340.067 215.766 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 459.11 ]ct
[57.9999 0 0 2 282.067 241.344 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 174 
/H 6 
/M[174 0 0 -6 0 6 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 174 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
!rr;kL$I1Q!;?El!:mM^V<S'Srr2uhj6D6]p$)PNrr2uhPNp0Q!;?El!:n"lQg+SErr2uhn`k_kkNW'@
rr2uhU$B/Q!;?El!:nM%M<Y*7rr3&jlKWudg$/S2rr2uhYNi.Q!;?El!:o"3K'N3t!;?El!:l08bN]*$
rr2uh^$;-Q!;?El!:oLAK'M^f!;?El!:lZF^$5Ukrr2uobP$ti!;lcq!;ZKbK(e'p!;lcq!;WYgYP&"o
s*t~>

%%EndBinary
grestore
np
grestore
gsave
73.0649 119.766 mo
470.862 119.766 li
470.862 120.766 li
73.0649 120.766 li
73.0649 119.766 li
cp
clp
.25 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
73.834 120.469 mo
470.686 120.469 li
0 0 0 rgb
@
grestore
gsave
302.065 0 mo
310.065 0 li
310.065 389.766 li
302.065 389.766 li
302.065 0 li
cp
clp
.25 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
306.112 .118652 mo
306.209 385.827 li
0 0 0 rgb
@
grestore
78.541 268.348 mo
92.7129 292.895 li
43.6162 321.243 li
29.4438 296.696 li
78.541 268.348 li
cp
.921555 .921555 .921555 rgb
f
157.913 405.821 mo
172.084 430.368 li
122.987 458.715 li
108.815 434.168 li
157.913 405.821 li
cp
f
115.772 338.5 mo
129.944 363.051 li
80.8462 391.399 li
66.6743 366.848 li
115.772 338.5 li
cp
.227451 .227451 .227451 rgb
f
155.631 212.024 mo
177.346 230.243 li
140.905 273.672 li
119.19 255.45 li
155.631 212.024 li
cp
.921555 .921555 .921555 rgb
f
235.002 350.918 mo
256.717 369.141 li
220.276 412.571 li
198.561 394.348 li
235.002 350.918 li
cp
f
196.717 280.45 mo
218.432 298.668 li
181.991 342.098 li
160.28 323.875 li
196.717 280.45 li
cp
.329412 .329412 .329412 rgb
f
.613971 lw
2 lc
0 lj
10 ml
[] 0 dsh
true sadj
247.026 245.293 mo
168.401 338.997 li
267.698 267.153 mo
41.8462 397.547 li
0 0 0 rgb
@
1 lw
235.94 285.286 mo
234.377 282.602 232.58 280.063 230.577 277.704 cv
@
224.928 272 mo
232.401 274.852 li
228.819 278.989 li
224.928 272 li
cp
f
.25 lw
224.928 272 mo
232.401 274.852 li
228.819 278.989 li
224.928 272 li
cp
@
2.06985 lw
244.686 277.329 mo
252.561 275.907 li
247.444 282.055 li
99.4712 365.075 mo
252.12 276.165 li
1 .129412 0 rgb
@
.613971 lw
28.4829 365.094 mo
334.624 365.094 li
0 0 0 rgb
@
1 lw
154.163 364.977 mo
154.127 358.497 152.944 352.102 150.69 346.071 cv
@
147.334 338.778 mo
153.366 344.04 li
148.573 346.684 li
147.334 338.778 li
cp
f
.25 lw
147.334 338.778 mo
153.366 344.04 li
148.573 346.684 li
147.334 338.778 li
cp
@
2.06985 lw
32.248 252.817 mo
30.9092 244.93 li
37.0063 250.114 li
99.1982 364.95 mo
31.1631 245.375 li
1 .129412 0 rgb
@
160.78 349.719 mo
161.186 347.75 161.67 346.579 162.358 345.641 cv
162.764 345.11 163.452 344.672 163.889 344.672 cv
164.342 344.672 164.842 345.11 165.045 345.641 cv
165.358 346.579 165.342 347.75 164.998 349.719 cv
160.78 349.719 li
cp
164.795 350.719 mo
164.358 352.766 163.905 353.922 163.202 354.875 cv
162.764 355.438 162.108 355.844 161.655 355.844 cv
161.186 355.844 160.702 355.422 160.498 354.875 cv
160.186 353.922 160.202 352.766 160.561 350.719 cv
164.795 350.719 li
cp
164.014 344 mo
163.327 344 162.545 344.297 161.78 344.844 cv
160.358 345.844 159.295 347.782 158.795 350.282 cv
158.327 352.641 158.545 354.485 159.405 355.5 cv
159.983 356.172 160.733 356.547 161.514 356.547 cv
162.202 356.547 162.983 356.266 163.764 355.704 cv
165.17 354.719 166.233 352.797 166.717 350.375 cv
167.217 347.922 166.998 346.094 166.139 345.047 cv
165.561 344.391 164.811 344 164.014 344 cv
164.014 344 li
cp
1 0 0 rgb
f
.613971 lw
156.061 250.52 mo
256.78 424.973 li
0 0 0 rgb
@
2.06985 lw
303.459 14.106 mo
306.151 6.5708 li
308.932 14.0752 li
306.834 120.231 mo
306.155 7.08301 li
410.788 117.497 mo
418.303 120.231 li
410.788 122.965 li
304.92 120.231 mo
417.795 120.231 li
.027451 .180392 1 rgb
@
432.405 121.614 mo
432.264 121.77 432.186 121.879 432.014 122.098 cv
431.608 122.629 431.389 122.801 431.186 122.801 cv
430.92 122.801 430.764 122.583 430.639 122.067 cv
430.608 121.926 430.577 121.817 430.561 121.77 cv
430.124 119.958 429.92 119.129 429.92 118.864 cv
430.702 117.489 431.358 116.692 431.67 116.692 cv
431.78 116.692 431.92 116.739 432.108 116.833 cv
432.327 116.958 432.452 117.004 432.592 117.004 cv
432.967 117.004 433.217 116.723 433.217 116.348 cv
433.217 115.973 432.92 115.692 432.483 115.692 cv
431.702 115.692 431.014 116.333 429.78 118.254 cv
429.577 117.27 li
429.327 116.051 429.124 115.692 428.639 115.692 cv
428.249 115.692 427.639 115.848 426.545 116.208 cv
426.342 116.286 li
426.42 116.551 li
427.108 116.395 427.264 116.348 427.42 116.348 cv
427.874 116.348 427.983 116.52 428.233 117.583 cv
428.749 119.801 li
427.28 121.895 li
426.92 122.426 426.561 122.754 426.374 122.754 cv
426.264 122.754 426.077 122.708 425.905 122.598 cv
425.67 122.473 425.467 122.411 425.327 122.411 cv
424.983 122.411 424.717 122.676 424.717 123.036 cv
424.717 123.504 425.077 123.801 425.608 123.801 cv
426.17 123.801 426.389 123.629 427.28 122.536 cv
427.764 121.973 428.139 121.489 428.889 120.442 cv
429.436 122.598 li
429.67 123.504 429.905 123.801 430.483 123.801 cv
431.155 123.801 431.624 123.364 432.67 121.754 cv
432.405 121.614 li
cp
0 0 1 rgb
f
296.127 .734375 mo
296.362 .672363 296.487 .65625 296.69 .65625 cv
297.706 .65625 297.971 1.10938 298.799 4.1875 cv
299.112 5.35938 299.534 7.45313 299.534 7.76514 cv
299.534 8.04736 299.424 8.34326 299.159 8.65625 cv
298.612 9.39014 298.252 9.85938 298.049 10.0781 cv
297.674 10.4683 297.456 10.6094 297.221 10.6094 cv
297.112 10.6094 296.987 10.5625 296.799 10.4224 cv
296.518 10.2031 296.331 10.1094 296.127 10.1094 cv
295.737 10.1094 295.424 10.4224 295.424 10.8125 cv
295.424 11.2651 295.831 11.5933 296.346 11.5933 cv
297.487 11.5933 299.846 8.90625 301.784 5.35938 cv
303.002 3.15625 303.502 1.85938 303.502 .984375 cv
303.502 .4375 303.049 0 302.518 0 cv
302.112 0 301.815 .265137 301.815 .65625 cv
301.815 .922363 301.956 1.125 302.315 1.35938 cv
302.659 1.5625 302.784 1.71826 302.784 1.96826 cv
302.784 2.6875 302.127 4.07813 300.596 6.60938 cv
300.237 4.53125 li
299.971 2.95313 298.971 0 298.69 0 cv
298.627 0 li
298.612 .0151367 298.534 .0151367 298.456 .0151367 cv
298.299 .03125 297.659 .140137 296.706 .3125 cv
296.612 .343262 296.377 .390137 296.127 .422363 cv
296.127 .734375 li
cp
f
303.303 130.774 mo
303.303 130.055 303.772 128.899 305.725 128.774 cv
305.819 128.758 305.881 128.696 305.881 128.586 cv
305.881 128.383 305.741 128.383 305.538 128.383 cv
303.756 128.383 302.116 129.305 302.1 130.633 cv
302.1 134.711 li
302.1 135.415 302.1 135.993 301.381 136.586 cv
300.756 137.102 300.069 137.133 299.678 137.149 cv
299.584 137.18 299.522 137.243 299.522 137.352 cv
299.522 137.524 299.631 137.524 299.803 137.555 cv
300.991 137.618 301.85 138.274 302.053 139.149 cv
302.1 139.336 302.1 139.383 302.1 140.024 cv
302.1 143.571 li
302.1 144.336 302.1 144.899 302.959 145.586 cv
303.663 146.118 304.85 146.321 305.538 146.321 cv
305.741 146.321 305.881 146.321 305.881 146.118 cv
305.881 145.946 305.772 145.946 305.6 145.93 cv
304.475 145.852 303.584 145.274 303.35 144.368 cv
303.303 144.211 303.303 144.165 303.303 143.524 cv
303.303 139.758 li
303.303 138.93 303.163 138.633 302.584 138.055 cv
302.209 137.68 301.694 137.493 301.178 137.352 cv
302.663 136.946 303.303 136.118 303.303 135.071 cv
303.303 130.774 li
cp
f
319.897 129.961 mo
319.631 129.883 li
319.319 130.321 319.022 130.493 318.553 130.493 cv
318.366 130.493 318.147 130.446 317.756 130.321 cv
316.866 130.04 316.084 129.883 315.35 129.883 cv
311.569 129.883 308.131 133.477 308.131 137.43 cv
308.131 138.649 308.647 139.899 309.491 140.758 cv
310.397 141.68 311.709 142.165 313.272 142.165 cv
314.85 142.165 316.147 141.821 317.522 141.04 cv
318.397 137.696 li
318.694 136.696 318.975 136.477 320.147 136.399 cv
320.147 136.118 li
315.366 136.118 li
315.366 136.399 li
315.584 136.415 315.819 136.461 315.897 136.461 cv
316.491 136.508 316.772 136.696 316.772 137.008 cv
316.772 137.399 316.663 137.915 316.272 139.243 cv
315.881 140.524 315.819 140.665 315.6 140.883 cv
315.209 141.274 314.538 141.493 313.725 141.493 cv
311.413 141.493 310.1 140.165 310.1 137.821 cv
310.1 135.618 310.975 133.336 312.397 131.821 cv
313.209 130.977 314.319 130.493 315.506 130.493 cv
316.663 130.493 317.647 130.977 318.194 131.805 cv
318.475 132.274 318.6 132.649 318.694 133.446 cv
319.022 133.493 li
319.897 129.961 li
cp
f
gsave
321.065 127.766 mo
327.795 127.766 li
327.795 146.637 li
321.065 146.637 li
321.065 127.766 li
cp
clp
324.014 143.93 mo
324.014 144.649 323.545 145.805 321.592 145.93 cv
321.499 145.946 321.436 146.008 321.436 146.118 cv
321.436 146.321 321.624 146.321 321.795 146.321 cv
323.53 146.321 325.202 145.446 325.217 144.071 cv
325.217 139.993 li
325.217 139.29 325.217 138.711 325.936 138.118 cv
326.561 137.602 327.249 137.571 327.639 137.555 cv
327.733 137.524 327.795 137.461 327.795 137.352 cv
327.795 137.18 327.686 137.18 327.514 137.149 cv
326.327 137.086 325.467 136.43 325.264 135.555 cv
325.217 135.368 325.217 135.321 325.217 134.68 cv
325.217 131.133 li
325.217 130.368 325.217 129.805 324.358 129.118 cv
323.639 128.555 322.405 128.383 321.795 128.383 cv
321.624 128.383 321.436 128.383 321.436 128.586 cv
321.436 128.758 321.545 128.758 321.717 128.774 cv
322.842 128.852 323.733 129.43 323.967 130.336 cv
324.014 130.493 324.014 130.54 324.014 131.18 cv
324.014 134.946 li
324.014 135.774 324.155 136.071 324.733 136.649 cv
325.108 137.024 325.624 137.211 326.124 137.352 cv
324.655 137.758 324.014 138.586 324.014 139.633 cv
324.014 143.93 li
cp
f
grestore
.613971 lw
98.5449 365.641 mo
380.135 29.1719 li
.027451 .180392 1 rgb
@
gsave
207.432 258.766 mo
218.963 258.766 li
218.963 268.524 li
207.432 268.524 li
207.432 258.766 li
cp
clp
214.998 263.766 mo
214.358 264.938 li
213.373 266.766 212.467 267.641 211.577 267.641 cv
211.014 267.641 210.53 267.282 210.358 266.766 cv
210.108 266.032 210.123 264.907 210.373 263.61 cv
210.623 262.313 211.108 261.219 211.717 260.438 cv
212.155 259.922 212.623 259.657 213.17 259.657 cv
214.452 259.657 215.077 260.688 215.014 262.735 cv
214.998 263.766 li
cp
217.545 259.125 mo
215.842 262.204 li
215.811 260.047 214.952 258.891 213.311 258.891 cv
212.483 258.891 211.545 259.235 210.748 259.813 cv
209.577 260.657 208.827 261.938 208.467 263.719 cv
207.905 266.563 208.952 268.329 211.295 268.329 cv
212.873 268.329 214.202 267.516 215.248 265.922 cv
215.264 266.266 215.342 266.594 215.452 267.032 cv
215.717 268.047 215.952 268.329 216.53 268.329 cv
217.123 268.329 217.623 267.954 217.998 267.204 cv
218.217 266.782 218.342 266.391 218.545 265.391 cv
218.092 265.391 li
217.873 266.297 217.405 266.969 216.952 266.969 cv
216.358 266.969 215.952 266.016 215.983 264.782 cv
219.139 259.125 li
217.545 259.125 li
cp
0 0 1 rgb
f
grestore
217.819 208.176 mo
217.866 207.911 li
218.006 207.239 218.209 206.817 218.6 206.411 cv
218.959 206.036 219.334 205.833 219.741 205.833 cv
221.428 205.833 222.459 207.786 221.991 210.067 cv
221.616 212.004 220.35 213.317 218.881 213.317 cv
218.131 213.317 217.491 212.786 217.288 212.067 cv
217.225 211.864 217.241 211.739 217.334 211.176 cv
217.819 208.176 li
cp
216.944 213.129 mo
217.272 213.817 217.928 214.192 218.819 214.192 cv
220.959 214.192 223.288 211.864 223.819 209.161 cv
224.35 206.614 223.084 204.754 220.85 204.754 cv
220.256 204.754 219.866 204.848 219.366 205.098 cv
218.6 205.473 217.881 205.989 217.288 206.567 cv
216.663 207.192 216.397 207.801 216.131 209.083 cv
214.725 216.114 li
214.584 216.833 214.459 217.239 214.194 217.911 cv
215.881 217.911 li
216.1 217.301 216.1 217.254 216.397 215.848 cv
216.944 213.129 li
cp
0 0 1 rgb
f
1 lw
352.893 112.231 mo
350.909 100.961 344.913 90.6802 335.87 83.3789 cv
.027451 .180392 1 rgb
@
353.616 120.227 mo
350.834 112.727 li
356.307 112.696 li
353.616 120.227 li
cp
f
.25 lw
353.616 120.227 mo
350.834 112.727 li
356.307 112.696 li
353.616 120.227 li
cp
@
358.53 90.2041 mo
358.78 88.938 359.717 88.063 360.764 88.063 cv
361.905 88.063 362.499 89.1099 362.202 90.5317 cv
362.014 91.4849 361.311 92.5161 360.842 92.5161 cv
360.78 92.5161 360.733 92.5161 360.467 92.438 cv
360.202 92.3911 360.077 92.3599 359.92 92.3599 cv
359.499 92.3599 359.077 92.6567 359.03 93 cv
358.952 93.3291 359.233 93.5469 359.686 93.5469 cv
359.795 93.5469 359.905 93.5317 360.092 93.5 cv
360.327 93.438 360.499 93.4219 360.639 93.4219 cv
360.874 93.4219 360.983 93.4692 361.077 93.563 cv
361.733 94.3291 361.952 95.688 361.655 97.1567 cv
361.295 98.9541 360.28 100.016 358.952 100.016 cv
358.061 100.016 357.249 99.5942 356.78 98.8911 cv
358.53 90.2041 li
cp
354.78 101.782 mo
354.577 102.735 354.186 103.969 353.889 104.657 cv
355.358 104.657 li
355.655 104.235 355.811 103.75 356.092 102.36 cv
356.577 99.9219 li
357.374 100.641 358.108 100.907 359.155 100.907 cv
361.295 100.907 363.077 99.3291 363.545 97.0161 cv
363.92 95.0942 363.249 93.75 361.452 92.9067 cv
362.952 92.1719 363.764 91.3442 363.967 90.3291 cv
364.28 88.7192 362.952 87.3911 361.045 87.3911 cv
359.108 87.3911 357.405 88.6719 357.061 90.375 cv
354.78 101.782 li
cp
0 0 1 rgb
f
320.78 117.618 mo
319.643 117.938 318.655 118.102 317.811 118.102 cv
316.311 118.102 315.159 117.68 314.358 116.836 cv
313.565 115.985 313.17 114.758 313.17 113.165 cv
313.17 111.614 313.569 110.407 314.374 109.54 cv
315.186 108.676 316.327 108.243 317.795 108.243 cv
318.741 108.243 319.737 108.383 320.78 108.665 cv
320.78 109.899 li
319.475 109.454 318.483 109.227 317.795 109.227 cv
316.784 109.227 315.999 109.579 315.436 110.274 cv
314.874 110.961 314.592 111.93 314.592 113.18 cv
314.592 114.422 314.889 115.383 315.483 116.071 cv
316.084 116.758 316.928 117.102 318.014 117.102 cv
318.459 117.102 318.94 117.024 319.452 116.868 cv
319.452 113.805 li
320.78 113.805 li
320.78 117.618 li
cp
0 0 0 rgb
f
325.877 117.086 mo
327.198 117.086 327.862 116.196 327.862 114.415 cv
327.862 112.645 327.209 111.758 325.909 111.758 cv
324.596 111.758 323.94 112.645 323.94 114.415 cv
323.94 116.196 324.584 117.086 325.877 117.086 cv
325.877 117.086 li
cp
325.862 118.024 mo
324.87 118.024 324.081 117.704 323.487 117.055 cv
322.901 116.399 322.612 115.52 322.612 114.415 cv
322.612 113.313 322.901 112.438 323.487 111.79 cv
324.081 111.145 324.885 110.821 325.909 110.821 cv
326.917 110.821 327.713 111.145 328.299 111.79 cv
328.893 112.438 329.19 113.313 329.19 114.415 cv
329.19 115.54 328.893 116.426 328.299 117.071 cv
327.706 117.708 326.893 118.024 325.862 118.024 cv
325.862 118.024 li
cp
f
334.518 116.305 mo
334.518 114.524 li
334.096 114.508 li
333.409 114.508 332.85 114.641 332.424 114.899 cv
332.006 115.161 331.799 115.504 331.799 115.93 cv
331.799 116.235 331.901 116.489 332.112 116.696 cv
332.331 116.907 332.588 117.008 332.893 117.008 cv
333.413 117.008 333.956 116.774 334.518 116.305 cv
334.518 116.305 li
cp
334.706 116.993 mo
333.956 117.68 333.229 118.024 332.534 118.024 cv
331.959 118.024 331.487 117.848 331.112 117.493 cv
330.737 117.129 330.549 116.676 330.549 116.133 cv
330.549 115.383 330.862 114.805 331.487 114.399 cv
332.12 113.993 333.034 113.79 334.221 113.79 cv
334.518 113.79 li
334.518 112.961 li
334.518 112.161 334.104 111.758 333.284 111.758 cv
332.627 111.758 331.913 111.961 331.143 112.368 cv
331.143 111.336 li
331.987 110.993 332.776 110.821 333.518 110.821 cv
334.288 110.821 334.854 111 335.221 111.352 cv
335.584 111.696 335.768 112.235 335.768 112.961 cv
335.768 116.086 li
335.768 116.797 335.987 117.149 336.424 117.149 cv
336.475 117.149 336.553 117.145 336.659 117.133 cv
336.752 117.821 li
336.471 117.954 336.159 118.024 335.815 118.024 cv
335.229 118.024 334.862 117.68 334.706 116.993 cv
334.706 116.993 li
cp
f
338.323 107.852 mo
339.573 107.852 li
339.573 117.868 li
338.323 117.868 li
338.323 107.852 li
cp
f
310.991 118.395 mo
310.991 117.747 310.862 117.094 310.612 116.497 cv
310.366 115.895 309.999 115.344 309.538 114.887 cv
309.077 114.426 308.53 114.059 307.928 113.813 cv
307.327 113.563 306.678 113.434 306.03 113.434 cv
305.381 113.434 304.729 113.563 304.131 113.813 cv
303.53 114.059 302.979 114.426 302.522 114.887 cv
302.061 115.344 301.694 115.895 301.448 116.497 cv
301.198 117.094 301.069 117.747 301.069 118.395 cv
301.069 119.043 301.198 119.692 301.448 120.293 cv
301.694 120.895 302.061 121.446 302.522 121.903 cv
302.979 122.364 303.53 122.731 304.131 122.977 cv
304.729 123.227 305.381 123.356 306.03 123.356 cv
306.678 123.356 307.327 123.227 307.928 122.977 cv
308.53 122.731 309.077 122.364 309.538 121.903 cv
309.999 121.446 310.366 120.895 310.612 120.293 cv
310.862 119.692 310.991 119.043 310.991 118.395 cv
310.991 118.395 li
cp
f
2.06985 lw
103.608 359.375 mo
299.463 126.024 li
.027451 .180392 1 rgb
@
304.737 119.743 mo
302.002 127.258 li
297.807 123.743 li
304.737 119.743 li
cp
98.334 365.657 mo
101.073 358.141 li
105.264 361.657 li
98.334 365.657 li
cp
f
.517463 lw
304.737 119.743 mo
302.002 127.258 li
297.807 123.743 li
304.737 119.743 li
cp
98.334 365.657 mo
101.073 358.141 li
105.264 361.657 li
98.334 365.657 li
cp
@
1 lw
224.713 291.915 mo
217.729 279.926 209.061 269.016 198.991 259.516 cv
@
192.998 254.168 mo
200.51 256.926 li
196.979 261.11 li
192.998 254.168 li
cp
f
.25 lw
192.998 254.168 mo
200.51 256.926 li
196.979 261.11 li
192.998 254.168 li
cp
@
1 lw
98.311 364.95 mo
297.213 364.95 li
0 0 0 rgb
@
305.241 364.95 mo
297.721 367.684 li
297.721 362.215 li
305.241 364.95 li
cp
f
.25 lw
305.241 364.95 mo
297.721 367.684 li
297.721 362.215 li
305.241 364.95 li
cp
@
1 lw
98.979 364.563 mo
97.6553 129.688 li
@
97.6079 121.661 mo
100.385 129.161 li
94.9131 129.192 li
97.6079 121.661 li
cp
f
.25 lw
97.6079 121.661 mo
100.385 129.161 li
94.9131 129.192 li
97.6079 121.661 li
cp
@
264.858 371.852 mo
271.28 384.758 li
258.389 384.758 li
264.858 371.852 li
cp
266.233 369.883 mo
266.077 369.571 266.014 369.461 265.608 369.461 cv
265.202 369.461 265.155 369.571 264.999 369.883 cv
256.92 386.086 li
256.795 386.305 256.795 386.352 256.795 386.383 cv
256.795 386.571 256.936 386.571 257.327 386.571 cv
273.905 386.571 li
274.295 386.571 274.436 386.571 274.436 386.383 cv
274.436 386.352 274.436 386.305 274.311 386.086 cv
266.233 369.883 li
cp
f
279.764 388.379 mo
279.592 388.958 279.045 389.864 278.186 389.864 cv
278.139 389.864 277.639 389.864 277.28 389.629 cv
277.967 389.411 278.014 388.801 278.014 388.708 cv
278.014 388.333 277.733 388.083 277.342 388.083 cv
276.874 388.083 276.389 388.489 276.389 389.114 cv
276.389 389.942 277.327 390.333 278.155 390.333 cv
278.92 390.333 279.608 389.848 280.03 389.145 cv
280.436 390.02 281.342 390.333 282.014 390.333 cv
283.936 390.333 284.967 388.239 284.967 387.77 cv
284.967 387.551 284.749 387.551 284.702 387.551 cv
284.467 387.551 284.452 387.629 284.374 387.833 cv
284.03 388.989 283.03 389.864 282.092 389.864 cv
281.42 389.864 281.061 389.411 281.061 388.77 cv
281.061 388.333 281.467 386.817 281.936 384.958 cv
282.264 383.661 283.03 383.254 283.577 383.254 cv
283.608 383.254 284.124 383.254 284.483 383.489 cv
283.936 383.629 283.749 384.098 283.749 384.411 cv
283.749 384.77 284.03 385.02 284.405 385.02 cv
284.795 385.02 285.342 384.708 285.342 384.004 cv
285.342 383.067 284.28 382.786 283.608 382.786 cv
282.764 382.786 282.108 383.333 281.733 383.973 cv
281.436 383.286 280.67 382.786 279.733 382.786 cv
277.858 382.786 276.78 384.833 276.78 385.348 cv
276.78 385.551 277.014 385.551 277.061 385.551 cv
277.28 385.551 277.295 385.489 277.389 385.27 cv
277.795 383.973 278.858 383.254 279.67 383.254 cv
280.233 383.254 280.686 383.551 280.686 384.348 cv
280.686 384.692 280.483 385.52 280.327 386.098 cv
279.764 388.379 li
cp
f
73.5571 179.286 mo
79.979 192.192 li
67.0879 192.192 li
73.5571 179.286 li
cp
74.9321 177.317 mo
74.7759 177.004 74.7129 176.895 74.3071 176.895 cv
73.9009 176.895 73.854 177.004 73.6982 177.317 cv
65.6201 193.52 li
65.4951 193.739 65.4951 193.786 65.4951 193.817 cv
65.4951 194.004 65.6353 194.004 66.0259 194.004 cv
82.604 194.004 li
82.9951 194.004 83.1353 194.004 83.1353 193.817 cv
83.1353 193.786 83.1353 193.739 83.0103 193.52 cv
74.9321 177.317 li
cp
f
93.5879 191.282 mo
93.666 191.047 93.666 191.016 93.666 190.922 cv
93.666 190.579 93.4009 190.375 93.104 190.375 cv
92.9321 190.375 92.604 190.469 92.4321 190.782 cv
92.3701 190.891 92.2451 191.422 92.1509 191.75 cv
91.8071 193.141 li
91.6982 193.547 91.1821 195.657 91.1353 195.844 cv
91.1201 195.844 90.3853 197.297 89.0732 197.297 cv
87.9321 197.297 87.9321 196.204 87.9321 195.907 cv
87.9321 195 88.3232 193.954 88.8232 192.657 cv
89.0259 192.125 89.104 191.922 89.104 191.641 cv
89.104 190.829 88.4321 190.219 87.5259 190.219 cv
85.8379 190.219 85.0732 192.485 85.0732 192.782 cv
85.0732 192.985 85.3071 192.985 85.3701 192.985 cv
85.604 192.985 85.6201 192.907 85.666 192.719 cv
86.0879 191.329 86.8071 190.688 87.4629 190.688 cv
87.7603 190.688 87.8853 190.86 87.8853 191.266 cv
87.8853 191.657 87.7451 192.016 87.6509 192.235 cv
86.854 194.282 86.6821 194.907 86.6821 195.641 cv
86.6821 195.922 86.6821 196.704 87.3379 197.25 cv
87.854 197.672 88.5571 197.766 89.0103 197.766 cv
89.6821 197.766 90.2759 197.516 90.8379 197.016 cv
90.6201 197.922 90.4321 198.625 89.729 199.469 cv
89.2759 199.985 88.604 200.532 87.729 200.532 cv
87.604 200.532 86.8232 200.532 86.4629 199.985 cv
87.3701 199.891 87.3701 199.079 87.3701 199.063 cv
87.3701 198.532 86.8853 198.438 86.7129 198.438 cv
86.3071 198.438 85.7451 198.766 85.7451 199.532 cv
85.7451 200.391 86.5571 201 87.7451 201 cv
89.4321 201 91.4951 199.704 92.0103 197.61 cv
93.5879 191.282 li
cp
f
.613971 lw
99.6509 429.637 mo
97.4243 49.8481 li
@
271.487 277.553 mo
271.315 277.741 271.221 277.866 271.034 278.1 cv
270.581 278.694 270.346 278.897 270.127 278.897 cv
269.831 278.897 269.643 278.631 269.502 278.084 cv
269.471 277.913 269.44 277.803 269.424 277.741 cv
268.924 275.725 268.706 274.819 268.706 274.506 cv
269.581 272.975 270.299 272.1 270.659 272.1 cv
270.784 272.1 270.94 272.163 271.143 272.256 cv
271.377 272.397 271.518 272.444 271.674 272.444 cv
272.096 272.444 272.377 272.147 272.377 271.725 cv
272.377 271.303 272.034 270.991 271.565 270.991 cv
270.69 270.991 269.924 271.709 268.549 273.834 cv
268.331 272.741 li
268.049 271.381 267.831 270.991 267.299 270.991 cv
266.862 270.991 266.174 271.163 264.971 271.569 cv
264.752 271.647 li
264.831 271.944 li
265.581 271.756 265.768 271.725 265.94 271.725 cv
266.44 271.725 266.565 271.897 266.831 273.1 cv
267.409 275.553 li
265.784 277.881 li
265.377 278.475 264.987 278.834 264.768 278.834 cv
264.643 278.834 264.44 278.772 264.252 278.663 cv
263.987 278.522 263.768 278.459 263.612 278.459 cv
263.237 278.459 262.94 278.756 262.94 279.147 cv
262.94 279.678 263.331 279.991 263.924 279.991 cv
264.549 279.991 264.784 279.819 265.784 278.6 cv
266.315 277.959 266.737 277.428 267.581 276.272 cv
268.174 278.663 li
268.424 279.678 268.69 279.991 269.331 279.991 cv
270.081 279.991 270.596 279.506 271.752 277.725 cv
271.487 277.553 li
cp
1 0 0 rgb
f
276.924 273.979 mo
277.018 273.667 277.19 273.573 277.768 273.573 cv
278.956 273.573 279.502 274.073 279.502 275.167 cv
279.502 276.01 279.143 276.651 278.502 277.01 cv
278.002 277.307 277.299 277.401 275.971 277.401 cv
276.924 273.979 li
cp
275.831 277.885 mo
276.784 277.885 277.409 277.932 277.706 278.057 cv
278.299 278.307 278.674 278.948 278.674 279.745 cv
278.674 281.338 277.581 282.323 275.784 282.323 cv
275.159 282.323 274.831 282.104 274.831 281.698 cv
274.831 281.526 275.018 280.807 275.346 279.635 cv
275.549 278.963 275.627 278.635 275.831 277.885 cv
275.831 277.885 li
cp
272.19 282.76 mo
276.362 282.76 li
278.674 282.76 280.268 281.557 280.268 279.807 cv
280.268 279.26 280.081 278.745 279.768 278.417 cv
279.471 278.088 279.174 277.901 278.409 277.588 cv
279.456 277.338 279.877 277.151 280.346 276.745 cv
280.768 276.385 280.987 275.885 280.987 275.292 cv
280.987 273.901 279.94 273.135 278.034 273.135 cv
274.237 273.135 li
274.237 273.37 li
275.143 273.432 275.362 273.557 275.362 273.963 cv
275.362 274.198 275.315 274.557 275.206 274.917 cv
273.393 281.432 li
273.127 282.292 273.018 282.37 272.19 282.526 cv
272.19 282.76 li
cp
f
21.1309 229.891 mo
21.397 229.829 21.5381 229.813 21.7559 229.813 cv
22.8809 229.813 23.1782 230.313 24.1001 233.735 cv
24.4438 235.032 24.9131 237.36 24.9131 237.704 cv
24.9131 238.016 24.8032 238.344 24.5059 238.704 cv
23.8813 239.516 23.4912 240.032 23.272 240.266 cv
22.8501 240.704 22.6001 240.875 22.3501 240.875 cv
22.2251 240.875 22.084 240.813 21.8662 240.641 cv
21.5688 240.407 21.3501 240.313 21.1309 240.313 cv
20.6938 240.313 20.3501 240.641 20.3501 241.094 cv
20.3501 241.579 20.7881 241.969 21.3662 241.969 cv
22.647 241.969 25.2559 238.969 27.4131 235.032 cv
28.7563 232.579 29.3188 231.141 29.3188 230.172 cv
29.3188 229.579 28.8188 229.079 28.2251 229.079 cv
27.772 229.079 27.4438 229.375 27.4438 229.813 cv
27.4438 230.11 27.6001 230.329 28.0063 230.594 cv
28.3813 230.813 28.522 230.985 28.522 231.266 cv
28.522 232.063 27.7881 233.61 26.1001 236.422 cv
25.6938 234.11 li
25.397 232.36 24.2881 229.079 23.9751 229.079 cv
23.897 229.079 li
23.8813 229.094 23.8032 229.094 23.7251 229.094 cv
23.5381 229.11 22.8188 229.235 21.772 229.438 cv
21.6782 229.454 21.4131 229.516 21.1309 229.547 cv
21.1309 229.891 li
cp
f
34.291 232.067 mo
34.3853 231.754 34.5571 231.661 35.1353 231.661 cv
36.3232 231.661 36.8701 232.161 36.8701 233.254 cv
36.8701 234.098 36.5103 234.739 35.8701 235.098 cv
35.3701 235.395 34.666 235.489 33.3379 235.489 cv
34.291 232.067 li
cp
33.1982 235.973 mo
34.1509 235.973 34.7759 236.02 35.0732 236.145 cv
35.666 236.395 36.041 237.036 36.041 237.833 cv
36.041 239.426 34.9482 240.411 33.1509 240.411 cv
32.5259 240.411 32.1982 240.192 32.1982 239.786 cv
32.1982 239.614 32.3853 238.895 32.7129 237.723 cv
32.916 237.051 32.9951 236.723 33.1982 235.973 cv
33.1982 235.973 li
cp
29.5571 240.848 mo
33.729 240.848 li
36.041 240.848 37.6353 239.645 37.6353 237.895 cv
37.6353 237.348 37.4482 236.833 37.1353 236.504 cv
36.8379 236.176 36.541 235.989 35.7759 235.676 cv
36.8232 235.426 37.2451 235.239 37.7129 234.833 cv
38.1353 234.473 38.354 233.973 38.354 233.379 cv
38.354 231.989 37.3071 231.223 35.4009 231.223 cv
31.604 231.223 li
31.604 231.458 li
32.5103 231.52 32.729 231.645 32.729 232.051 cv
32.729 232.286 32.6821 232.645 32.5732 233.004 cv
30.7603 239.52 li
30.4951 240.379 30.3853 240.458 29.5571 240.614 cv
29.5571 240.848 li
cp
f
80.186 369.954 mo
80.186 369.157 80.7021 367.891 82.873 367.75 cv
82.9673 367.735 83.0449 367.641 83.0449 367.532 cv
83.0449 367.313 82.8892 367.313 82.6699 367.313 cv
80.686 367.313 78.873 368.329 78.8423 369.797 cv
78.8423 374.344 li
78.8423 375.125 78.8423 375.75 78.0449 376.407 cv
77.3579 376.985 76.5923 377.032 76.1553 377.047 cv
76.061 377.079 75.9829 377.157 75.9829 377.266 cv
75.9829 377.469 76.0923 377.469 76.2949 377.485 cv
77.6079 377.563 78.5771 378.282 78.7949 379.266 cv
78.8423 379.485 78.8423 379.516 78.8423 380.235 cv
78.8423 384.188 li
78.8423 385.016 78.8423 385.657 79.811 386.407 cv
80.5771 387.016 81.8892 387.235 82.6699 387.235 cv
82.8892 387.235 83.0449 387.235 83.0449 387.016 cv
83.0449 386.813 82.936 386.813 82.7329 386.797 cv
81.4829 386.719 80.498 386.079 80.248 385.063 cv
80.186 384.875 80.186 384.844 80.186 384.125 cv
80.186 379.938 li
80.186 379.016 80.0303 378.688 79.3892 378.047 cv
78.9673 377.625 78.3892 377.422 77.8271 377.266 cv
79.4673 376.813 80.186 375.891 80.186 374.735 cv
80.186 369.954 li
cp
f
90.7451 370.391 mo
90.8701 369.954 91.104 369.844 91.8853 369.844 cv
93.479 369.844 94.2129 370.516 94.2129 371.985 cv
94.2129 373.125 93.729 374 92.8701 374.485 cv
92.1982 374.875 91.2451 375.016 89.4482 375.016 cv
90.7451 370.391 li
cp
89.2451 375.657 mo
90.541 375.657 91.3853 375.735 91.7759 375.891 cv
92.604 376.235 93.104 377.11 93.104 378.188 cv
93.104 380.344 91.6201 381.657 89.1982 381.657 cv
88.354 381.657 87.916 381.36 87.916 380.813 cv
87.916 380.579 88.1509 379.625 88.6201 378.032 cv
88.8701 377.125 88.9951 376.672 89.2451 375.657 cv
89.2451 375.657 li
cp
84.354 382.25 mo
89.9629 382.25 li
93.104 382.25 95.2451 380.61 95.2451 378.266 cv
95.2451 377.532 95.0103 376.829 94.5732 376.391 cv
94.166 375.938 93.7759 375.704 92.7451 375.25 cv
94.1509 374.922 94.729 374.688 95.3701 374.125 cv
95.9321 373.641 96.229 372.969 96.229 372.172 cv
96.229 370.282 94.8071 369.235 92.2451 369.235 cv
87.104 369.235 li
87.104 369.563 li
88.3379 369.657 88.6353 369.813 88.6353 370.375 cv
88.6353 370.672 88.5571 371.172 88.416 371.657 cv
85.9629 380.454 li
85.604 381.61 85.4629 381.735 84.354 381.938 cv
84.354 382.25 li
cp
f
100.979 384.579 mo
100.979 385.375 100.463 386.657 98.291 386.797 cv
98.1982 386.813 98.1201 386.891 98.1201 387.016 cv
98.1201 387.235 98.3379 387.235 98.5103 387.235 cv
100.448 387.235 102.307 386.25 102.323 384.735 cv
102.323 380.204 li
102.323 379.422 102.323 378.782 103.12 378.125 cv
103.807 377.547 104.573 377.516 105.01 377.485 cv
105.104 377.469 105.182 377.391 105.182 377.266 cv
105.182 377.079 105.073 377.079 104.87 377.047 cv
103.557 376.969 102.604 376.25 102.385 375.282 cv
102.323 375.063 102.323 375.016 102.323 374.297 cv
102.323 370.36 li
102.323 369.516 102.323 368.875 101.37 368.125 cv
100.573 367.516 99.1982 367.313 98.5103 367.313 cv
98.3379 367.313 98.1201 367.313 98.1201 367.532 cv
98.1201 367.735 98.229 367.735 98.4321 367.75 cv
99.6982 367.829 100.666 368.469 100.932 369.485 cv
100.979 369.657 100.979 369.704 100.979 370.422 cv
100.979 374.594 li
100.979 375.516 101.151 375.86 101.776 376.5 cv
102.198 376.907 102.776 377.11 103.338 377.266 cv
101.698 377.735 100.979 378.641 100.979 379.797 cv
100.979 384.579 li
cp
f
241.844 271.645 mo
241.036 275.301 li
239.645 275.301 li
240.454 271.618 li
238.26 271.413 237.163 270.485 237.163 268.833 cv
237.163 268.393 237.26 267.778 237.454 266.987 cv
237.726 265.897 li
237.873 265.311 237.946 264.891 237.946 264.639 cv
237.946 264.405 237.903 264.239 237.819 264.139 cv
237.733 264.04 237.612 263.989 237.454 263.989 cv
237.272 263.989 237.097 264.046 236.93 264.161 cv
236.762 264.275 236.594 264.42 236.424 264.596 cv
235.94 264.112 li
236.379 263.696 236.762 263.403 237.088 263.233 cv
237.414 263.063 237.741 262.979 238.069 262.979 cv
238.509 262.979 238.848 263.11 239.086 263.374 cv
239.323 263.637 239.442 264.018 239.442 264.516 cv
239.442 264.868 239.369 265.342 239.222 265.94 cv
238.897 267.241 li
238.838 267.475 238.782 267.76 238.729 268.094 cv
238.676 268.428 238.651 268.7 238.651 268.911 cv
238.651 269.532 238.817 269.997 239.152 270.304 cv
239.487 270.612 239.979 270.797 240.63 270.862 cv
243.191 259.2 li
244.582 259.2 li
242.012 270.844 li
242.838 270.792 243.559 270.542 244.172 270.093 cv
244.786 269.645 245.26 269.03 245.598 268.248 cv
245.935 267.465 246.104 266.584 246.104 265.606 cv
246.104 264.915 245.995 264.233 245.778 263.559 cv
245.883 263.12 li
247.442 263.12 li
247.53 263.547 247.574 264.045 247.574 264.614 cv
247.574 265.926 247.338 267.118 246.87 268.19 cv
246.4 269.262 245.731 270.098 244.864 270.696 cv
243.995 271.293 242.989 271.61 241.844 271.645 cv
cp
f
3.78076 443.563 mo
3.78076 442.844 4.24951 441.688 6.20264 441.563 cv
6.29639 441.547 6.35889 441.485 6.35889 441.375 cv
6.35889 441.172 6.21826 441.172 6.01611 441.172 cv
4.23389 441.172 2.59375 442.094 2.57813 443.422 cv
2.57813 447.5 li
2.57813 448.204 2.57813 448.782 1.85889 449.375 cv
1.23389 449.891 .546875 449.922 .15625 449.938 cv
.0629883 449.969 0 450.032 0 450.141 cv
0 450.313 .108887 450.313 .280762 450.344 cv
1.46875 450.407 2.32813 451.063 2.53076 451.938 cv
2.57813 452.125 2.57813 452.172 2.57813 452.813 cv
2.57813 456.36 li
2.57813 457.125 2.57813 457.688 3.43799 458.375 cv
4.14111 458.907 5.32764 459.11 6.01611 459.11 cv
6.21826 459.11 6.35889 459.11 6.35889 458.907 cv
6.35889 458.735 6.24951 458.735 6.07764 458.719 cv
4.95264 458.641 4.06299 458.063 3.82764 457.157 cv
3.78076 457 3.78076 456.954 3.78076 456.313 cv
3.78076 452.547 li
3.78076 451.719 3.64111 451.422 3.06299 450.844 cv
2.68799 450.469 2.17188 450.282 1.65625 450.141 cv
3.14111 449.735 3.78076 448.907 3.78076 447.86 cv
3.78076 443.563 li
cp
0 0 0 rgb
f
20.4917 456.719 mo
20.4917 457.438 20.0229 458.594 18.0698 458.719 cv
17.9771 458.735 17.9136 458.797 17.9136 458.907 cv
17.9136 459.11 18.1021 459.11 18.2729 459.11 cv
20.0073 459.11 21.6802 458.235 21.6948 456.86 cv
21.6948 452.782 li
21.6948 452.079 21.6948 451.5 22.4136 450.907 cv
23.0386 450.391 23.7271 450.36 24.1167 450.344 cv
24.2104 450.313 24.2729 450.25 24.2729 450.141 cv
24.2729 449.969 24.1636 449.969 23.9917 449.938 cv
22.8052 449.875 21.9448 449.219 21.7417 448.344 cv
21.6948 448.157 21.6948 448.11 21.6948 447.469 cv
21.6948 443.922 li
21.6948 443.157 21.6948 442.594 20.8354 441.907 cv
20.1167 441.344 18.8823 441.172 18.2729 441.172 cv
18.1021 441.172 17.9136 441.172 17.9136 441.375 cv
17.9136 441.547 18.0229 441.547 18.1948 441.563 cv
19.3198 441.641 20.2104 442.219 20.4448 443.125 cv
20.4917 443.282 20.4917 443.329 20.4917 443.969 cv
20.4917 447.735 li
20.4917 448.563 20.6323 448.86 21.2104 449.438 cv
21.5854 449.813 22.1021 450 22.6021 450.141 cv
21.1323 450.547 20.4917 451.375 20.4917 452.422 cv
20.4917 456.719 li
cp
f
2.06985 lw
14.4751 435.099 mo
57.4497 434.643 li
@
1.55239 lw
52.3472 431.961 mo
59.894 434.618 li
52.4058 437.433 li
@
2.06985 lw
14.4751 435.1 mo
14.5366 394.542 li
@
1.55239 lw
11.7925 399.612 mo
14.5396 392.098 li
17.2651 399.62 li
@
65.7964 436.987 mo
65.9722 437.124 66.2207 437.192 66.5425 437.192 cv
66.8545 437.192 67.1304 437.042 67.3691 436.742 cv
67.6079 436.442 67.7715 436.114 67.8594 435.758 cv
68.5396 433.103 li
68.647 432.62 68.7007 432.291 68.7007 432.115 cv
68.7007 431.867 68.6309 431.649 68.4922 431.464 cv
68.353 431.279 68.1592 431.186 67.9106 431.186 cv
67.5933 431.186 67.2959 431.285 67.0176 431.482 cv
66.7397 431.68 66.5059 431.931 66.3154 432.236 cv
66.1255 432.541 65.9912 432.849 65.9131 433.162 cv
65.8936 433.224 65.8545 433.256 65.7959 433.256 cv
65.6133 433.256 li
65.5352 433.256 65.4961 433.21 65.4961 433.118 cv
65.4961 433.074 li
65.5938 432.703 65.7593 432.34 65.9937 431.987 cv
66.2275 431.633 66.5142 431.346 66.853 431.127 cv
67.1919 430.908 67.5542 430.797 67.9395 430.797 cv
68.3052 430.797 68.6357 430.896 68.9307 431.09 cv
69.2256 431.287 69.4341 431.552 69.5562 431.889 cv
69.7275 431.582 69.9463 431.323 70.2129 431.113 cv
70.479 430.903 70.7715 430.797 71.0894 430.797 cv
71.3047 430.797 71.5249 430.835 71.7495 430.912 cv
71.9746 430.987 72.1582 431.103 72.2998 431.259 cv
72.4419 431.415 72.5127 431.61 72.5127 431.844 cv
72.5127 432.098 72.4302 432.316 72.2661 432.5 cv
72.1016 432.682 71.8921 432.774 71.6367 432.774 cv
71.4746 432.774 71.3398 432.722 71.2319 432.62 cv
71.1235 432.517 71.0698 432.388 71.0698 432.232 cv
71.0698 432.023 71.1421 431.838 71.2871 431.68 cv
71.4316 431.521 71.6045 431.427 71.8062 431.398 cv
71.6255 431.256 71.3765 431.186 71.0591 431.186 cv
70.7368 431.186 70.457 431.334 70.2202 431.632 cv
69.9834 431.93 69.8159 432.261 69.7183 432.627 cv
69.0591 435.275 li
68.9517 435.675 68.8979 436.004 68.8979 436.263 cv
68.8979 436.516 68.9702 436.735 69.1143 436.917 cv
69.2583 437.1 69.4502 437.192 69.6895 437.192 cv
70.1587 437.192 70.5771 436.986 70.9463 436.574 cv
71.3149 436.162 71.5581 435.709 71.6753 435.216 cv
71.6948 435.159 71.7339 435.129 71.793 435.129 cv
71.9761 435.129 li
72.0151 435.129 72.0469 435.142 72.0713 435.169 cv
72.0957 435.196 72.1079 435.226 72.1079 435.26 cv
72.1079 435.27 72.103 435.285 72.0933 435.304 cv
71.9512 435.902 71.6533 436.432 71.1992 436.897 cv
70.7451 437.362 70.2324 437.594 69.6611 437.594 cv
69.2949 437.594 68.9644 437.496 68.6689 437.296 cv
68.373 437.097 68.1646 436.828 68.0425 436.489 cv
67.8862 436.784 67.6704 437.042 67.395 437.263 cv
67.1191 437.484 66.8252 437.594 66.5132 437.594 cv
66.2983 437.594 66.0776 437.557 65.8506 437.481 cv
65.624 437.405 65.4395 437.289 65.2983 437.132 cv
65.1567 436.975 65.0859 436.777 65.0859 436.538 cv
65.0859 436.302 65.1675 436.088 65.3315 435.895 cv
65.4946 435.702 65.6987 435.604 65.9429 435.604 cv
66.1089 435.604 66.248 435.655 66.3604 435.754 cv
66.4727 435.855 66.5288 435.985 66.5288 436.146 cv
66.5288 436.356 66.4595 436.539 66.3198 436.695 cv
66.1812 436.851 66.0063 436.948 65.7964 436.987 cv
cp
f
10.7544 388.299 mo
10.9644 388.66 11.3306 388.84 11.853 388.84 cv
12.3267 388.84 12.7368 388.674 13.0835 388.341 cv
13.4302 388.009 13.7095 387.606 13.9224 387.134 cv
14.1343 386.662 14.2993 386.178 14.4165 385.684 cv
13.9722 386.109 13.4912 386.321 12.9736 386.321 cv
12.5781 386.321 12.2412 386.252 11.9629 386.116 cv
11.6846 385.98 11.4683 385.776 11.3149 385.504 cv
11.1606 385.234 11.084 384.906 11.084 384.52 cv
11.084 384.193 11.1279 383.857 11.2158 383.512 cv
11.3037 383.168 11.4268 382.785 11.5854 382.363 cv
11.7441 381.94 11.8823 381.573 11.9995 381.26 cv
12.1313 380.894 12.1973 380.594 12.1973 380.36 cv
12.1973 380.062 12.0874 379.913 11.8677 379.913 cv
11.4722 379.913 11.146 380.117 10.8901 380.524 cv
10.6333 380.93 10.4443 381.385 10.3223 381.888 cv
10.3027 381.951 10.2612 381.983 10.1978 381.983 cv
10.022 381.983 li
9.93896 381.983 9.89746 381.937 9.89746 381.844 cv
9.89746 381.8 li
10.0586 381.205 10.3052 380.677 10.6372 380.216 cv
10.9692 379.755 11.3892 379.524 11.897 379.524 cv
12.2534 379.524 12.5547 379.641 12.8013 379.875 cv
13.0479 380.11 13.1714 380.407 13.1714 380.768 cv
13.1714 380.954 13.1299 381.149 13.0469 381.353 cv
13.0029 381.475 12.9028 381.741 12.7466 382.151 cv
12.5903 382.56 12.4707 382.9 12.3877 383.167 cv
12.3047 383.436 12.2363 383.7 12.1826 383.958 cv
12.1289 384.216 12.1021 384.475 12.1021 384.733 cv
12.1021 385.065 12.1729 385.345 12.3145 385.575 cv
12.4561 385.804 12.6807 385.918 12.9883 385.918 cv
13.6084 385.918 14.165 385.541 14.6582 384.785 cv
15.7935 380.168 li
15.8276 380.037 15.9058 379.923 16.0278 379.829 cv
16.1499 379.733 16.2817 379.686 16.4233 379.686 cv
16.5454 379.686 16.6514 379.725 16.7417 379.803 cv
16.832 379.88 16.8774 379.983 16.8774 380.11 cv
16.8774 380.168 16.8726 380.208 16.8628 380.227 cv
15.376 386.197 li
15.2441 386.709 15.0024 387.2 14.6509 387.668 cv
14.2993 388.137 13.8755 388.515 13.3804 388.8 cv
12.8843 389.086 12.3682 389.229 11.8311 389.229 cv
11.5723 389.229 11.3159 389.179 11.062 389.079 cv
10.8081 388.979 10.603 388.829 10.4468 388.628 cv
10.2905 388.428 10.2124 388.194 10.2124 387.925 cv
10.2124 387.652 10.293 387.415 10.4541 387.215 cv
10.6152 387.014 10.8301 386.915 11.0986 386.915 cv
11.2598 386.915 11.395 386.964 11.5054 387.065 cv
11.6147 387.165 11.6699 387.295 11.6699 387.457 cv
11.6699 387.686 11.5845 387.886 11.4136 388.057 cv
11.2427 388.228 11.0425 388.313 10.813 388.313 cv
10.8032 388.308 10.7935 388.305 10.7837 388.302 cv
10.7739 388.3 10.7642 388.299 10.7544 388.299 cv
cp
f
10.7427 455.02 mo
11.5186 455.02 12.2427 454.774 12.9146 454.283 cv
13.5864 453.791 14.1592 453.156 14.6333 452.377 cv
15.1069 451.599 15.4702 450.783 15.7231 449.926 cv
15.9756 449.07 16.1021 448.272 16.1021 447.534 cv
16.1021 446.956 16.0029 446.426 15.8052 445.945 cv
15.6069 445.463 15.3022 445.076 14.8911 444.782 cv
14.4795 444.488 13.9873 444.34 13.4146 444.34 cv
12.8521 444.34 12.3052 444.476 11.7739 444.747 cv
11.2427 445.017 10.7607 445.376 10.3286 445.824 cv
9.88574 446.277 9.49268 446.837 9.14893 447.506 cv
8.80518 448.174 8.54443 448.877 8.36768 449.614 cv
8.19043 450.35 8.10205 451.043 8.10205 451.694 cv
8.10205 452.6 8.32471 453.38 8.77002 454.037 cv
9.21533 454.692 9.87256 455.02 10.7427 455.02 cv
cp
10.6177 455.497 mo
9.81543 455.497 9.10449 455.313 8.48486 454.946 cv
7.86475 454.579 7.38721 454.068 7.05127 453.415 cv
6.71533 452.761 6.54736 452.036 6.54736 451.239 cv
6.54736 450.078 6.87646 448.921 7.53564 447.77 cv
8.19434 446.619 9.06299 445.68 10.1411 444.954 cv
11.2192 444.227 12.3467 443.864 13.5239 443.864 cv
14.1333 443.864 14.6904 443.973 15.1958 444.192 cv
15.7007 444.411 16.1279 444.714 16.4771 445.102 cv
16.8257 445.49 17.0952 445.945 17.2856 446.465 cv
17.4756 446.986 17.5708 447.554 17.5708 448.168 cv
17.5708 449.048 17.3833 449.925 17.0083 450.797 cv
16.6333 451.669 16.1138 452.464 15.4497 453.18 cv
14.7856 453.896 14.0396 454.461 13.2114 454.875 cv
12.3833 455.29 11.5186 455.497 10.6177 455.497 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.3
%%For: (Remo Pillat) ()
%%Title: (fig4_bicycle_polar_coord.eps)
%%CreationDate: 7/15/2022 3:29 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6=*$.?Z623S.mj7:KHr[%j.-b<#UBs(">V)n@t\c.Xo4fGq8)ga7SLa[\PIG;<)pQqVB+e\ZhB7KmFYT-=(bQFAYlHOWnZ:X
%C;1``QfHT\?P.oTC`rZWKAZ,T"N\C/+1J_5BoUh=g:.3u0P]eq]RCB)m;W:m6kI#jGEG'RHnDZClke/l=/At#C:d3Djst`s0r0<l
%QA2<o(d.%#g=1MaqTFthpBEGC:9s*Pk,*2L\"X\PSUpFC#kTY3l)+1'q=&[EkYlTA&."K`GAe9`IGFsD!&FJ2ILgU[$h.)cg?h.l
%!E'3c[['_JI0%*Ws&hO#e9JR\dCn@X[J[=NOQk;AdA(>YI(15ahs6I9f2)7qG8et?4n%bd6mOGEGPM^)DufkP5''H70MsW=d-pOf
%^47BnEHuq<O!,&A\q2(je,XmUo7YdU"F<sq:8tuPL'#mE;D_%T,e^6SrrZ)Ko_AcEq9(t%mH52^\t&3(:d!sN0LN=IeW?5P2Zs]&
%Gn6#FrJqZlZ7QtXH;*]+2lu.g8?@Uj`+&gh;ssUYi"VA+P004s2HEQ%=YRW6TUa%fP("L?=n%sj0aPF`+S\=n=@qI)$QB/!?oS9T
%31X&'_\IJYSh;6m%ti\#4WOmY*qU:9bTAYK<s\\QR/9,&=YTL(N`pJ:#:u3j_AJ)J4k1_,luJJ"/`8a-iR\cOSL*3oq.e,;'u$>R
%!5s?2%Kl[VI9qI@VFq3ilAoT?=f>Pqn%ln(^"TZJbL,V?%ngrQl;NEa2;#$E0XF,6V>gY3=:H%agkH$h)ZU`545\'.S$&k3!5UX/
%b.p+Cn"R#D^E`M\4n!$^&QkS*!9Vo"nkX#7>%<*Y?[BnhiN5VRo`22@HcmII5S&+ljlrDq8IpnVJ1gbs$S:5)2'<NX$+5ng:hbGC
%dY4^1RfI_'/VdOO3qHA"H0.U[+R?cXrRH;,?17ja?hhr.Hafd6AS&u*PMU4*L;msc(C7i6?lo]=9^e?mr\d=B`c;@#_nRkoFDj@8
%Np5DH1*+HPQ[-k$;Ku7Z(C^r+jY2Q6n]23tpcIHnQmb%d!o^&]XB"$)s6AtU'-LWXFH<"k)J]p[mqB98)V7gC:Nr$W?`V-a)FoPY
%Upl(C_j3<aV#]-)"UY<4!)BGhC,k=G0_5_,"M8#^$>:o5Bt=(UM7siO?o/rjN;*&;h3Z[MIdSd9K*/K[:P&=.nVmfA"o]+`121Fp
%i%HtW`te4[*hZM=JRCGKntHYJa5_^hPop/mp9dp6^-H_rI_fr`i6r53m4SQ5(nM-X?\Dj4"Wd`L#fdKuKb=(,X$7#1cr9]?%1A7!
%)jE7'WkCDhi=n),C0uJ*V+)W&5jLWWjeUI:FTDE5&phIU4Dp>)!2sR?%Yr7b3KY[[JpGH$$OH%4EPDT`dU/7nYasomd7eH`39%C4
%k'hi."2@S9O?>]&(]-ScWVd1+9ngVbKB6Huq%>N'Je^pSqthB;e>EC+:==7Q58DCrY[Hi&'B$OMe<4\10t<-l<;^8$BD2eV%eSCo
%\(l0,m*XQ9=IaMa@6#+4rNeH?o8V^]X[9oO=P7LP[PqF\f7/-For#k]-1t(AO;(gWc\No/aFuQsr%/,b>V25P/fNr$24.6.?%_4,
%?BQb_-NpDD#^pbWmIfY,Y*G\nG5mV!rp`;unu$rA!8IK9QlM--Yi"kLMnai<qlMCfg%M)P"a)4)2#96*5@`N"%fP5[o3Z8^Db#<U
%%J]hX5a$'Ke%pMS1%#Er>ssb[);I*L2cgmj?dmtOU2/W=Q@B;,bsfd_7e\Qa*;qf6'u/"e26:/rL@skN1+XN7/WpNU%r4L+`tMbT
%J8b:n(a'ARWRXUXAGt$g(`Ht#Zt"7lFH,h[V8&!aJV7T_[AO6Dg9CI$(_o<fr@RlNTQ\!lYdQ12RIJn#0b)ftM(YC;>,.\q(-gTN
%9[ZlnM)HdC1q[q\"iEMg,G]tNTZ7f<K`[25W33#@*U:9@m21_JS&:S\DV+L:YGWF)is([BGPtO&*ZC[brjnU05j,ZY@GWf^M4&+a
%`b>fu)jT;_'fo6fk)EB#kl]D6l=rD7,=.AR&r"5?`9N+C8qfZQbDh/a_*-!3"4ma>R%q-T`ng\SfQD*l'M-:f>4f6Z.IukP[?J&b
%c)7*0#]c)G\=U8kn]h%i=NtQ2;3F@8EkbfrC;'"pJpW)IW6$5T)E;Uiba,<GCpi.<`_936XmL5BJt(ML52<\84-.h@@Df[cVJ*kj
%]%G>+J5d_k@?V_f>Ai%UYa,L.!8?ZK2#e(YZH-Il*lh@b\67'N\B!b=.5ir+5k"J*VV-,d;uDO(CeXG?P(;HYod_sInNLWp`VZ=]
%=Qfi)n:nT';_J!:mOeJ*D<iBl@T-F+W@^R=8JrGr^NO9lUt;6aVn6<!<K8!h+^MI/D(,.Ej#u1AY--><Vr6J>_hcu4#7N;R:Y28g
%d(TAokk#^2!lrG,1@-`KI%nU*/l,oR'lN&UTn\7?_EaAPKo9,Li*CC+>l@7ACDaYF=&=t]BH_7VBUc]sF?9Lc/j`0<oYIf\BWX;p
%7,.3cILl'r^ruP7-YbWs0+:1u`7L]QPTtF5LQA<LB>B5#TAUt'jHCs+45j7'>'CfEp(]5(HDRq)Xhh<pGR9]>!Go]fj_ef5nu9*`
%Bo%rWLmIjY8K"ruH8VJi[b_&Y<0F?r;lWU;$b[Q'?$S<kboqqP,13L=)GDAE(Gheoq""[u3^D2b!##Vjjd-$B]iZio\E.KLJ]H^>
%@]FjB/EZZt3B+uQ!!J5f4I&H..J/@&<-URB5Z".W%3j,.U4c?YR$*e3Z>FBiaROruB`O?<^bC=^Yet_Ck>uC/f3#17TT[LgS<qfa
%cr!"WleXmg<;NF^IFmM%^1P+k->CNYVPGOS^jM@Nl!XpbNiC7I="@II\n4lW1B#?OKLV:+f1n"C<>rd>&[tbVMRjq%)kT>/oVqL#
%k>P0l6RjsJh8%d.MY!.2k4:EKGVC(/Xh1@UQ4h7M%Zr4]OK91^QIq]VieJPne?^o9OaAN$.q*Dn3>o!:M88KF_(TJtZ?e&)ZOB3-
%18kWi1(@-tYhpXb:mE]tQ0*0MAZQ9L"=\`W!ZsgWi<kYbX0no+]%=Xrim<>a"bJcE!X(rXP/4A0-RF%B7R&%"+0;sl;ZEaqK@P!e
%j@d$4^"#H&(e&#UPhtGUFRDQgJ0a_+Kl7H%oT1!6fE)9Oo4fY%c7S'30PWR3XdDsE`%VSC@fXf<Rai^mL7kFJc(H==K*6B(2ban&
%1phtcX=[Zjftmu2/$&bN=#?73bo22)'GUHLV@@%g\XD5L6V:mRP*36gWO8g%/CKW^erQI>Cop,Y#,Y.A0o`RI->o_H0rC(.P-GRp
%1a@!)Ge"Gl&ArUHHm'>Ti'T=>X=V`P/HcaC5HDM6%=Bkf6'%i_4(njrpZ?OVB%u!\h$4%Q8QNI1*DM+DCan"*>,*Nc<p,&SYT.sN
%dMFl%pR#B/mpJ4`XG[H8rj_72ZonM'_.sAgT?G8(@iX`Z9tR8ViS(\DEGhsE*-;A6)q105&.E;3B4B"'aYM?O0^I*4s(09u5YTVk
%1k]8&U4mfIC&f43>=H]:6ns'(?n:#k;?8.^G;-5!)%$acE7U-):<-#<^lg7<o[sec.SS?424>SRn+*!Xm8%qahHE-bM^RY+luUmg
%!3^/p!P0AW_%)2+eHQ/GnoCW=X(qD0U24mskQ9Tk/B&2_rN\"F5VPu7oRCh<5bZl"NO#Q>#!tFqWA>dRLeCGc$,pL\k^N'K1`QFn
%1",Gs4WjT"O[Mm<_=GCOOuD"p]*OI^.Z>!6ft=fF5n:>sg&T^a`QUb&@/rZ0/flk(_R*3h]StQ#M)j3tdIRuQ"hX"o=C3\A?WJ#\
%[R4d4os@+`a`ed7:j[itHF;=="'+V#W!f_N1m[s<M&/Wtq`T8+2Pn8EJ;eTpJK:i,oaW(1<b#ARa_N*Q*0n--HD71Bck@FZnXdh(
%XO2(O)U:2c,1C4"O&enRE<t<9pO.LUHKAaS$\nO+V.M*+-N,AM*7Q<`lWR3H*juHScjEs.^fK<,n.9CAo[6V>g73icHMdd),p-g1
%S\S]#8r[#Y't&\AfHoaR5S%"BP%I!?D=Fa:9,nB7&or4_1RaV!Sl(/FY3G_SWBrsQAR_oT\[`Fn1*LClVEb<b@tg'8T%M"ZBXq:W
%e0GN=YuR9Be7,phGM,rK1O*9E2utB%<ei.jbsqTl5`KED7]aAGo8SM(5VMer97Cq]hCh4?(u;!bZkp6KAU/FK?%t;<%t%+0XUGZ2
%QMOg^qIqhbku$m`J?u+mMc%b*"c\$=7Z"RTj;N#"<eJ@E2&?[:\_9b7>qj8hQ!5\@RR6(kk`Fu%p9MP6"Fe+^193\JIMH<$==o[S
%fn!@!+W!nD<H*J.]:2/L!eNg`0Ma80AqTQW04=*4cV*RIA?>T)J%sQ%rSSR5(1*,gh8"Zk>QCu?gAu2D8WT$AMOS"iY[TDNZ`*7Y
%A!Vi$@o%-IEM"84j7n?,dH^@2e@\E$,DpCgg(7hI>'[\<KWYb65\>11<VJnL\&pBs"A:l9>A0N(i%6Z9-5pt_1?LG7fJ"5nH[eph
%@.L2\3L,iI5IA9HQB1$Q^.6c?MDh!0iacU+*)JMVl_9*h=KPSjODC:sm3"(o'u&g6kBbl'OO\<B;0P6>)Q"ipm":9XJY]%[%=5U9
%\PKm)C.s.S2Sb2r+I*E&i\G?'Erui#9rOmsg\VYI[^S*O;ZQKGTso_?Zc/r4*1q$,1;%K:8FT[hm+5uj=9G&8YZ_rq^5#JqC'NJ'
%2dO:>,DO9J!6Fq:QXH><h$S`N:kgEV:%f"ehCk5ue6B->dfGX>Yh]g:Y^=?#"pJ980FYB9+?^:uL=Jg[5M[7Ob8DifFf@/4>\o5e
%e94)QfD+&t+[2>?Y[V4U3M7qoW"]9MP9c%Nrh%!6^o^7D\94N0Ui6L:#.d9`ERn$\"JT+K#NQ%jr9@*A%**s&'s`QnnFHZt<F_S8
%rNob2"qu<j!;cVs,u_p+-n3]&cC-O+X(E5u:A<=5>1/X5FYAcr_GMO)P6h=)6I8jmOHZBJX006ApiS"U`?=g7hPd,<*0iuGa;3kd
%i+Q-I")A,QMp6+ShU+#*`1mN]LF?8+*.lR67oR+0OocI@rFSW+>RnQ^lQ!-P7Zl!aZF/H%Sore31?<mbGFGm[RZ;UBGW!QmL"jsf
%^J2TYQEIXVJ6qnq46@BN;^V?KQ)N.t2.]H)<cM)ZR^0WBi,)l4VYXFh-$tbR'oM[4+&#:E[G9;?T@LS&?L"90OW4q.^_$?X7F)n;
%d58i:C0DcE`A^_a/t_.(\:R]dlUjmL2p(KN$I^2#%).??_>/3;UpL\D.o#i@$(l$-$%H1+Aa#)LA:O9MT(OD-$o,C9ImE+,i&^df
%Vh*A/Z_3SPA&EZHpTOd,/NiTGnTYbt/,u1Z>uZY1IebAo62[a#E[#pX"?fodHNHL0DsF2JHLYO/9&;ahVNQ/.*imQhP`!-peX5\>
%rFKn.=,S8D$3N7ABE^?a*AG#(4RNa^W@:G1NuBS-&Yn[?]JmuI0#;I8>/6]+(%N][d`e<'<SpV]*oT+/_4Wc+#&f7dO#o5\*:%,u
%>qCa.)%%ieo[NV3\biVOhX8Y9?H_m&]rO+k#s,hg7)hm[A'X;BR+'NUCO6_>/S"s\8E)KKJ+>`jb+Igo"MGl[F'6gfka(l:9E_WF
%r+*eWi[,9)\87"hA%bTQ9--#WPDGNa1tV#4QPpZHb))LHWi)chnNk1V162rbQ%s4,0UTu<7Y:+)?0:<#ja224P)E=cRk3-7'72iL
%g?16*S%$nnh#%B'A4FLI?P_?i0K]\#?TpZ;NO5acN"p7Iq+AS;\Z\D3lWVpsNn]!-Oro\a)FUda2_Za;UT_.7C7^g%,,<XuQ_"?;
%8J+D*mkP!N]Lg$_b\mn4d-5DY1[_?[Vn5[#3%PtHcHsm3ZL0P$R81,8_`^6urit)\fn'1BP+MH[d9,tjHY6,;421*=[.uSGVY7HC
%o?fCO%L0Tar%tfo8*(&0RO$\%+?dF6N_DNq_pnVX_<dubTDN00I^ak1YU6**'/)TaLc3!\alU=NYhqZ6h8.(nrA5@5Db&Y04XcKe
%=bPj%%Pj+"-D4Vj9Ej=d`%Wr@]6dqKaesKDdm9hm_<QUi6b@`88/Gd5\#^h@LW:EHMB;jt4IBGtm'5^B,N@sW^(B)pneMW_*jD'j
%[!W#5!\[2;Wd&8j%6.JpD%=_lq.4lp\9kKmSC.=26Sni=TS&o1-3+M&^FoB0(OJ7\@m@rhZ6cArg6)>GTR#7_,2hAp@?8I8%Su4q
%I*Vk?]8oC95L1?,Rs^7t]Lp>mT`M8nO*hbXKJ&@Pq\j9>q9X&/@k,qrj9@O;K.l^8p_b=rR3-cfj=Y;T]q5$H($NEHKWDSaf461u
%Wb+`nkpE\2MSN^=;ndFMb7O;/0RV2i8UE8TCF(LAbg0KP4oG\sUSGfq30t]>83k)fG;*,<XosEOqIWSs<m%jK/n5of)!Z(IAsNF-
%J_f&Q@Xi(b2U%9BJP\!3D="EhNQ9lSE,ZHL@[,dtUI?+^:j'!o.VY86R=-16N]l:)LCB=B9R%-k`4f`l%,__e_k(%c44<p;',R9G
%DDE(&H'iFBLe_nG32mtBq.05^7!oZSYG9u8bGaJo'!]Hga*Q3k0g-+I,d=J+WLW'fD,!e-[9;'eG3&jU"m_hp6GfUk*C<4iJCV';
%"+rC4e)O#C)iP85CWYMHk=muJe\\sJ!e-]d3Z\1'gpD`I<%/:',TBNH3tO=?E$eS&cfFq\RUY[TmGJ7$Sud_:jF'gZm'EbTXOVSQ
%Qgqh;m.(!44<7'3)Aq(6Pfm\:_,S3QBd26j+q%*M_O>IoYAL82h/JLF0:T"QA(%ph0M6L0^cLd`4aV3ncJV3u2O^#LCL;:bJA"'R
%7Ai"!1)C"b^T.Yc'!oh`JWo9t6g:Z1bpCC(/L^)&1O\0A/bs]SfS\G>-#8L$H0Ao/N$7F4kQQc3BWue.@]>c,4jCt:U]hG)mkn;[
%-O\9QR-5lRr]Y,.hn08a8+I?LZt1$nK+:fPK*J#fHaL:'!Vnl4q,?@'rfO:35Gm,3iT,2,<_0hfPOBi[#N`Q3q7c;ElhcE4G`!D,
%R0J+C,j7PTNgVYMTt9!`LIuk1%$l2dic4^T+A.qg(Ao&IL_;^A17oWBpL3Qj'aMMH')6D+3/-4>B^hl^p<Ab3SEA]+!M?IP.e=;M
%3er7e`'@Pi5eDdiq"0bYR]qe'//l6TYS@WRTikp%0X1!:D`l=")7DV#T4%+!'[R/>L)DEA$+jbCeX>;sBP:WV%=DGR-,.i+XQ:9l
%*<;-<c,Tq[qW"^k"0GlO^n6Z5:/-E!dReD2N4iUe?qC-3Icd;FOofVH)Y%XccgS-&+diW;NQ7FLkQSQ?[f;/)U_6OXBd\:>Qj0f+
%7"*\oV:"Lp(,Q6X'*j\K.f'Kt"3lf,H`6GR]<R<U9Al.(HD(QLN?#X!i?D`M'Z!6J)p?YE0aK[PQA,IgU]UiTYm>UlipL3TPo9']
%>_Ej/A$EE$bdnC`9K]]kq&i5*4WoL7P$qE=Hk!4\S5g0(+*MO0K4E$*aY\h=/S8r=Vt%)H]YpnlEV^qm7+9!_Qm!AOdh',K:uOU3
%+i/^`@l8anD*hI4d4?kj#rC*3I_a$Wl]6"*$+/m*SGRbM7rh(g$`Z(9l:412"lR#op.T(aGVd$ne'h&NOWDY(GDpFWC^g?HWpK03
%[YXkk\NA/B'72j?X-p6AqS:a:eY;_8:jO=8N%cQHAkP*Hg"5(:V:$]E%k6&*P-nkuP,NTg4u@0?M$5=t@n3[jjI)BZA'XPu9)@%c
%D>aHpC3,pd3#_3a^u99BXsKM$O#*"P>7aI\A3`<G_ZF[Wlg-E,_7VkbZ2jkSFF_:#ghOcpD$L&E54G"^jaO4X-=Orf!<m:bs8+h%
%M[n&:),Os,00233c5bm_eHlK$37]8a\MFm]R*aVW(YF"X]q)E?;sQ/l/6ma*!iZ->NX,-a3KL61R44s6Aq7_O:VA#;CoNcUY8oB`
%M8q^rPT^e0WZ^_j#>2-mnL)s&-jLb'83D&&P061r3A3=SQ.HXVHa$0]*Yj!qjE!"#N<]MCIN@KJo>(,'q$$hYi#Wk]Q)\BcZWdd<
%Z^2L;Igj+?a"G-@mYA^RW:*jt\#eN*`6><eaX?EGKH7]hhN3BD6cG762257X[UGp2]k0Hfi.1!=AkGi_N=jOtDO4ja0,GJ0$VH!"
%m)]_WQ0QH209cb7)`jsdkM@ULi-CoM$l<sd:=Z,\P7FC/Z0\BHLD%gR^20ZOG.ECOdrQI7KGa]/gpfR8_*RlOohnL`4kB>dRI0:R
%I@GV0XuE%Ic96FLnZl\3h%@KV^0`2/CY(\`X\cA-27G[ofIr4&T]%meQ_<TbX"X&9p4+hbM21:RF9'e..%Do!^an_M+m%IV#h&7S
%22^PTUQZ*V92>IP_maV[PDlu:FX62:a$S'`FngLNH34Y=A%2[,Wg:hNXi:YeX#CXVGF")p(].KK@]rRY2@TU.G/n.d6)^R:bWO=^
%DjJi^q8Se]1JR\1/:sa;)1)G,4/<KdbXQ@oH\FGUqD-':!gbY2(0@:'F?9r)n:U<7(_t^u=oqSl1]W1*@KaiD>K0u)T.\AcP6`$]
%5!pc,D-(r';O\X]F*V,=*bL.bY_-FOb;F8%+,EV%?t,@aF(L<BR",2ND0rnh8#Yl<MBu8rl;#T02%fnk09IgfcnIGO?UJ2RDWg]q
%FFS+#Cf28]YJMVKpAl-O\@Dd]#T'0E)JAs8pSlfN61XmT\bN6509;e-'mt@3f>[TVBc;qUZW+A3l$%]t&r!W(ABbVN`+RM2$,6I;
%p_I?*!uAZ'P__K8hIVS&ksrnRCq5]^[d#hTCY3]Ih;%/-JuKVJUi?Kk;)%b49_"loK,-ue2$(!D<gW-$W,[#[cZMs+mE>it/2[so
%3&6O1Ws+nRJeUK4`V=T\3$Wek*So3m10AriXk'p`].G_Roc9R+FZ7iB1iIP!*d&>oo@Oo4Q#k;$9_fV[Vs'Q%8/+;Z0bstsE`$*9
%l";i19[,4d^t*QPF.%3f-9!n]422f/M12Qj51NgoD8GC$Zm'2sV)m0FMRu<Ka3eVPZ$IdKR.QTa\j,qS?gMT@f^=M22@$m*g&g+$
%1h"UtLHmA^ISMgD,RhQXIF,tE?rCoX@&=SVb\UfU&M??-2gAptg-:^f#8^L@V*Ns&[jf6No<M^WOP,KWR#IG1rHjg$?JkMYJ,:_;
%A\>O9@jEliOS:6*_)hKNEg+U;,[3l/;et/>BDWIN,\Uh8%jc<A)>kC:B1CiuGP7T]h+:-Urh7RG?jh)1ajm1rK1$BZ$u\S.YFe/U
%6+7nm(otUD"(!u?$."df7PYg`+a^Ma)80j[P%LKogY[T3QVN!hF6UWQ<k,[fMoi2MQBZ<N[/D8=NFFOWbNuJ$!4cpW:.3s;E?_ce
%]-rmmK-oohg<b3J?E-cmNg6mL`)'q=q:!2%&*=6rhe_/ED18q+5\ao?0Z<tmGi\$?d2Y%;)";e.EM%7$L<`3Jq.GFbmbgkcE1L41
%frZ3Bh/8As\.t-0!.?8a!qY21TfV'N\LAUqO[<WO.<N#QN2*#g`iM,.YCIkPS(+/FpE)08b;E+/ZZfqF77djuHG3Tk__p5;;1f)P
%+>I&-9<l#*qTe!\N26YolKg:$(%%1CgG%!L@k6=SC?<m=#Ht@j3<'1d$pb`EAPB;_:$ZFaGl4m>-6L"!JDCeI0Tk*Uo6ng"NTMe2
%i>Zl(5G>GtAZ/]93YHeOi$7gI6scA%)Y2A)2de2uJ!(O%jTXN9_^lCXY>+edjK'TqC$<PB8SfF9JbZ9!S+Jd802Q2@12'K7eC@=>
%du[R-f=CH-47Fm(C8]6)6SEL9=F\JEH"^9CX5q?rJ-Jib'N0Nk!CdeYN]c".5drZ>N4P=VM#5l9;-EsIgn*/LjkNrb$-u!,"gHQ:
%OWCfCIjS#pDn*fI'f>Oa$od;&M)j:=j@g'\rT!c"7Ne@Y^/FQ1iWaZHm"T0RmS!b#HRLpi&a(Q3o4,aL'i+u`OdaVJh\&-qj"sGp
%pTo8lB#a4b(1_r@OIZ%n\>NbeRls0F[OU`$NlktT),RY&heeLi6"o\lKBp;hn8sV2/fUf*U__%K:b*c73]^I"h#[!D-QndI1024)
%OPa1WRW+'P`R'FTAaL5=*RM%N<,3;"!pd+5"&S/cEi9!W*rB.c2U>NG"'l89Y.Obn>2H'IZf,hu@-mFNHWUiD:isQOh-43eD<Seu
%];MMsN4!f=<k7YR*<6-s0M_gUj(pK8hsTDl\hduEF>hV/lXCg0,'ODKlC&GX*T&E0H&3g=_giAXc@%It?]QoNJ].$S9<S>S^_IG%
%m3u3gLf_$D)gd4p@n)sjUDt4.>R/8n4dSg#!OLDPNM/6L#EWSW-iq#7-br)f*ake^Ss"4d!mJpA[M5E$4IR;WYIho<drc*o`INW`
%J::[".Gnr$$oD>+R\AY,\r`M2%'Q?4G+FH&GWV<k.<`u)4%iq5G$;%mQVBl_?@bN`I'F>+a(>=)rqd,&iR'\hS,;)2,.Z;tCosi*
%9^0q4\DNNSb=Pbf$)%,9CioF@aA^GBI@hDS"4o9Jrc9!6DerS7-J:;f=Dko0,ql<D0u\ts<i0_:T;-^F^J>!91FO+Ao].MCX:JAe
%BWA7S3_ghB)As"iNJOKFX/>#SZB9(=\!CE>Ft"U6a#&)0o_5obYPeT9E0udZjBO_a4u=/PKG3R4+_F25DW_t+rDuX4fcP-X3@=m]
%nLTc&`:>fSE1=YGmHai_gUBGd^$LHN/>p0-)m@)45ec_=nP]XE?bD64S<21VDa7s;M/AE34g2+U.\^"e*,B)$;thEsBU;W=OJ<*?
%h+cjAd&Q3p,UM_s'?$>g=^Ya9#0BK:!;Bd>D+FtoW)#(u5Z^c(dGEXC#J.G5m*BN$)dZ7FS^uj:a<"tuVYt_s[IWk*$Cc)(;\=9"
%\r3_sK7MLEHEp_P_.E/UNZ<4V)#FKh!`(g4i9Hg+XKrocVgNDh-cQ5:NanSqA@Aq^VUTt&#9L5UG[E1'N0&g(]8,^L+.:qt^8>`\
%`bmm]jSf6%ZquA5I7[3I6YE8U:VTKF!5e?uC!'RNW=YShlFUP[O['UH&+D>`$@Pm'[bo1&"YhGmr=4gD_@T/I\R<R,(kl=Y-g`47
%iqQ1mg\^ti,aT%]C@9jIjai?L1\59"&OH^_i8%/8==M`$Ok+:iN/#K[[Nf0><c1#40L-'65:aP=M9#Do&_!)LX<iA+CX52t_dN/j
%*FLHV[b3sZ!'n6SX`)([foMWlp^MPtTPjuNds#qtNQGQ5HhlRZ=+$R234CMm:>lu?[iHHf3*H2[Qk$A@:5*jar]$4B9]6q6Fe%OD
%173=->\=6kn$n-SJ"V`gr$V<Q5C;2c*OJ$fqej8fIra6b-9EmYjRL2q,$t8b$i^MrLjC-]]+hJ2o!<qIG2IqD6_&YkZ/=.7';O)^
%\2QJ)Af*Q_g>fN,dJEb^2EE0`nEbM_1>;Jb]$^&tar$\fPD=,7[k.m#hjCjdppQbG:j)c]bkFs0NdF\JD[:=RiZ6"c&D%4aM*dP\
%3ANE3^[ENjlfZ;V.D1Xq$F)NkDY<F5B'IWc,4hCA2feZ7qZ.#iOsQ%+HZS!#OC=$d8(0YsUY.(7SKVXeBHObLE*OR]>Lr$%%fJl_
%F>c']GH!#2S/!-9cV]=e;P5D08MlNR\8_$a$jg,/E)^'%QT=(\a0.:^<\F,)PkR;-$6AUn5:;20m0kq8ns6/JgEukZ&![F0YKkKp
%+;K.m[cL5r==b$.n;]oTW!JSWJ#-ugQa[sggZ*S>SM1oeX)D"=09rbbkcaEM0#>\k-Bu:Fp2=b_65F>an6T,3=tn4umWWrX1#p=*
%e81n>?J4;Ogmd>doZ*^H<dSrHM^`$CQqYd!B>4R"6A#jHg@%E^'r]2_^!?S0DO0-m<=UOA)\!.3=RSAdG*Z:&1;idmLI==%\)kZ!
%gUqj\NBWk6hs+TUJU>@FXd[K?.t`SI=te]R:CpRBRJj43C-Upc9X>)2=q;LnpZ:/??CgXhf7c^3D\430YQg\UW(@<]JF8*3Q9<a]
%XNe*Ym%4E^0UJ1t]JZfi3@1b\#LAQ\QcJBt[dDK<la&.nlWas,J1a-H:Mo>BV1:F2](LjV%glFn>p?am1^'mRAi>]0Irg*@VC&LP
%=S"2>VW(_HS44;VYM%6)::,8KU#3@;-QH?HfQJt(6?g6tg#-%k[9S+Y@^3A4(<K[2I[BA+^^<(2+7=K5-nenYnlUh%qbXgd#g$PX
%bc-1<<e.(.g8l=c_tAH1M0aHRQcE;#G07ANK2ED"UGsh4=Q/%k&_EWVNGg,E)59]E_X^gP:/bZT[702]6=J@0gi!p_gU'f5[1_%<
%im%:\;S\a/^El3g)IWe_Ur.V)1cgLrJ$'aPPQKF^!:eV:[``*5S9Fl/3h8]WT,k4*mW;W<7BA$)_(o'.qF#^Db8GsJELM""^67*M
%h+LTT.nr5i9e=l0f.'ocp96.7A[(m2GBj3>1-&g`#efu0$&I5RJ@0E9flXO%"Mf=Z9/TLUeTS0!B4784lg<orHA&N>rT$qI/;e"-
%NQ=;5j<7ReTj2tgEgeAhP>XB0rGaPo+"UQMJ/([ipXVP`&+-HOo%ld_-*^^Nm.[4:%uAbaLc'-uIGZXk!7jZ8"KTq6W_<t)1cLO5
%QXmTjX8D7B_><Y)/rS7A+S3oiL%HB_po^LaVk2_]k_UkfP,Enpp?_7,hVhoqs16M`(/N^].6XL.7m'K\Sh_W_2HIpT%1Y5fq`ReO
%GWk9TTtGl)+Nh(sT@216;')#)kUAbAdi_@I);dbQY@i^7TNG-=g*Q%KfhV)PZYVfF7(m:i._Pc>+rZ:cMpbNgnS6jhjIaGN"C*m4
%@utPH.('CMo@8*34;G%Zq"0\^Nh$\Q:Wp]29fU6.mBFD_nJ93CQ!UX,n##$0daK;tX7^@o4N3-M)'lqF7Lk.(5JonP2<n1fRNT1m
%DHPk3(V6N?b?"0a2!A)`n@.RPiG%1;VX?K*V5JIAoQ'o/9XMWnI%GV\$EjuBAG`9H-i_]R=Z3"Zh7FlY4PQm`Cje^[Q3DLoQ@`dm
%Dj*Xl+VA@Y8u81n2`Ja(O$E22IF_1.Gk[/(PT"r&A'm^SH^]-3C91>>Ug&4`))gi\eb5DnAF]Qi/`s]W5H,>E3[ObE&rAID5i*jC
%4**I7GR1a?".FM]`a%F\,*u'8#3g6P?*]+7l>-+$n(TkhNgE%fTf.2@N2cfd@/Q_Mp&%/gU@+r+dL?&tefOWS5h(g']OP_t:[e0]
%YS=:I^_r#/7A?9cp6b<L:<j`W4GdnULmZ*FT@e$k`g&Ye?b<.nof>$R9<^aj`ZlgNNRWjf<a[acVGB?$XPYL0o?OSm()YoaR09V`
%2IbS7=M5o[Tn9I*.7ZD"q72<uf+o@,YC6T##`.aD2sF5YMKhks/+>NL?h#S+e^se.gaF/ILr]sb,$*c.-t7mZ`DF>W7jC>o.:WfM
%^U06166ep]_D(!TfI:+&iP$:*XXW7;nY8l2]1:B*+^r8HNTpT0q^h&KB<<rVT\Np;JoX*r:D,8=g`Eusk)V@2$@9)o1(5$\_\#sP
%q[(^@8il`3+5GYUL'ASm>2p"VgV/=pC09gT?G0RZ%RNh'T"nnO`;f&9]g[G/PeK`%2&8Q5mnj:8QT<QQ6hpGlL8OOF<Uf\LQMo9J
%AHWf7'%@#C5;HdCCR\sH2XHg9:<0]MllX9sMBNPk&TGTi(^&^6["sGrku7!VQ+;SW%K6_po78<iGDgC6cmM?7_>I_58n+J^bf+-!
%^XkbroS4G1Ent:s=>^F1A@1O9+Se5ZgddNq6XYC.C!C(1O5).lqi&]DM3g!!`R"1UF,6QCbTN\S,O)&K&Q+;dPRpMc@s`KmcaVNk
%r$=$5bL"E07?#=R[LVT'P9/BYJGNI)Wd=n<#s$FTF/)G_YnV5\%\uqUYngd+`t,sQ1e5b\((MUN_;IC,P![_]`1)Y-ZgHBop5&)B
%&G>5t90O&iPp'N.ZRK1O\/^iBSr@;-1Um[q<7Wc`Ao@,.M$E-"W=P$b6WIE9n[16_Q7$af\q%f&Jpn?PFiTG6T'&1<K%eN,e;&]H
%F#[_D%RN4/mt=c6h=II)M'4P31b`,OpEaM%<E@mo1t:sDc#OBAd#8&P$a%0DKVf"^=46(38?NI=@,J<<0l"8L-h[g2O)cp`<E,C5
%mbSA2^aB@?Sn.Th5iZ1ro<hAfD(71X]N:J#pkS6#'E(+*&26GU4;<?eUb&H?N8oK^c*#\X@[)%a-k*HQ,%mGQ1X$J+4>":l_6hEQ
%[(=[aQU2n(#0,3I.VUA8CJnt@$8\3=Lfe87MD^[e8KR$9hMo(=_l1FG%T72&(=F^Le=tQChkJsTjKO8SGuF+i8,7&mAtG0f-gm0i
%9m[4'W'csQP0RrEXUUJ[7t=C1L95[<*$Ug%lb6[0)F=<u9fZ%og`-btXC/CsL5X=ZBI!,GFZH11(js@4Etkml?]Je4l#no2fLQhq
%Ze<;V'(=D8C3:6POjnCeb[smtMYfIfLm>`DXXgT]$ZL<fTJ"]4lW_qj!(32\?YXj%i#YSV(jF]60UlPh9_$t-9BEJcV!T$T\K'l;
%lFM)X)cT;%-m=V<WiiF),P6Y14OcHf,nDhZK!t/P?-h27;%s#/-O`@8r5ZlJ?>&Zb>8?fYk<,K@;9k.fiGle*I.eEDQ4O9+4o-T/
%H-jb"`uk_=Lb5+"mF$6<,Z._n5=LD\,&mrI]-ZakcD4MU8CDbnem@l%U4?)D5=POF5^e;I]30$)=/Zu&8A].F%oU^GXTV'8B&3bc
%Ak1QQ5Ih/\E'*St<i<Y3WIjFG4JMc:7ZeqJ+JaI4W@i?SH6F[b%XgmO,8[tJ?K.7<imaE1YqI0;Md=/Ydu6_@D^*fb\q2B26&3FS
%MCWogaMfqY&(uqQ+pqKS"78?+;UQ0*HtGcXn`YC72P(TfLP1Y!/AulKh@SiQ6<G]+#gbD0B+IS6Ab!jDH<a6&<KDL3JCbee''U?+
%)ujp:&r"u`UEm:C_U'Y*OG)91IY^sI&i8;>n9Sl7d%AX;<40(Dk@%XW.`Ne@)_l+k]TVPg6`H?PU_cZp065cF/L%448m[k&HL\pr
%oC.'E4bqi2L0g4B$;kFQ)e\odMc$P]YosFKd5.S&hhe'-kHrZg#!>0c!5_8`+7'Z-W2uZi'[0fQ+L1(Xcq=WRBBdPe5;PQA11Qfb
%i):QlAm&f.)I%X4iJ1J4`8(lM>l!Xdhi6'Z!EI!@&/lXe<F7[GU9johqC9uBU#FuScOJpPRBp'B:_\'[[/ns@lAkcP3s&s-aLH34
%jt&bm*Sk-;@+9<BK'#*]Xn"m?/7P[Qd-YX,cJG/.KFNGYn]Xa/5HnXl>pGn%Ko4A"hKeb[A8tHVM'"Auh10;$[n<G8par5X]JH7@
%'b0c/om4&g6ZW><cD0`Q2<b<1a[e?Kal:r9-iiW_l)%iR_18ugCafAYokg%W!f%'sb+,=88<5`-LVi+>8+fCcmI%J!I=L=^YO)!'
%0-*HtA1#R([\q(35f,a'_/KuV3>e%%/K*adfq^W<i&<f_Tdulg%A":L2mRR0CosQWEI$qsnt%OcVCceA=JqJ3D<aioOHVYU'Zdc8
%l;"eu1E4T/3+5E^fOt=a2#J)^8@0`TkhN6H"q'gBX)I'7!n*Re`+PqqY"&W^ZlliN*:X$6)<g(m?)eunf4>sdO,!,J3/+KD93D4d
%b'=PMWNKGi!beUb^RT=DMVLO3-X-QF]TUnGMl=&?p![L%)?=ln2I_OsT$C)+6JYM!m"r%8ZiQ;HqGCNYapB$Xg3L>[<)JYf$d.n'
%lGn_B81-bJd4c#Uo!.68!ZJ%@6>D:M4Gm7*>uj?fZok08;eZUMp_"qm_(p??#hm\l>d7dPOfO6Ze0M5bBE@eZ'^t%]\kHKuRsOEs
%\SYI(.;Z!']Tk;HPkp'<KfIY_^!>]o3)?R)G"U8K,T/sN**UaLCTFE`4>dVk1n!\i.1&nSM)9g4e05RHCdr-*L@_3")[h8gX3Jmd
%gHQ7<"tq&19_"q4f6>9f*R[>GS>"[c0W,_U_QrWKjYD6=1cT,]k$OiH.7]SuMi=,E8]1mA*YWe29s-"iea,Dk]"N?"P+O[[h2H'X
%cfW)'M,(2cY@^W`+$an8E^%*M/`.:DZuf>/+.f0K=NboB+(K7b3M1ULhj%$LG[<BPL/k+:%o6.gX.2u!QL>/6>s,$T:VE&iCd=Og
%cDP!lGD2A9Sl<q4?H[O=/mUTQS56haO&]uYQh.3.nf`b%6oglc/K['Cj3%29$.(.*G^TF>hnmhtplt*[2EL]1-U8*OV3NS1Zr4Bg
%fsHEkF;Nlr`7p?3fJ*#h'-OHHO31g2fdZj?L]^O&OG^)W4"0\\9P"ktASUmgW[WG'4,#02['I=Y7X.b7U8*N?pBV92?"X__X'W<Y
%oEi]:;sBTKTM)+WCP`LKD#N3&@]';=2EO"Y#eFBrWTTVPNe`W/PO(:KHm/Y"NUQ6'()Yi)8MW:$F<8]4]4:G*jPg6Fm-a(.oAPcd
%/tHmE<nX&Cr"<Sg$"tQI@WIWuJf%[0TpVDSYB\s2P*ct4_L/1WLoF1!of[ZH@#FB`fA:ZE>'i#8Md?o>FABNDnu+em$sS&-!lUgh
%MF*t1*,C3sYX9C-a[<pU,q1'OeAs)>3kRRM=$9`#Ve'?X;cD?%+'%g);H"u!aQ2W)?q(qJj&3%BUD/W*Uh7&9k'^Pfo=e,_,LRKO
%GfA5JC1Z8fY:5]19#&4nnrK^uPXI[B3.a`-:kkiEiM3klN$mF\hL[t<R+fRt*!8o\n)G+VC"3/&8Molrd)>H`k-.NV&f">sV,=t%
%bKMP/6cCfL9>\!d=1Y:R2\Z7b\^BsQd5iX4AbEPUk7>_sh!4A6G7PV2-\>VU!5S?)&WF?^@>Fp%[tMsc/eSteT5Gs\BU.p5bS"gK
%((N6'<#dd7Z9R#b/!0n%'[[qW:lMDi($lt)3sBs8%`p(9dUAHAfE"o$+g>KjBr17LG.a$6qA!&q-+5KB(`FgOUB2E9g`4hBe^G'p
%b%4]\a[ml7Bg5&*[4eV,?4(A/9)#o^96%g.mAG26/4cUh9tUi:pu&s^eB%sL20tu\?1E]?b'**Lk`&3,:m/e/\4S?!F2ab2VQX4E
%7;nu>PW3Q.^QV-*?s1u>d2S%n(6<)uDnJ"@bDi$i-PA<u]o'kjUGp>8J]6[&d2Oc!T1(&;7"7@icKNN<g,W!.*q%hI%4m8*@R8(6
%o9(/;6uU_#UKK+G*50a"*Q2/?O?c;N#cT.W\0Zn%'j'Xr;&ZLYO=i!E>[/:J+W5RQQq0Zli@q%MqsYNR;9Z'#fX$a&V5otLXD;cU
%]j-HSC%@3dd[:N;<Q56,+iLY2'2/81,qe5)C6\MXWG#:;_+Z#L8t8XPg'L4kV6HqPTp8Za,TRF%9XAh.(At&R&U<<&p=@4)Q$F!\
%N@W;dFCh%ig@`E7o/&Jp16m,YFRYq_ms%+_Q$GkF_k'epLYL0XESdNBo+%<X]nqkA<T^9W>&d$q"Y0,Hn-bdtf&MH6o@V96BlW"+
%/+XJ;k0fN?)W$q2^/2PS\jYLA<-]DXlag"J!@UjDeYsed&jZ%n64*^]f6(nUadNEY_WC)0C^^I.+:n:$c!gfHlsaaR7lFt3!1eN@
%!.r'?7U1:L]0&T[==YG3/=Upg/&`E/l#E274_?q-l83$m#Bd,gp0!1,o!-K&=mM"_rMe0+NH>?gOD0TOd,p>U!`p+84Y<!PEAY9b
%06G\u!i0rSNZJuQ!BP6ab,_r47FksI;*!Vj)kD^JK%<0O?q@mTAg9m8!$aTs=G":.m<7N'`-"m6`UfMjddZXu7C$hJ/WtOo:m(,-
%joRuWjL+S77Bup?AVt"AT_"(P+d@m!ahfeom=VR<\V#cNA72+0*!NAnIn?0U"(fI1HL0'mLV[)$K@T(SSLYsePUB@EH?+_X_pn#.
%@rnF/i*W-*%pPWA?/BKKaueGR4K9f*3I$&$U-(?U6DIfWm%V-CF>@Z&?+9%ii;-YH)9!H%QsA!>I3m1Lcp%F-MSD;LAs/tq-_Gc3
%*)!Yulk\$sJS3W?SZLXkMIk8&*hf[K1NB6n.M'_eFR0%-SNI;a],U"M/#?ESmAaqnT-WTfMqJ/-]2h^O's.3F3eKg)+b$,tV03M/
%3[R(6Gaggs/;=tEGE'%/PVbEV[5W@#H6$>)hD!Y%aT26<Kh^#cB;t2EgoX_@<DN:h);]'[4sdp0O/WE&I8<_n?.D[-PSP"LD9Y!i
%r/+Wsfq"sh;k#3Oqt[=cC1VT0V]o/`'=e1qJ-jb<>q$TeFk"S%N.,?>n0W/sX&nGT6KJ9YR.3i2>.Ktf%Ds[+64_quIAL'4kF^B>
%Dmm&O.9]rXlu#KfY[31T.JtYD(]3%6gs*PGet*6"4:r00S^Q63nY8YfX7=XQGZCKB6abS83`itX9J'MY:4s^;iedg36XB(/-;'Fe
%XOQmREc9G.P2:CqphAc-e:NN,`7)4b$sn-[,W\sXk,b-2HYD28mhX@LHtaSoUuJ+!k"`+f@[p%S^nQ4S=$lU3C?:C,jl.K/.r#Rg
%cX`f'k?Y8=maGL2i.%`lp#MuGDqM4-^-8GS'+5A$A@-8Z&`jM&h!HH%<_l6<mYIA*'M!DEI2AL+74W[RGU7PPgrWR$]'`\J96cH^
%-]V:f`2N&"e3tiL:9&[lTAUDiXKYLGq`$KGUSG%hc:a60gRV?s-WeirBLACufI%J(A-9c:/F8S$l9jn"ZA!^Im)/:o?*:D-3S]&1
%_EPO&'MLi#Wj#8T'Cmo4I<,3I$G3h2'_[CHQ)X%IfiU8BYYS[DpX4bD.MXJ#/F:i47b=&^I9=3J?e$O=]m<^fT:Bq2,#B(-m$$`K
%^@coJ_EPN15"S5q,msP1k)`q/QRhEd"3#*m?a-b1Y,Y:#@cbhN^6=Cs>[a6?d4SDN-WeiB/CAPRp;p>->q&a!SPe#eB9QXnX1ln5
%m$!VrR$,0_@@u=e$fcS?['3=7i(hb?4gD4eDQ]6`<_b:6_e4h\R8MEl-PlD)pn!?W3O,e!,6r-s?7?\TSQaYn2l%tjj<Q$u'mAn:
%+-FY]LhmUELFa<;]0i\sNU+MY&c%6m)g-K"Q)<>uQlMI&`D=\<\BlgVELA?TA5*P^UscmX(h6Pm#cW2SSn=t95!FKJ5\]'-CXY4j
%'4pheTAZnrjdt%/]s<&I9GrE;d^-0#oni9,oa2WQ;?`'l2Ms,NpEi"DMd<2MWQTCNfHcHE.JTKtqu9DBSeJubMKq*@m<+tds)FR+
%4p>S+rl7De[-mtC=jqSO,Jqd<r"$-_<:9e8?Rhmkq;8GCa:g6,P7KuPn,GJT?L%%N^T2thcfOTp4!B4ZW!Vf/H`k@U0e$2#Gj]T0
%*p_6cc6Po$'6uUMR]*$Rh]X7MC=`%!AN1a#h$kb2ls#'6MODHh#r%h"p*jX/kUqo`2tgr2d-42$K@C4m@q`jY`^K\O<m.0u%>t9V
%RSW"H*OT;YU\_RfbLBGL6!&L"Z1MO(XcQ%lR8b\Y2So3Z#&(.eb=YPRjoop+&/:6U/&q]P!?Ip;PnV1\TTb]$!>OJTMV$,#Q1d0o
%j[0[R>[B(cpAL[9#M$OQPkK!ZrW9GK9%X$_13T9`&ikJSdj<X#AYr#Cq@ZY(a5#UuVV:/HYi6-k[[YK\^?YTe\q5Y#K7&ms$Y*Kr
%HF`)%jXtb)Q'>+8.Ku9AUPsO'2[\A0GE.Y+5Z(<!4U07:N\OoAST_o[fY;uf<3hXH98`r]7AbatSBYMNP9$ern=*)X`@8Y#'CPg_
%btPsWr]>*_@\>>uf=0>EIl^<sF79(f9Qe=Ts,JZ/;7QAh=;U_MHiIX+ReZ0_F2i>6ZT7HZ4t/>UHiG>l@b#5NPOACuI=-D@F)uMQ
%).WbUokBr/Ttf<J]U![lH%nMcg6]H9mXBHW?j`\iV5*HGZOi<N]b`e_;ZZ+iIVE>7+[G3jq][GIp,p+DpJ(<s]*-QRa&Lq<AF8Tl
%78ROJ88G17ZZ]^ofrM\RP7</djk513X/s>d$`R<CY=_s"ak'Fi<Qk'#UO=\kl#uOs[#'g57&bC6YWMrnR?$C.UQDL0>l5!*Sm>OU
%cTgn^'pM\9i_mmce?g'hi<R^]eQSt_/]Ku\E@XH[I_NbjF0JJYLn+Z%hShXOmPaH1:?<.B_Nj3+H^2a\F&(7H,hg3i_sD;qX^&j$
%.(tp@g(i,28$@#@+P>uE^F3*%2[\BiGHo=F6(_+P):;`6.kK_js(Np?OI_'qQDQf,=<#3p$pKF#YgflXs!3QsJa3o6(oC0$U!$XM
%hsf*=-QsE*8Q6p)Dol3e^krt4Ho9`f-PD`Kb_oca.9>TYqeqgA4Wm-+o8KM)n_&Vsl""ZPjK$hfeZ'118;Vg@.7>.=f+kRIOcS=L
%'%WacN>t3i%6^WSfPneeEa."G;Q@qK(#k^P"[?$ZAY'X;#JB&7O2Hd$mnq"qjMJjA!nMndVRGu9jKJ\BE4@CZO4UqE:Dms)n_I0_
%C8NPu#o;`fQ3=eKYa3Ok=R#3ggaIpmTOA0>'49%>BPOM#LECqR-c;C%+"m2mlg,E\Og%\r)DH"hfiCNTUjp7%+0.A0M9]a3@ZFnh
%(7)p*"=CUUQ$!kGq/g.[Z4=LjNm^G[,1eGXTJMmtCjKf,,H9J@-SgHgYBA=K/\MI_LO3SV70"YfVgaA^?6_ES#m+JU>YLnSmduXh
%]E&40\5Xj+0o9+<j`*1I#OJtk32K<q/'/[I]"%%H*&-KU+ZMg57!QBKJA<L5?T7fh!&`3d=?B5a\!2s;3Hj4HQ.'F"mMtBJMB-Z(
%_`aEGcn=9kAC]#ZeJl&94*Kf*_SejcIQ#_TD"MUsB.pSce9795&5UJUiXe^aO2rp5/#@mCoT^]e%>(l/<Q1+hN?_!eeKa@_>LW.X
%ZDoomqVl5K<#"nBF/\Q\W/k,kYj(7%kXkN^f6Sc28!SPlq?`?iLZpok*n1AWV/l&i(X0F!$NKcf?tQ+?oNiPP9N&\t\RLTDdB'YV
%-Co_ucrJGID+G0.l6b=!"`9sH7%ISR;sDia3/U!-Y;)bM\^!tG-jC]h]#]C_Llrf`Q\`n[A62\&Hi`'2V4+mm*6b*cf$Gs9CR,=l
%jp:h!(,u\j@L;E:J)As7d#M^c254ec'-0NK9:_+FTIK;ZSjYE#b.*'RB(9L'M'\")bsoAFk(Jmcna]Y^8%b!Fro8ft6uaT=lOg<G
%pIQH0P,Pi2O])C?5*?P;j";77gKQb6,Z-ko*Rl=V3UB8#,\j@uV<iu48eMk0H;KYN0qaOY8^uiC9".m@6TV5f8Y[>(forSOb)bka
%b6i5<n/F#2`8.AEg;_<A<i?a^\Bnf@Jg/R-+(nhZ.$\M]l*<W6UjD=FJ9ik!jMQ/UpTd-(Bs:gVpTd+JoDU[T<[]&=JDHr1Y8p&T
%2:ESJ;m#QD%f%rkF"]Z:=B5@/_dg%?'JDR2j]&8o/j*)Qga,_'&hZ:/.gJ]HKnnpsJ6*OHeI#T,G_&eqoNZX>YMSm;$P*CBaTXig
%)#C$9&*'\!*Fb&LGo%MC=\s;,KniR7&DqYUO8s@eKnnrG]2H?"o8!bbeSdNKM00k`iM$+0(fUA7(ER<<_d;KB6hO*g=IF@3Knns:
%QoEQl,uDWgGc7e@UitJ6(ESI^T+5a#PkAri\aWEY0+1Fb54??U*Mk$J\F<>n[R4BYS9s5ROnTQ]HJtP7MY+?p_Z94`(EP'(X0H=j
%F5`hhILIaUcG/jF[5s&a<PMM@Rdt<N\4:MhKnnsj4NJ;J`.a!3.GfrEgLDm!<%:AT[j'*K\H'u5`/$qkBTuauC)7p4+U-0%n;q9A
%g"QuI@Q(,jGc2,69(ALio1L^?gCDO[-$`M_cm?<KqGMZ_>^33=6[QeE0>Od3dk3a^5C#Y94O1V/O>$NpXk:A)MjF"%5TO0UW'dFf
%ike(UgCDOge_(<@02R\2kJBSL0(&lq4QN0VHe\j@mFVdW26SE-&N2"AGc4[,n[W(VcgrePP[uWL[_q]Ig7)F/#N,8<lbZ#3is3bV
%3:F^OJ`(RF_8f"M'e_[3^)$I=$P-gBn=j$u@c`CR%o:O8P.C)Oe5H5q[R0QO$P,\ln_giC#0d<(4QNO-jDR+jA_Qqr*i^Sb0uiSa
%/j*,-mQ%"IXRJj][_j>!SRS<b00DAQpH7`X6R@$!gidqA'ZIHUD222UU\.Esn50(l6e:<Xs2%.r,$fI?IDU\nlF.dKfkL;@FB*6@
%`.O.a?$LUOATP_BLPiEp2Lr_MheLLp/j.XKf6R@LL[)GPKiFo6K%_7!DW!Hb?,<OtK/=3)*6_PD`99)<Q:?PDD^t<a4l9UO7*1[V
%?sL+*KY5)'<RZO"&FIs#QT,RRI0*c2e[o.b=crh_P2rDkQ)<ejD45G4@ZO)9oN(^Rj4>0u"BKX[m#>b@2Vro:mu/r8A2JK;';Omm
%-Y\X]2dq%a>&2k3e(KW"Aq/T(p;\$oEi#*J<!9b^ZqTOf_G6h1I-qX/`FqqEk1#'_5C(.7UH!*'YM70TBG.p;dHoZWM)T(r6G,Bd
%Xi+<@\jCL"XV&s_H$@39[q-o#T.DWP9kW;Sp2^tFpZ/Udd*VZ-aKdZ.n"?4JgVIW'ZZA/Y<!pt1;53mZ4uV-_DHkY\:ir;?Xk**)
%GE^_Iol\pcCba0>[ma[!Y1!>aAR[R#.+,PKXF8FPBNe4=*'e"-jr04`ieAA'T;sJFEPg!1.XBif@=`4IkY/C4fEI]0%?$@5KO0I:
%OD+HVL_!<m^EL=$*@jiK470n(&'!n@[d5`P3C2_(V%f%2%3C@Rja"*gFTQtn9P\/N`]%&tIH^KZE9FgP/#GZ(Kuc0)?$-)iiN>ue
%M%M(@7\Zpl^F]g:8rF-RcpiU=^srD@)6L/VT@)m]2dmSC`d![R\W%)7+p!1?1tl<>T4'>@1OS\"F=+[gUZ8=R0\SE30\5)-`3M:B
%^So0_L$/t[99W5'-9^b,8N=(p,$HnQBS(8-cVk*sWio"7GT6s\RN(>e'COP]$bbuA#qpH)@<&j*="#4Dm&(rJ#2Ub1)2'7+`m1ZT
%Jt;id@WB8g:A/JVa2.iI@$_nX2IXJi0+uCGWk;&lhVPts4P5A@I`@"@i;ji!pY[*e_4L=;deDP'Zr;5-8\Ml&E"@hDi;p1)`_#Sa
%L#a=t^nff3$$ZC*L44bgi6OCVI+faNa&2#X/jOK5%Ht5r3rifsHG6gPHgm[tU9EF/=!RKD:"X[j?"?#@(9$@8Ya#Zbi)C$i(+9td
%5dltG5WDcZr)P=c(m/ta>n"H],.KOCK&"leYPY:_o7D0*JGuF5#sPa!%'BcmDO6nRdCqUthdH-[n'6m((V>TaQfcn)/F32Lj<l0X
%o;rha]B*:&:)fP;SG`9p+VqQj85@*t/m9>a0B#_kQS;?t9Q>;qjEs`WZkgcgEPl;43,\IN9;,J[=Q`s'b@L"3NurZYB<m!*$)utc
%F:Bk=f2joSrV[Ktp<,lTR[a9]a]QLLI`E*4(Hj;<WTWA,%=JKd428*?!pN)k*IM_7flq'N"S\l?n6@&Ke8eerT!P+,He'ot]=G*;
%UZD6"g>'!/R4SJ2`->3(D^\5#XJ>D5OK52>+]AXSlbmlA3E!f>OOtd^R4h7HOGiT?mTn#T@i_d)Zg/05SkN8%V]Ns.)L@'[5\J]a
%#^8Ks8U'*+-N7:,B=#UQ_5?i#.JNd_)b,_9He7'XM9!9b&*E1.@*^`8Kk./OQo$W\CM8qWP5I.V-k"k[D#;BBTiu0H$^n=d6GBjd
%f&q5b.n'+DF=VD5#hFccd5mi=NR$Y/-PWXj\YBo7*=qmmRur)+nK]]"mBOqUOIp?Qh?HTb2@[aoKClIZ^t8"7A'ffFVV?!]kd7[j
%'Ahh#(7jiX$N`86bR*;GRXJjI3m`FF^b^rbh:'s#`<<rQNee\ndQj[@+6=]`hM:67l&Z),ZWDZ(80<XkZkS%TjZ6[f+ScHu9K8K(
%gE$k`$gI+_E[VR*AV0FG9/)0!,2m51V+B`IRfJhKE<SIO[dbTL1=bh%$Ne/er!%(gA&Kf/U;2EY8^4H*3O7SeOUqLA5_eE/iLpI0
%hMY)@ph'F36/0EJf7G:WF2mVc^Bs26W17Vbol:%92LpFsO@RZ3*%@Z#PC$oU!hC?_S5t=@<J*p?%R.!^r>`kB1b_iJ7YgNg$uLQm
%KZV$"+LMEAN4g;nqjH4.Ajb)Fd+BYM^$k;=Z.uk('2<PMSSU]D/=GKfi%\Bl>HSXELRa:38N-o-Z;05>gQgf,`re]1N\ruEh9c42
%CQhj8k]X,p.%$0_ENG[HA:->(dEAtQ9]W>GbFB`1\'#1ShnPWtL43<P15!`%fW3DXqB[r/>FQhnFJ]S'53U,uQo!8'a1S2KaLY/^
%Ira,&R5nB$4[e:D$$E;4kosQL#nb*6ZV4B!M6C1(n,J-r;a7f)lHetiW8ZMSm%-MpQABub\f"T:Rnf%4Q[QQ#7j,K:g6ba5qX<FN
%phSKI4UcNZE<_&s;!:%pf[E*+>rr[iK(]J;,3;uPP,5%TRDn`[/QAWY@Ztm]1W@=TS'0$t'Y>cARAo,c!&Q<8+h9RJ]!VhSd)a]6
%+n>[La0e(E^GAJ+'ZU_)TK-cZgsD*m2dUj&`GYV#+/89egb",8&<#5_*Hr2oQDldK.;![<en$7.b>;K2^]Pqn-#&q?Loe%L_rqLh
%4%P&m$-d1(!k*Sd<&lT1:KdB(`Wp06Qi/oWVb&2'V0f/lEnt$=R/ILo-G#QBl,#o4b\,,0/)duePqhSA0P%XBR+K]V2>"mm/3TQM
%jg`B*Man3Z>Os1oef9PTSA+@^XuW:rcBRl\e2h.(UG_r=C)uQ.hdFSHX4C$&AL+Y&*=pue5%_S=].lD6Js9'!c^ALd;2`qmlk2CD
%dhjSFTM[Z/FGcGC$;q0ri56aAoO^/G,!=Pf<;S]?=;-PPi8ltcH*I/fPE&Y]S9`HJ^642cpN'fn=@]^i=23aepH(=%IBQgG\EVgD
%lMK75c\5*mGV4AB)lC@k9nhe[*-\2`5.\ks$eY"iFr3..eLfQJB'pVJp0GbO'?)\"gT5i"5"RZ$Dfh3Ndk`\,j!;,`eB6HNcg8fg
%&$I@:oOnj[VkJCG?%&QCg#2Crg14&;E4r2gDLd#;q1Oq3kb%9j$3g]F!>QP`qog,6Fop5R:WDLR]`IBs"eELuoPmp\BA"E/@`q*1
%;8oC*Smt[`ORC?lN@oX.UbZSA.[K!ZU@Ll4f1YVVWO:ap-qpsR%"FI-C@)X'KfWs\2sNpmicno/],Z!E5?JYR/_ho6gapT\;dZ*f
%;LO1AJNY=N'!VKiLV47[Ud#p2'mF#K&ftplU@X*cZ3T8"Hl**^>5P<`Kn1uc,f$$S$7HD51\r#J3Hm3N;=\:kM!F)THhU?/(At?g
%TRN>Pn<M'`mT,`H`\\)8^IR0$.1.bmK+l!9nS';T=-('U(\Kh[7\6u4q3c4+c!)4B<`$4(aneJnWagW0>%?,F?m'::2faJ=/%c#N
%npqain%<as:fL^\KQ&LAB^$l8RE=X\B0aC[2o<oB)BI:TVIfE)e)66f\]8bP>+QN;S#N&M\`u\dZP+/.@62_QM%e%QZnj[9EPMpO
%VRXoH*&Y*>N`g!B/i!T*;d<tU0/C%#_]3\H,k/oljuG1S%h&M')t!*[K[E!Xjc#5fn.C+,_d0u0-6pD,EZKkm^l$P94USGUJ)-e7
%*MneiDaa-4$O$pWefNW@]PsNMcK&C9?'gL`S.\NCZT4ej7j'L<,`2H.Hd\7=BZLW'>+M\P_ok#"-usZ4q!oj2Wfc&"[gWa_m??OD
%a"oo"EFg^"$h$^1\@Cgq`p\lAb4o%L\Tf#p>*d$^n[.DHc8?Yj/`a4u_Un[X\h>;kaB\[`X1@67QLr]%@F_E#(k%/pqdS$i)qst?
%DH*XdgR[9TP%JHqScleV*HI/dg;_G#7f!p>+-!lnPJ=tF.3,Jf+)871AE3?\UXtJlT5n3^p_7j)nK]Z+H3DQ"_36Dg]4A'+S(hu*
%H1+8D@RHaf+FA!A]`7!^N-ZG0U9J9^.DKrtdF=(5,_*l$UJG.g_sa(C2"bgcnFt3lRX2=aq-.JR9g'FnrJe.5g.pVSZd2&FJ+N$%
%W>@=GJ(O%^WJ<$DOkE6Z5<R$9/d0m]JcWmc]Uau''ju/@7l9`QX<NBCfD'-fY`7!'67Ja[_8G265an"]AK<O?rV-!OO>E=1U?lcn
%>@XKg6+;0gNP83P-PoZ<D$'S^%`\7F'ZRjoh-c8kh7Mh^)[#r]Gi)is*pfrk=sPrjD0R-'%`?'(8RZk%*s.B^"+s7GoJ>`[9\s-Z
%C\CjHW?=lX[ugF2R"3Cg7DC!@lYUJ)ca.E!kA/iHZT4OoDo2Yf$BBH4*?jhJrAV1'S#qHjK=O)OAtbt)<m/D$>b!Z.]Q73-73#U_
%ptLtGYgjbb^HTQ<?;%FuJl?Crk,)]p\[+ug!hF(Ui6-1Nl/0uSakjEY%sgX$-'W2a&T)G#.KtdFmDg6V^8rp]^a+",B>M;p`<X!J
%h[(r*LYJ3dS"kV^/^ONAB-shpF3PstKZpmM'B'TP_Z$<^k(]^"92#SG3ZSc4DrS`F@>W?XW/-6@g%'8"T+%W;'befuB[bpkI,)##
%+D!.p6n!GnY('d>QiWilp]8bC$6k)`j^;Z>d_W7;EB4LX:J/i=AqVbbD9qt\]*1jO:oZ3'NoXU3!.ar*m%H1)_iUIA+gW`P\^@Z;
%fZSqDlNFg=A]?b%Uk(5=R7ce7F4f"J!X4\OS5)?0p*MnCT>OhnGS?*,%>G%!:UP>J[)ahT2gM-g"p=&5'8;DLB29M%hANR(]Eq*'
%$j.T-'SaDmb#A-JR4T!N7LIdcV(aUs4GC0o'&I0YBh-#OGZ0;/U'8D)!>,a34c)M&hWO>g>`.9="VrA(N>+TbnKiajSPDpY)4+@,
%'Z<$!!/:QQl",(>Lso+'qpqO<+KKDj?soLJdQdq16_b2Pm>-<AELLnq%QM_56P(0\RElZbL1f6Q"0fm=6'c21M.%'^oMM0pQ*a8h
%+B7\1cC6#dO=4h.)6jM7WC)J5,T*SXD5SjtjHNM+'JrJk%WTb]"R`8%_nD:Y\8LX8=2F+!=<5K+L8@L0VSJF9qsN3&`MunN-)jsN
%h:cRCWHOgYW;t1'<N1:;;Qok)^QYZqop2Bt(-&uW<GtGYRfdeJ<N=o=<07W,5Ir=EDb96E+1LMXeZ2U@QDC7c3P?nBDb2F9gn%i;
%Wja5gNTTl5<4sTW#gMU6WHq38+f>WHWR+!Ja",E9r(;^*:MJp*5cZE$OKBBFim9tIN6%Go=7:Br[2"M[G;3D8]Ai`P`\7He+T]>I
%lt#);-dKe@0$<_khImPk2]"Mb#9FWK63i4,q2Ph(d9^c6*21EFb#0A/#qZ#%Bm8?bOp.,JOq(ssbt6rYNNN+Phl^,((f)9J?t%.c
%,T&$-A7@GC(KU1m=Jq#"@r+RRMR1>.Y3>K6`f9K@Nn,Fr)@%)b'[tB'FSQ93?Upb5H?LMiD"/qX,h[-p,aeX;&8,7&q"DJCYPnf^
%630Hp*srn@[JcVi/+dpG>oLK[M-g/>:)6FlFZE^gBSpP$s4V$bKDgC*mL0\[4'>>qM]mS))Q\Z-Hi]9!435ST-T_s,_=9lk7-P+.
%P+'OP_YI?N<4hU17RT<j9m3ae$hpTWoSU0b5/pPm3@<2]9P\U`ioN5&J]\h#`01F+,g.4RKS>HD",lo@o/jDg^3PR/?(A`e9WRr:
%5Nu975:0"]D*1dR]t&0aG@*.!J%cSapKY=m]2.8oO=WFTpn\s2)DG3N%7_YBa0msSf5QD(n4sa!a]?6nmlE5sfS=gk]0lqDOG%=<
%C^237M">pOMbcf1RIAmZDCp#Dj#WSAj5U'a/c=nr<\LPuAj9E8+[p6\aH3X2V?2&15RS1/!;\#/E\Yb!HdaPt;XZtoS`7#ec[o:5
%6]38-4c%`EUESBK`4-$YL^(1)0QA)Y\Zc<GqbBI+^rEG^%"CHmHoij=3hNX7ca^cpkAu5Ym\'G%_/Em[A)o-C'N0*T_rkAi8E&S9
%XI?RBRt+LHeY6!`@Y[H$0h\BIFto;8q7[$`EOA8$5DE^8Fg]3("m]dBfR+b+NQ]IZ_KHO9VB*-ug(fr&'iVRSP#fg88uQ$:bJAgf
%V'gnC-*ZM,H65^+?gj`Hkt/+d:,\9Y2oa'4IFpSof+#$jFjQRt1:cB*RHtlbjF5d5=VHaBeZZM#6R)DqYqhqtf1j8p!*$/V3%G$^
%V;;:-QpCrcTMOqPp;_X%Ea\Osm*u:<&sCjr:B!'Q-Z8Y'H61:D&=^A>Z&^]%hM'd<5*4U2_GSl&HTWYHLGdVdXMSudB?K%c)tjp8
%>ggW>b'lP.R86r2G@N<&c')nsZ]a_ZhA:lkAotY%0NfGK+(lmI!TP@'_Y>81]BS]'d[+EoRE!Rl@e[Bch6G<U`rj;*+o8toDrK?M
%/+U^_nHTW1NgT\R.<=Ac/n!qJ9>!UEQkd[5#i]d,1+,i,A-iCVqs]p=1$;I8pWLO5:3`?6&=j<9k]D/,c4;7ub^]*>O2Gq2PJt=U
%BbrnSXMkP0I*'O&X67g>jj-s2*ngW&TEda710GZ8QUK>ti;u"ur'6f"*G%;h1.k<ma;NmI3I:oGYqRjeB25+=h@q?m3deAV/dZ=!
%PcnA+O@Zgs8Uc7B(h@JD+B+tU,?VPaMGs5QN+[m6A0FbbJ2=N"p,f`Y/jW82cm`5<*1ThTPu7;tk.UWscWM\.e@"0cfuC\t4_J*2
%4\XRY\.AF4(\X5Pihs[?"u'J,rqJN!R;GXDetg"j8n;Fs/AHu9EX6'6!IuN;?/_r:0/6kG,I;s/g)\K\(o;d7=Ko\=0)ddgru7=E
%7if/S(7Ht.Jc5R#OT(,#.M1@_@o#V,pB[7(C-.B?"i%VAV6mSK`cRJ()<$H7Aog\PZR1@*:6'q[0HtnkhEFF4[.2<P_4#fpFq>6.
%$_SR"FRX-l3co=%TV*#mLNf6oTK>+Fi2JbH,&dsMe"IS)(?j]TR$/\0VtIF!,Wmd>d]q9$`XI^;ic[,IOKH(RS?E8.om-I9/Rmpk
%I<c;2F=O@Q!&g^T$DY;cYqjf/E+bE-1QX5k"+^7=K]dQN2\:(7-S%5R*QUX:[3P`?)m:G&F5qQ!&CmYn<ujjZJ_kNUD6Js4'\p^/
%#fc'(4CM1U8u7fW*N"$MWdS'b'0(Md#lmQf@[5Y^cA:ilKCP&[X@*%84$!:0)m?gX1>AG2aFl[glH6&"%(.rjV6;lZm=bOj-p4mB
%&u)cuGn+S!r?ZJk"jnL(mB-pOBh:9Yd]I\BF.NAH;c54[3))'8[O9d6EmP+Ad:T\CEl:5/HT>gb:=D?;qG[J@E*@U<IGW\-2jnb9
%C!ZKOJ718n-Zr9i=T9oQKTpSNg1V'cUD":E!Q9,4eMh6]kg-^#Ysj/Q'9r-G6EIrL,Cnj?oU>GVU%p[*=Me2$ddgi<_%O$hEtB)U
%Uan&UP8<qq>b&D0S\2b38"^]q]M++oTi$_G?7&'sk!gppH'o3iZW3t;V7]KX&oI'974Bl'U(hdO'r$qZ#uP__!Q?JKAO;U]NI$i[
%1*K9"NN=%p]M++oU/?nJ?7&(^8HHdYj^gcC.+"e+V:6BW9F4r$CeXsU/KP`+SUWnb>+(ArhXr+^,s0_Y\Uc16/h"+YR+1-W%"$-u
%T4IL#_4Q(Irqo&/gBYNpq[d:o#0>^3Q\1E>U5B)@V"&>`4.8"8>9%2F;b!sQ&(qn)7\.IF+%j3+mg)OL%eIW`DH0m1Xig,C-AduR
%I&F_E[u+sc]tnN/Jn7/VJq/kVOQ&2i$/mF?ac6b@'u:"R!J*Q_6b`K!-,cF0bFYf)+8b!Qo<X@7"PtE680j:-9UZ0O*$XaZI+t!8
%\9eDR3FT$*gs,1tQU?-J'E!4cI]?>Yr>IQ`G>m"9\h*T);=rB\Uk/=`!WE?(#/^Yn'/Fh1Idk;eIkCDurii'H#1@676aU-CP29cI
%KACXWm*WQV&bK;nWVfrD(a90]FVhEF)D%OW6l.ZbO0!".[0q?8^&!@8,iPBH?WVa0p@&_LeHcs'#l?u^,;-hL%YKdl%t5$$nA,UG
%_IP@Y$d*j1ocO6H'EI2Iq!AZ@q>nA0AKV;sPMtP[0FY/#_qNW_?>mUo,^ghgh\UBgr'&$Xl46)[ILCM?i4"fk'++sQF7>s^isL*g
%TYVH<\GX(F(]?l->subPn9KGb0]<JWhn3:b)\E@L++8^%QhaL1#5gAW,+lhG\GRD2nG93jGC;tWQXbXoPtDP%1tG^>*c*AST\Lr9
%QNM/Q]c\j[_'IuJaQ3_R?/]06!;l*P'.u$[n/ArjY_sY&M!A;%kR%O1J@n(LbO>+Md#VR`6?$*j6,FB-&;\3!5O@rr"$m#,o"0Js
%P54VJ&OUcq%cj".DV1eJS'Iu=^.`:Tm1-94M\WHo.t@5I4%&s,*Dh$mpWLnb^=!8E68/2UE$+hnlQa74!06Q$Y'GYnYi3bj#(6[g
%0!*Xb\/3QXA6rmJ'>i>%c[_;d>j835RGP(_0mEbqn*5s7nW3_MT7=WGhuE:ts1A4+ImJ#Qa8bi$o'_)-e(`dRn"8J9^461Tp@nO_
%VmjG0h`ngQIK0<&HAamTBLN""Z+sP\i"sZS#$*BeV"ubiFTHq"LF#1176_F%O2C4g574Rr6i$-7&)_QD>l>6m!%Y_Tp,f?uT?kCm
%h1T1<PD5`r[4_1tA$)Mmg&G_ilbMcYKTWhE^](utQ[f&$J,Z'P<Sd]Sa$3l.%KHFllL4NB:KN%d^ONik49#3-e_focT<A0RJ,aW`
%GPq?9X2!]P5@+4.s8M9Js).:RH@<ntm'(m?oc;n$2?n8cr(epk8-;sB6\`Vc]JCI-Xd4N>1KN,K"+Op$Muh_"//^.f3>"sI]tZL+
%2)@7P!\t_Y]"di-AhY&1OqGOO4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W
%4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4._5W4.]dmWBYe]-g17.fb8g"P(J=9I^MC5_4N9_rM]kaNf>Zt
%m+68i9DR*ASeE[<?(J=u95ps2:NWXM]1RS>GOU+Q<mRh(IL!V&s3K$$eWZ$QQgfK!(Vh),ms6$ims?*jms?*jms?*jms?*jms?*j
%ms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*j
%ms?*jms?*jms?*jms?*jms?*jms?*jms?*jms?*jmsBM3eGe)"pXf!6J%t?.J'[_ESmV+EU#X\DKT6ij'A@=@S^h)!s7Fp'c>NcL
%Z@>Or`1Qu_Ti+('9P@J8s87gOIibHWf$U\bG2#CL%F7E,*R@+<*R@+<*RCpHeGo-lo).mIH;jJEStC:F][V(@>[LpkTAdF@^AV3L
%EG`@Q(Y?\$bMX`b?<nM"$2t5p#+;h-bH^O5\,)<C\'O_pqc<+aJ&\&L,9>RPrKmQVCO,pFhu9Tta3T56plKg>o8n:=o>dJu\u48=
%6`N6;c`d=\Po`ZO5K=#ZSYTkab$n#a#Oq$_XIGMNIj`nKKW;ZPWk4%YYIj*jh*!:CIst/4O'W1DpTI-5*`?p$*`DHO*`DHO*`DHO
%*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO
%*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHO*`DHOrqM!C?b_oi5Q.SM=oX*:kMGN?
%kInUlp\N>-96U3)<oDNA^A@,$?i>AU&%QgH?/^,:ma_?:^Z9gRf9_!`?Jhf@rZuL>lcVNa?=,lc[kE%,\t8rbDgs@bJ"G0hMKIlG
%m;:0:m=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;J
%m=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;Jm=!;&J&YJX
%h8&o,'f#N>@/%9d$f#Y@Y3I[V5NPn`7?FYrrm]P.?e+b;Lt2M)kBn:.q_c<!PF+J^hXs"\hY2QSs89oEbO](iM)&C0k_F*@h%OV.
%PjqCcr1l)3^AJN:^Su/3Q[_/`@k;!dk.?`'>OH3QaWnRN<]Y0"-`G=rJ[=%E5imJYocks>(W,c'^H.BI-%pGn?S>eni)]e&psWRj
%J(^)db?M%=>r@kU,M#Nm:U$1J^Vi)l'RKc*PuN`qW"a8LST2W_DHMiFH)pL/E3&rC+90T8"<%5OrnlIdTp5-0pL$@<$f`(Fc)P]!
%<3eEHpm,Zb_]0ot$?dHS/_1iS`0&or&JMrDhN!_1Z-_BK*`7=`f\co4h)A[4kEDqG8X.3@hF^LLi\C6EF2U;`1qT'NYY76p[FY-$
%d,S>)/Ue#&^?%>A%:LltDn/UiKKab7._gT5WC]tXl:i3@F*(p8-'13jbZBJf-+<YNZ\C!SDARCV:,]BW+<VbEH%8+6]sU!&!/N37
%h@OaXMoL\$D&S%5^$A#:3GS/H\(H`j]Q71A$pi[KDZ_8\aXnU/Gg$Ik9&uQh2s$&*XhW+@3!ZUF[lTC=IVR?bp#99S^gYM(cs?6R
%h./Z:3m=2IL7[#+j%/N^Ch*0IcL,qq\'d)UoClGt;_DNAQFqT_dqF%"Xp^<=/.s.P</cKpZ8r:5c(6#*@["Om@PTrBoB]Opl0ZP]
%6(#$V@s275.JTZoerNND=g)/>PP%4ie1d.;[6^=o27GJ6Vp2K)Pf7SE'.!qLB['LI3i\DhF@.^4SW@c6W6EY?e4_IPq?F.C)rf@b
%V.6IaOCJ&PCn(iJcGcac9:f'jb]uDHXf7CDEGuOa8P3hpm#\upX3mb0^u23?^5Gq>9'`foT#+o&Mq1EtRZh4G$aQpFK(b$q.1MYn
%"@(HqI_KRin),SDnI;;lp^L.#@OGa4b>QcY@6qO$3CbKLo8)n^BDo<7Nm<o.c8A@h=H9kc*D,j5C,eacRd+nbUTC`G=qNIj4kSI$
%U8H(4M0$0f#u=&I,s58["!`4$!*Q[cg[+]?p:;XP=1BKB1T@3uJuVW*$#.+9nXjcj!CJ6a-H0=7o+gg3-WO'"("6f]%Tps\J@RjO
%RX\7^VF1r2"sCRK5k]pW5l=i2$V/Ug4/S=2bJA!.K6M!hI]@;Fo;^K9'V?=Xq=,E2r&s.S.dc";5J`T.S>[8ImM8Jfc,Q[(lD%'6
%WH0)@4]og(`g#LA4,iRD/3;o)6N46(3DrD;k^^,2j^5/&RoGD.VVS3SH+uMO2-BP:<2*id:VOAdR-JGhJV8R`bbUt#n\mJQ*VJbe
%dP8`0*>PJ#*_d880[:]YaJ`4=`iLU$a[5Q&#P,$o?#Q5r03EBo9Q."R,#l3gCA%`[@`772WnsT?X/<ma&XH#8OLcUb_B:_?O,f=O
%am0SW?7_[BF_oLAS>emYhrs>^`^t=j+tRe8S=@+82e(FX*+)-I+$%':=D**i[OHu/`G09X'98!eChg[EOK6DG[Fe)5_,e@A8HT-@
%)k`8PaGM'*c*INC_)?Z\fT.*Wg&OTZ<7(pE+`VC$NTt2IRgb+RF7Ed@42gblcr+j\Qq08Sr-!q]d$ItA3IVm6fi#0h%:[f[_E%+c
%\EEu<\ea[g1![E+ri4kQHtHdnF=eFrS32Vr+JWR&2#L9i-?mRm-1mGX$U6>,ck9_s322Kc8Y)qW@mb(V\=qQ49fa<"VQa:H+5^1j
%N($jWVG?-W$XD@%o!.5)#=JLG(T;7gN3MP_>j<Y[CFm2tjF2S",Mk`p_poJ\I_CJ5gMEY0X^!8dO?9h7TB5t:+*?jLWM93?[2;EO
%!CkBOc)EXW[VVUCPekMlb/BeGDhY)E%[Y%:abX$=[Aa't*8"jfHHqk$o%\KNH'k,&b>GsiTaDY-\TOroB6[g[=+r*eW8O00KJAr8
%3#8T^]tal,4uLT\UOZ]o@"g]/J)R-R1\XZ_k@k3)i1cFuqEhaoWg?$2%=k?E+B04D\>OdW]nj4X<_KZ+lk#8h_nnVYhNT1bGk`\(
%`Ni%%9hfd3Ljdn`Z!jtbp;0C&(fh(.#*P"COU*5W4+hkNK\*FUJo)Y&fm=_76pT:Wi.=@u_=kTrNB%.F.k<]+OFk#J8PJ9bO0!#N
%EJC39.;%sCjKPLbZ)6Yad-L5/$]Ka*hMttD%Q-N6&N$'blch::[!41B<JBnZ1%^(e?tL,_*1DL"!"h8^oVcWh6B"fPbpmnHLs1!^
%p'3-+-Hm3B(o7nQ!Lk%e`hb'Wm_(L\":uM+Dg`fV%iZ+/[P@WT=?DH2KV!P@mL!Kae5WVB"-V/C3>,u@_agYm)$&S5,g;5CgSTi_
%&T:q)(0`.g,3e!B<ACaW!L!.OTMa_+`JC>h'[7"1@>KobN&Q:<r+VjKdUc<@B,#U8mYD!5]]23#XOpLr)NP.=8"`C?i%4-k.5'[[
%cmU4S$'MeHRne^'U01,W=>>03[pl=?`S#XO,%2O<]V9t#RKm;d:=76FOp4hiL)?mqUon1WPu9:nFg?+4B>(R\$;*2k-IQ-(C&6-V
%.V`]2F/1,17lM/abh`=R3>k<dE5jqI=SKb(NIE;"j'""t6q<4;e\oj6j67Q<:TAite\0K0J,Wk&8YsKX=2WfsKL;&t!Y%`%B\(0*
%8=3m3UuUABHO3H'$[G7]\\!B?CF_=+!)Ca'k)Q95`!hV_i7K;l%8_6#A#eqA@T,;3okbnZKe\AFJtt;Z.W-AQaZt)[Xn12rO3m^B
%Ie67n,]tRQ]lA(cj?Z[XEWZqC"'uF7-Z[]t<Z`R@LS;>[O$$MG.I,r@F[N>QGo'PaO'Ak]Xodj/U&u!KNiX8)<Q*9*fK<2ddNV$\
%ku(/<N/kPdCf@P)>0M5$c!QQs@e#<[VV.$(2eK`8B)j]paATP[j,M"</2h#E"7K`O6r]Zl3FXnrW&XP9[=J![Y(dW1Cm]l$)iYNQ
%P95Q[gq\3f-p02!d*.dcJF'W"mq-K^ZbOWcfq-TMHFtIqBQfIb%3Y<tM4],_r#R>M0"jml^^4bGCG[A3,Y&-fNWb0'<A\[o;47cu
%q&1NA#q)E?%ei]KjoL9*+1NQYW^9@`js#iT'Vt/QnR2JWX&!>9VWa;CCLbU1?u`+o9uID`eehj/19urN#ig:FF)YmQ7'*:%kt<A(
%^G5Vm`bK.db@^7@bg+o5;8[63ntl3[Ua,%Nk]hU]WWh.h0<iN0#>s!R$O\a["T/(,3saDaf:JV#97e/gkD<"u"6&=U+LLoG`<E[g
%<@j,$o*#HVhFPS^Lj#D'0o1=YUg6^u+GCge_5eH,@uu^=%^e<:e!KH'J3>!hBn=F/Dc@hPE`h^k"WKsWDI3D%>sPcVa"\"6_?>,O
%A?nHo-u+&\d6J1K&0,C/XnBIaMDe\u$G%J93DP6^FX+8*0G>Q<la&h>SuHaRpL(+DP3G*E6#M?/g[C?TqG"Tl?6sDX5(ek+XW/r`
%fWr`=A&][AEAlb];$b;XJ:m@h3EJ;D:T#m+@T"J>fo&G)?6Ihi7JnJLL.SB*I7K5=RO;6Tl>"@/iZup]_>tjp-MEZ>l1]U89lNAg
%Y"7H"#E@rT>1("ZH3(';!n'Ze6n%=cQD>No)M1('Zm/EFC9V1u`(9G_LWef1`=JDDc$/?m,%1r0dN$<5XaenV]9[c>J3I\HffjVS
%gno9O8Mh64m$f/\i6%j48-NQDnVPm6hjeaQiaK#9nudj?T\`eiR\+`.<a?iFD=T,uA@<qW\L,NuF+TM<:7(UKrEto$"4f3I9@RQX
%i=<anhZ-KX"E&cj3tE0-F=`q8[J;W_<c^Ds<qsO!<fYsu%=,j:QU264GPD[P?GBX";pPEV(c,@D((nbED3W^lB;483QH(#=8XJh)
%3@#qBln"C()Xh]A^MA''1uVnJ`CB)LfU$LqTS\,q7W6"!iM@)/+;-.oCc%-"?#G$4;?\HD)\Q%Q@UNRW&O:0H1jUgK>?.CgahNa-
%WLfDMK:dg+F2m*R,]E7;I0M&t1`->[_j4PRc1^7Lak\,[HRUpdeG/7j009?M>F^Ha67j0UP'#IiVU)/fBZPN]CUIgYp<<IaW*.Tt
%kUU[k?72GQCnHC.-_X^YDk5=0pE^X+/kt,ro:s(RDp=IlK:$#5b>ueC6dXT%^/?i#Z?i@&9Nh=L?!haG87^$</5PC7=tBjhflH"@
%ia-1o,&>iFcL`72q7.>:6q;>APgURTle2[Ao%3j,]d#9ZmjfgmCG70,`NjmfBOAmn#V?sV.Tc9j=L</Gq>or(n%/U#)mBGq%4T7_
%[E*P:&@O1C?hJ1-0`[2D\UA;OmS&_FZ#a!rh-pkIPCH)MJ_MpHbKs-BZ5+'0LtdXoAgj+*T`=5p>im;F+"kjpN9Qj)MpfS#ThWB-
%3B9k<]@E?7<1JGWVtoufpn9P^]HgnIq3!nc)4c_EfTUBkhqc#Pp=2f2p?hSeVnJHcmNo.sGWVjf!ebr'q[8P.Cd2BJ7Rr$bF?p@T
%Y[R>@Vir!ZdJLggk`]q!Q4&:eqZN&dqc`I8h"uDca[;9nOd2u8Ka*Jo+mbZb2Jb.`;IK_8MDtlenu9tU=ctca;tJ8%ZUcdQDFcbu
%3hI,6Y0C9e.FVn.qZhFn4/4U`"R0.7jT=DrJS9JfX1neHl7YL*j`gT55-q;B%abRQX(V#E_D.9gQ&/iT-Z!hDfmieo\t:2?5U5$/
%I>Y4;\;E[2PmEj[<btp$/"?5[qVe^;_bnS*5Mb/JC8m.8E*G6l<c#a,^D,7;O%j"I"fu0i,7gEG@\a?J4A"KSNQ@XXn6Jh?8h-*F
%\k2'+dfT+$X$\>`RB&Z&n2^b8/B$a'0oiqLP+rr3@l;,#NI;3!bX3^(<]%dO(FgK"R7!;d.!Vi7W=1$T$`:^JLf&$"3D7OC;QK_b
%=&Pr2C0+<r1*Qi')MHIkb/cN&M87t8DsS8$dFq0l@MYC=*r=O?+C\-f@Kq8rBH6=RCkBXPGomSia&pO8nRb/<Wc\#:Cip^`>i]=U
%UEYsjUqS@jO:HdeY"$E2LA0ngAtF+#LoUQ,HN.e#K#C^<S=%kF73t3<K+3lN?(bdXP)bVNF0f`&%Ni$Sa;IGMG_at^#rm&Vq[Al8
%_GLGALd,B<;DlR/&<je)K0AC1:XS/rfUl[TTZrcD9HJk4YSq\t(n<V.'T"PkBFP]G@bCF0d8.[`>f(h'K*fleAhdRV-5=Bs*7=(X
%H#E]kYK"N12J+W&7n_ZmCJNeq)T:Aj_)Vb#7FSEnYH[R2f:.5W#)*K7.@H5FO7a"bF[A-@b\!@in<W7tOI6*%lZhIr=>a.qqRt0`
%F.],fPDfXL-a-Scn]#lrRAFVc-/>>P!'tk'ctk^l^0?CI/HDg[[W?Q-KgR4&+GV0_>7g0eEXWsKfJ/upNhLM*4&:aG\nj0.KpqbM
%g1^qD+rk8Md:EtN.K_J#EcC`i/I7E,!uB:rAF=`"AKSQM_*1_)UJ2jcq>@T%l2kf[A,CEbgOG,17V6\Mp%td5^F5Q5_c(\Ur4t38
%3I0u[p=P(/dG<mV#4"s!N8&c+DCP&fOeI4+Tca=I7ts$d%A8@WKkmbVh42%r!PB.9j:R(rb!uq'@n)n0.QpFl.+d8][,Es^=,FYD
%eBM_hg<5eHS7*\*B&']6HF!ST+Sg!8;IAf6rr.f<Y$bRp`?c_nQgW)3b<^^7AbKVf0a35XpA1W$kCl9+L8tm:Ku1VihW)FYG-4C?
%="UFqd?dtkT21@<D3G[P!5VjWn>>WL0]WQ4je+Se:uK2*A>ZG(FiCRd9n%u_rHmmC)>O)i:%+.Hl2?Bk@DTj7!/*+3k&,f>g)Yt^
%Cf/)s)*Cncd)H4p!tYfde.bXm/AuIXeib(*!"QDK>ACN'"bcr#=a2+aq/!,n'h)QYCof(Q"JWq2#8$;(J8js2fr?:Q6I8oSeor0Y
%c=/LXN!&JAJ0SnfX%krsDmX0d"@46MV*k]$7n"=P8i6)N^PgaCJm1t8KlE(ia<O@OB\a;b,4'jL^fqY^>Lj0"'2i;ik'h*GBbQB\
%n2eWWaKTQP=N/'-(^&D)Bp_S*p`nXokhXQ/Y_R"E'90rGc%"q6L'VLk&DP8GL3?jI1\Mf]cakTVr<`ln3=A8Ya3Y7T7PePGg!P`l
%@Iea"@MM??+)7@e/[1Q('>>!hq1[I_)jsnb*pkUOcj3%s0BOsYMWfF--7[F('8T6!0!W;U[#4O_,'T,6C,;U.QVC06)b^kf_BO(W
%D."(\M`Ck[Ynus6Ijnu'%cSUFkM--u0,u`o!CO'4L28'i,)+Ra*Z&9*AMi):(f)YuSVdHWXeN4/cCm22+$S5,FW"I5NIY`"L00@p
%PIBb:+"<P\(/<2?H&fO19h<LS@V1/o_P:i=W*_A&[lJPqG@)b)b_+)2nU$Zq/C)VT[I3B"M&>@^%GD/iC@XN/d:U=e!-9cO*M_Wp
%nH]-=&!YB?d,`3PQ=LM8'IDlK%Jkn-_DdopJ3&gs*(C=ATI_rW2\6-I3N:^/3;,k9e]lnf'M?:t<I.ckTF+*dE0#9NL`,^HnD/s2
%K`qK3o:o)g#"Zia[NKX[RGAr;"Ob89TZq@!!PotjOW_HQ4pYUX$Pcr/!`3WoUP#F=n=[B2'>??/_=g&XB__o)jN]oNE7uO4nBfs!
%;oq?oS%0Ka!7teM?X?;4F>q7+c;p\n&R#dM98'lc]?`fL-=V_lb$d0QR,7%uD?iHi/^IcWN.1j\ES"H@3=WF-6C38+;R^f;1GQs\
%PS8_4Z_^#[`g!6>"+a_Dd^$e]S'T!"Ld2fA""n%]\cB$"GqFXM9aRj<m)#D.f?5kLW>%;6P,(,5ZkLnD!D/A_PnC(L(HZ*?&DhT_
%MV1]K[:5h"Qe1l;k8#LiX7df^!G@/r@]*oS=!M5`B(C6]\[U?X()oglVaaIAWjU=$I3#Ha=$pY&NFeZPs+h47^8T\d!dK6'.U+$%
%D/FA,[ZJ1,$_$*#58)b8jHe$SMs'?sReJB+YSBeDIW&lt4PuCKl!`X`F$u)63HXZAqlB-k/G1Z@Z-NS!%M8ZPghsbbR2!AZ.XOS(
%_hN4B$h&S@H6!cSphJ*X@_nt$\RVPk<Ks2[&stl&rIXGn$c`DnoU7IMT9i_WAB8h''c/8=2NDhijgfCMaD;A"(j8+Y19F)!KL#9B
%M?hGH@6S]:hSh--P9'M26ZKYbGDrG4[)K0&.1lZ*VY!/nE2N`!G?_=[-X2r?W:.R<@C+FJk/*9$='oeueEqYWO;n$p'd1B*p8c%q
%*X!=2[Sh;"@7pl^*8*?9QD\G!fE<ls4%ocI9HDrM.hFgZ_CuI7EQT;Smi>Jo7o<>11WfiNlRIlKiL;cKJop/DV%g+#0rPGYP`30N
%b[hXMc)B[%'\!W]N\jDr0Zps)0u5K2)HZa\T;G1D'pVLiO#-5&eMQ(SR0aPqBL&5?fELVD#$8s7[*G?N'E\m1-NbLqKg.Sppdn3^
%M;.C$CHfW>3+u9jhm6&EKrg)_'C7pHiERII.<bpH!#?A\'cF^0]`??^S-qG-%h"[Hj`pr%=r!HGQ<N"CRud4e"5dH>F]Y"b)"-6T
%L_aJ"$Ohq<H0Q99oc<q@@FTYK_Mu5!95ps1mk,2g*eHCk"%QSl"Z:AY[GtN8PSO85$>2,RrpLWI`HWbl<uAB`4XY^-,/>>*hBX2U
%;Sl6O5=Ini#0---ETAft4<i"Z-e&XN6@c(S`cVst5Vjnj]*2@(39ge8fraYDR,te;>=u2G?=&s^&S9#LNUWn!ZYTU-2&dJsY0e+%
%j=%Z[ZQB"0K%1>=j';b.+ribH[NN,)cA%3cE4>RQ\O)9L,:YcPbqJkBZ1j8;Up>b,]<))mO*%AXK62iR_HlNhc(hk%<0NPLcj@[H
%7FuHI3(Im12X5GdE>>O'+j+#0kKNq:re[S&hT0H'%7%aEQi8Q[FuGk"/k2CQ@H1tSZ7Ljsqb5JSI$f9LT;U]q`p;)Ir<M#i^MG>3
%&0S'ti^MT;?:ZjG,q`0m-MSZni`8f(>Xi+1LHK*'6L'kOLW2p)8p_5O3T+C=.LGTCFZYjSS@$8)r'"qpM2NRfW1lq8[UdVuBTg28
%E`aU>VqQVjX8a"PoFg:aRVlTTO12@R>HR<bF*O+7q6(?LIM@!lEM=[N%ZN)sglUC;eY3+a-\e]$'L4TrrkmM?82;K0FLB=nTVW]A
%2e)J+H'Xh["n.,rRtb*u+00b2U)2)RU\RmW+Ss,s&A@8<=VHuj/[dbj]MupJ#7!IC!RF=>g$#Yc?)opOO^`2Yji[rS%`o?GIBJ%E
%^e`5S<)/lDB_h0;Zu"_DGdFH/K@iZkTF&cB)[HPa4Sooo:iP7$B;Rml"EGN)$P)*bcYj.e/on[q*k9e0*WE*?Iu8Y5ORhEj8GPa+
%SDS7As&O<0>dV^a/>M$u#,m(,M($uu7!Qu]U.*<=XKU$gKstMom^0*qC`/]>NMm]\.QHu4o#1-"+>'e<-Dik14+a6n("aF/T\bOf
%Z)>5WS>lr_`K]H`=Q!83j4[\Zg7c5M()[o"`9r0PK=7`n]\Do7rcLd*D+`"ZXGf0A,>:-T\RI<]%%5^i?2ObQXDM/!7AHLCihU!3
%?XhP[],q/r-O5`[4!Y60Dina^\EuY`0IE3-KY4QOl'GlL"(Km:Jaf\!<M\*-\V+@q+B"1Qm]\?8[cA;BOOp=Z.$YEMMDXu]<?\ta
%#V/s/ln?>rg?=s)G(dJDX(Yn'+bT/Tkjh;tVM?CtfR5NV@`'N3R\CrX%;jtb)d+O1/mF$A'EH]#D^5SN_"Oq$HtKHhff<:PBX8l,
%F-0]]LA([VeqYbBD;^4M%%f#tB0ZU[%-2AnVi=UCYsP?dNfLWj+;(^9EKddMPhKRsG%cYQ$IO^[Z\od23,#['`"<Qc0--J]p-NUB
%;c(-H8SJN8j3Sab-S33IW+"P@0e.Q<Z=V3PB'$R^@LCDtA>:jk`FPO\Th\h2"Yt7;E>]cPEF9K2"#bm3YZi7W>I"Z))\R8!b3Bi]
%'ukpYRHf[@R'uP#&6AFN;eIg\^]haQi+P13NQk.<fo-4gVM^.l:7P%Ti>&g\VIh=J/7or1Z7;4_&/*%+R;r<Sh\38?[im)$j.$sa
%]%`+qatm;K1fl-dXe1Kq#/g:3rGc)\-k5Y;->dJL3ciH0,s8%ABl5Qa34l\Q3dbR5!CBCQ@@<u3.i@jK'!a0,YL]&$Mblr<.e+fP
%D-@-0?j_!IQ8AjQcUgAK0hC_k&1RMPN]P;+RV)rG".a9S=g-GX:^mb"d0A.l%nG^l!5s]**FRsb"k_OK9Q-\<Z5Am]=@>PZq2n"(
%MD\Mo=+U%m=SDNPQcLB1!g;%R;/agiJnENopD7>D%3i=%OIfDcR`Y(;*\A&O>q?0tJH6SV@r9t2^M*8'@,PpTg.OJ(r?*dC?=`=T
%"Lq\J*fVgDZq-Gi88g['$f>FS'2h\3/<r^l!?tmr'%'?k,_6q9^dI^M$"Dji0GOu-5naD&O7l1<%L>a*0C^l++=NcNlG5TV*-Cp1
%bQk!Q!%[ug1DCI<-\UA<LP2P;ScMn4(p2g(Kr:oVB.4(s,$[lNBOpg?$lCHFA&3"JXr=rHTk5A:`+n,k!cAs5,-a%?bV"]Y1"a:C
%i<8-b^jpnGTR]F#=Ka.NE%@5;@*.QK"^-JgK>EHT)^tlH`nPsslV(-`6;a#h3W(dTN9e=j^pYLp]rNIq\m<+s+kGNO)ZdogDM<tB
%kH\(6L*ZT4I,l932!&?.MofQDJAWQN8+=f(;lkf2!hY"YjNeCBe2JM/D<Oa=#2"L0BFY#pK*2LfH/VgrJ5M1Xi!M1q,8iq,$I'16
%)qOd6AJr=8<2g038^1IY-bu\#73q"*733f\[NZB40O8Q_Bh]Bcm;Cr+/8UH=<5gYT&`C]=.kGa/1udB%<OAu5W>PYpHNWC+]3f>Q
%h%elk8gdSmP]/Ih^`$VO85W`*MFH]/B51T.\n@o\bF5GE=TatVL@>6[mg-@Zb>tDA/Z+=3VJ)35Nj7L@q7JuZbLW`Ej/6pK##FJ%
%&>asFQJ&%oO0)uif)LY8S@:I($[U_he3^Qgbbl*m4$Ej[9gna4EHme+i@qkOG)A<7^?^lkR![9p,."Gqa.ACE7qpVD1ro^O+bgV?
%m=ffZ(+8*lE1]+SWJYWcYeFfM$keh7Ahg+q_MK5:!CUHXZ*(=jZDM"[Lic9LB#1aT9m_k$Uo*#HNTsl*#%bb^;)gRm%H%9I#8Ud-
%@2RmuQu56'`.!73Uu2X]^"Wp7VF"Mt^r?rmb#3cI#8it_7:/#`eJ)M:(5lfmK,e&[&eA)_"$?=6ZQFr?Va91%:Ni(K+kAj]dB$e:
%>EHm=T5cX6Zb#)mj9[tYP<YZE09"4YJb%1H:g,mYbp;@d^H1C611HNTDC\cSQ93BAA97B*(c]Yr?"a;\p^U2;EJ)(!:2C;jCin;o
%-Nb#O#m`QQHj!h%]5\VKRL9D>pm=b=X1p<ZJcep_b]OKI@Q,k5b%,QHJj0HSm!&lu)m[=hJ<8aV;WoK9?2(n<$J?\V6;;P'0t/6;
%20d2Wl"n"%Q1D@6P;$Cj"JasC==l#3g/]aC]C7k$F<Q@DC@r@.RF;=t^Q_4XYtdKbb9dkTV!]e"SU8?=qVils$D$eM<.[E#<nTEG
%;rfKgc1N*[(+11Y8XskfX#/,\U`&uo/8h5`J*;u.S<be@9V0ld'e(KR8-pqkgmZA-(&R(ur'K_![_i<Y*RC9h[i?X7Z<JsNX3?CJ
%5n<Hb*b9FH]o<K:"nK)sl&Knie^j;2*8)%5feMWddAnk,J!=-UrFeeeB#FhJmaDBLc0I,P0W1LYU"(KTjpXSm=E1HE>pPdT6<%?b
%5J!s'j<)UB+-Ab]!a\Z1%SkV8[Jk0u8nA@\&9A@qQ8n[4![<V4O^QEiZ5*lPGsjZ*2*`u8[LYpm_0E4Mgg+Ua)+`WUi>(<]YpD(V
%mcu)6pb-"L<Qg-!ku""l+-^gF9?CNn_Gl/AJ:*NaMi8G/'K#@4`:)3'`V?o33f4"T/'NM./o)5&N#$_SZ<\cKVdY\`Kp6ZF:GB?+
%X@\K=#klpgUWO-hatOTM/*73HGo3\Lc>D*9+?@E%lB%E:F,*+?9EgY,1W:)7eM,HJmouo7\FR<%o_fN"bu]O$>/@K,W6TmU_N-/=
%@dG($8m=o$",r(q[G+=LL5n1`$UTd.2V/rX.GGg^)QZ&;W`tUg,4:*RrLsb1mh_Y02&D0f"<;]:dHPT@ihO4Une$6rMA]KQgnNV!
%i^f,_6kDmUdo?SW60,[=b5$B^J,oUkCdk(W?VIk[hha:c;:CQ>aLFSN.Pf*'][PudAUZWZ[("rloo0F?+gYelDQ9uD+WFG_A[m9M
%Q.E&V$h!5%op?O^ph!1i`Z$j[kj==>8$4R'e"]73ZG&ST(d7orSc#4#DuI"jrsXGJMtaW)-cM,8h/_<PCH1L$rB$G/@q*413DB#"
%XWhCnp,DAW/BS>i]GA=WT#riY3t=_\PbaR'"+?rfC_ag2aGbrWE-b+=8>23C\*)!G^<$ur.[(LDg43V([lCXuC+9'$BpT)R?2XPY
%8kg2ap+dsT(,!#t/rpr>HQ=kN=c0>S2WQTC83,_AI$75S"<MdY(GNn`YlgocB?+uX#.7#?bBUJ`8caGV,F7#Z>LI^BHa;!9:oP=F
%->)=B8ipCC?+/G]P*C'*@:(rr#DR+>]`Vog"sdicpH.'p[Ypm$-0:mi6PX487\I7OURRqs:dnt5FGB_c8[djus6@lW?*c,QYOp0h
%>rCu3?^AXiqaei'],[;7Nce@H0E`YRWQZj%rG(K_fTBb\BFj9#3k2I,o;E:-;3:8E$kl?A/%=ZFCQuKm"lUBnjV.^JZ3q's8hlB:
%:bC>_P,HYlE%Q^pqQYF[_c.g6k/fk^0&t]uq6Y<qhBCBP=>G1P9i1UZI5gChA?Q+(r!4%j^TanCXP28GL)FKb8`m7\mdR+"jk!oN
%]G%V&L]I?n(k0h&LgTQ\jjuhZBUW//Q"?Ih'AXX?NX%ht2AmqZB^el82Q=U=+5XhIQ:"auV(cW(7QuTi_N=_RTf?Z8B?p&<AaC3Z
%EF%c2:1sN^'pF5#YCr3o9]d0,H$Q1$F+-]"'ad]bQC$e<b&Z&#(g2GP&`O\2k&M:eE6T*!hIO)P]>ed1M2'n=o8.JU0:41Xj2R'c
%0VhVd4LV1SVQ#2`'sYu+09?bHi,Q4-"N3-C6dA$*,=>q[rpt6jSd;_S-E(J+1/oKXL46]EG0p9)aiT+BOZ!.oDDc.NNtkmgWI*Oj
%ok/KNJ&NlRjk'@f"$#@6n8DdHN>m=:k/`G5^?oG@98/nG'8)+H]p\!^Jt,m(%E.C\c-qZd!W)/J!Uol,Wk@+n#]=bsAbj4FGIrZD
%J/p_@+7KCDM>5[5+L>pU#^l7-@_hE!A7@?3M')f`]3!WTdpG@U/1Xn%["+?$5<Xbmol)\Q;cNrNWO:Mh1"dlK$aO##4"/-\Z32*_
%7,P[f<0]H^;Y.s=\bXT@-N:k0@-.;XrcL>b]O&*-;9ZXq60NeYOaK3V:6;+(\2'MH.@7'^*MG/o.-b\[FLI6g!]5[50I_Q1eE'D6
%ieU1Xk@,@N(Wb`&g;2iZl1'<7=G0jBjU5^lA71^Md_?n0Zatm;.,uAYi*Ms3mui*3mXiNFE?[\XHEC:3n(WRsBCf(?8Db2HglMLe
%!3pB=fkh3d7XQ8Y@ba::NgR'?.[@n<YEJG<UgTS<3#0WA:19bpcm;rUKmrlo`3O7T&IHsBI;CnSq8O3F<R,t<"*>(T]\*-IC@s=+
%"k9ko$T"%O5i75_?`@^r"Xd,(=LJN\Xm#O+#N0X?bm!779D1YAIPI<d%h[mQpaJO%4;_DkXq2J+Tds@on-.et"JmLu,UN[PD6Xru
%Z`Vpt`(rc?B]$]9T):4qmb;4m(17V[Z-pIl+$^D/<PD'X=YU_:9R#lIWK^?:Jb*rJ(QdMVEaLP1@#"jVO9.FP&W.*Hf"p;1k/*05
%XE'gS:b%cYX]f20E0g6"U9t@VdR2a@Xd^i"N'G;gJpI3-,&OX*c6WX6a\$X^]5rB,CKCl_U4)\27AR8c#0eA!@S/#[p&3L,/eK&'
%ZR]:24"_Xm`>Js'I]C(h4?s"2ZmJEP`c5a`/R^7#=II\Q07r""J2ObO?G=24YD;`lRPNQ$d`-GD-u'%mc+"lCk6_HC+Z@eks5kj:
%s"ZsRZNh6s,b6Rb'9(M;P'i/@[n[fYV#A58J;`fJ3O>^D&HftspgONlq62&i*5eVrhr_j)jbQ]kY`!Ij<dbPU"J^DF(Pnpjeh"p[
%e,JmCZk\KG=ps6kR_nSH4DOgYM)WMBg>WIu6u;%.=g`8,JrEgNn<p&G`hg<K[%n!([@Wmr?<M_9Yh0k;,$"/!TgmIe`R&`W^1(#o
%d=`(r;Y(rR;V+gND7"'O8a6,W.]XH=:blbfeiL,kh[igMkZs:2qoEMTK9IUP77WXn0h0,\#Pg<>:C^oP5q[\@EC[U`^^8^,l,)BF
%)o<8f-L80aX2Dcqi5>>X<ud9:/)Si0iRi>Q98$=hak5dKl\KOIfqm&]]nIm.luJgd#`2KTKt\ThP+c)<["g6GAJ5'9?u+0%+C+b=
%jSWuH"s,N-I_EtaiQOGikme(.X(tSslg*%#:%d8CIn7F+VF@?8On'uY(9A@:F6B@8!ld-/4'R,22uA4&8f*o4qN$prjTt"?5a2:T
%-V1=(2_nn[B$9YXqb:VtdQB-)8qnQ>`dmJKQ8J!FQj<i,`)4!j'U5[4WQRPI!F&DMCT6"=[?62108(uI]6Jk*<Me-hh.`8>dR(%q
%XoJG?_@WB[WOa>9:o_;=f^b^pQ4em"a6Kn!TL_+kC__4H!D(fo&-WdK.99<a4(=bH,N:74H_6]=)0b4i,uXRO7"\W3!9Ogrp,;pc
%LjZZSIa/]QEos-XflEVnO8@cuBhmORe_7jtMIQB6[eBY$#mb#bMh9+l\oj$.9s,2mCZ]/>V>s$0QUh>q!9Hj/J@.(Y,Ar2rUKQ4V
%od6sqiM07tI1+#p%=P01=?&O[.iXH9fE7\[Z0q9k5WTg?KJ&sd8$p8Pp1B0!j&(EC:^2.1WSpSN?6D*6Zah<0Kh-e?'7pScE#b18
%Ri0o(kY@4J*"[(BAItQW0Dk^\*JqnYH@Zh[a>_8V=d3T]o^d]\3)sL=j08$0N7/PC\mYr*2j'b#0Ss:(FJgRV^/%6u,L!5"_DpA6
%^M,1G.u;P=nh#d@moA1GK_nLU&*.amo\+U.+D3LiJ,RQR8%&s[*,!"DV^VU6EPcV64E]Z/4O)(BHLQhA)@kQO8c7.P;?lj3gg)9_
%A=9ZJ!fI9c,3)tk#8.P=305,L8R0kXk6l"DAuL$tl>gq`]7S6-_<Ur9l+tHnC9r9:*BBGaq?.t$S39F0-^Jo`T/s!\s'Whp`B&^#
%dmJ`'X"9o%FgBje:.R"]?q"C*Z@"NN4OeRCeDZ9'##SejfoC"ner"YtG+!+PK0kVPs7=#(mPjfC=jUA="q!=G7\/AN+3-KZ,OY0=
%3e+5m:[A)q%du"EV</GK'!_i91$4q]Zsgm3edJX_[,ae6.teTq2?8=&'d!fKJ8)@&V`Wh7i#SSq6-C"4[10'5AZakY,]=1;?4!7p
%:5o7O56/V2\$1#s%b2oGJ)-ctNV)q64(`l@OMo[i&q&?DX.?b?Ya?sW^be5OEA\*M0q4eJN.V\NYkVmF*X4mIm(d$>lk@jV)6K.[
%pYUUu<:+3)no-gt$fgNg?)m0t]g.==c8s,QY^2kID-ap:a^"^[LL`pEI::kPDpY<m90Rp8&TJKZ\R+;AEdn6Zgq"[-7;ISW(F:/K
%s",CXFK@5M5Hb(5A\;O.m%G;So*3FAlJ6p(U%0ug_RLbj(>6V;C[a*q8m(GqB<UloK3^XYliQ,/^&t83(Gr\BWUk8QbbTso"1pfe
%e?G<6j`TGC&2cPV6-c]!T)),)@Nq@J3*jhV&mI!.N:gp-R0Arsp\hGLfXAUL'Zu?$R#jZ]'A0o=G-''r%M)BoOr9i*pd)dE/q_(Q
%D7+F-OglM1,61teGJN<Ka!`cX\\u\[&ae+$H?;]cXUlKE;ah@=-iR*8)Hg_%_J3>tWD>'JkeRI"2rPu`,d<jX^cTsPG%"WG)/!>5
%h#\K5kKB_4&4TNX]Mo)@c6bA13M4)9%m-ZP'UX/;c3[G[eZ%O>dXXcKOG2n__+ka$2aK)%/(KiteT4r4:S=7`G/1;c/<&J/M=&10
%(-]+T/2Jb\P.bN<>EU\!B?a,ur&d=$QCfH1g\TsiZB^P7]`MHpm2.327(6=B%WkR\(0(Q&%"g5rpc'2tPb62Om+!hlRr3@N1C7EK
%J^@\QTW"[jX=,C8WZ?r2mT:c,*Lg-7#HE>AGIW1jJLg?1/BD;,a=R[Y$$Rq%%E-U-2Oh[Co=`/Z'8U:gcUT:%%<hQC@'81iIc^k!
%;_G2LDsmnA[#;#laA\/E-,:_MrPaG0ParimS*pDB^lD&LJWW3sWYW>5#X\]/@>bFj8AOughuTO[$\!Ne)t2+#5JP$;k91\qbR]DI
%>i+@Wb(OIOfN-]V_75@QNEJOdpfPR!qls7&+Rreie&<us=P@&T0DWe@pDn,bB5J1(PQ23OMK,/g!M$8-?94[UlcSWOh?*Fn_he+V
%@"lFFNnO;FZ%ca'gW,-u7%3'?jMQped2^()q;#a-3PntMm#s:latXM@L@ql^(UjHFF64Ve(o(AeO^3N^K0VR%E+#%qOic^ql1`15
%(`TPWBWCYN=40&)pqe!s0sr*]MW960TO,YoN_9OHfEu0I/fgn2)9`-MFb\Rg(#lY#DXCj.,*,93W`JH-jj](LAF`S-7^7h*,[E#E
%Fe2=Tj`0L'"-Cpd!,(mA=6BMiN.ig_#l@9Yd+9^n]f@<p5b)2<E1deaJkI4!,a&_iFXZ*QYO%s6h[9i59@@-*jJq>Ur`F^,DmHee
%ejAr)FMP[ILRCOccs7,=nu&FE8_e>rRH1niK"QY&(*XOsON%ZQ'P<@T5,m58o:?c#!jajFa^mS:d7aidl],h`,<"1:SSlEV*N<d'
%%g&RL!gm-.A?30`$0\4\MmtTVU^q;(EQdaJ,!?\X0&/2S*ccgAp4t2<UWifF]h*T[MWP_!,CHuEnj##J([4U-K"8DcOKfS3m_uDf
%A[S-?81\Yn%:`++-=43g(*SYG@V0unm^@<o$e$$0aB3CIHT)`dDSM/RWTQDY+EJjW=NfO3,Kp%oK@I/B$FWB\%JTI=A!"4N>`'3K
%8s$L''r$8$(g5;,FCkM^YOt;b?;Ll.0pjYM#qks,\?X`?):Md/;C6Z4'sXa*2VX%S/NDYUa9\Xe:(X#:W&M-sN=R-C,c#T5&L2D'
%h:)n2'=q,JUo4H1BO"jn->YNc>.l?'P&*b^,%SrrDSu@4ERB9-IqgVMNbWkSGM=O>m0GUGbu]Hq+pjjIDI5j5P%t[$A-RSZo0`q/
%Y0#Ee6aKg1[GZ6m!^ftCk%-j*$kNVRDFiA%=^qi(Es,4V6d)?s(JOZ/q.L1].UI,An&:?_F5l5S'.^4sPM^lh\@N1+:cXF[$Vf(7
%4Z$4tag#>n+g%0SF[BFpZZ3sqL/,Y7aGJ%++/3bMWUI4fl:;_N<<3C$gFX3ljWVZa,&9["'DpXj>-9_5/Mo^&RnYI=,GL`G[9POR
%]FglPfL5\.s5T"+C>,,Y%^oiCU5_C(=14[l6FR_oXojk%T31'eU=VmJ;g#UjCs>>+O8_=g`OS@32_["H:*RQM%Ylop'6%s4*1U"9
%ThnnbC*'g7$!h+SpQdWX3W_U-RPl%S2r>Ld%HYp*\_O%S't;<X.9-sEs/S#9=b*Ze1s.0%\3uoh,10DCG'CK^Yg\VD1k"^7CljnV
%<Qkn6r(M>+*Q:mWn[t^K8U;U%;*^.Z'4WYdk[O8*RK))B7+UHQFpQA"+>&jrSOWDqWCP-<EIg8oFiD=VAiijp:#m8*m7f2*9sd8%
%-WEjpLnrfP[O!GBO-XP`Hp^BPiDtcnH#.,t_mmL-fXBD+Hc]j[G9[:F3)5&_;&'Ib,#c.o=LB,YN]eT,0_%,;[XI14R9Ybn[j8N'
%f%RR!'IWHq[.NJO6/l>i&'$eKHnp`^I8;OV\[4`uc^BCp[S33^%S[q?pOc0@+"#!-3@8[^D@iZuW1!nJ0HWD%Po#<]Qe2^@?Mk@J
%f"6s<>"Ld[KSb@=hqsRuc^CjEc5"t9E)R6d,BF.(<h!Q0i@_H.QmV$1KGo@k$hp&sHt#oe<T\C*lEQ.$N"\"Vq)9Roh5"o?+/EoY
%W$P[:=XMeA3#TalV5FKT=@9Dlhg<.oDA+4iYU3(eh.X<!N,5NXQ)u?+k[i?\g7dUHfR*c/nK&Ml9!M7K!D=6:6N]X2!1G2]Mc8d=
%R)`k$`adr3C<`SNg$q%:%JLI8jb\UfDeA/45jO-s$:D]:];_tV#)TV#2F_(C[M$<)^e)AGB-u\I@\oZc,)p1/g]7@VgPJ3nZ/LFI
%!^gK1#(Tcb5I(8hi[4%DK[#qhefM)[J*`?[64bB9Jp+FX6&cX-ong/L.i)"JA1U?n%]mT@/;uShWf7hr3&'[&DbiHf>5CdlA)@rh
%RVQ.XcM`h\\R0e=6hl[MB;((6d0m36V_gu^8I7Q'[BX@c7q.T\[Q!/E+(?)u_iTL]!-n]:@rK*^S*I4<S:r-sD]0'&ntHbjE%'L0
%LiD^X842((EC_e*TJpKgP)_mk6jEgY8/hp6jDA9_>6VCm;mmGL%])sl7T,;IKXueR)R(ZeW#P4ad2AdC(ab7u+X134_ESaKkt'&H
%NOGNg7ENEN.>Hd+_]XHX#N,;RW'\95=@/Gq15RflCo9I.N!cF>krjN/MiH@3.SR2g:$XX3MeN$WR5>tkS#T-?:m/VII2TVe$t+8&
%7^$Vj!NF1CHJ/_b(m,PN8:(TEV&nGjhcAPMDac07V$e4'HXYhG7QfV5N>k9>WX.J"ciDSH"=3l)4K^N#+ZX!"n^TZ'6kGa7).,[I
%.B_Rs2!m#moi<=Y_1!Uf"Fsot0L_!OjW5u@^<T$_QeS6K),A0l=It\0=[rcd"ekP:5QDWbP-TSa%Nha0G4U7=XRBktls/bc%M-(#
%<k-L6"[k1gI0%E+%?<#^G&IQ-,L3jDPoJ+L1W:eKDt[=5;HCqCV@B1Y]dn4XfE)`Op/CMtULea_#qT1I)05NXPUe;pCt#PO@Q2+Y
%Q%:pA35r?5(gSUmgCb2.hgqAN^1(D@`3E:1;q-@!-#s(.FYK97>$)i&Kgt4:R]IA$h#3pp"OhggZEM6MTHq`^3)(+dC/nI*jTKCr
%4@\'4"`<MW#Y^ReG)GCbk0u6U6)()$qSCVE2d>F,Vd9@L^2/4?N)CW0[DS#7KA1u?B,l?CnUT^AgCUXu;sM_4KtFG.)"b)e+IG[-
%=^"Zg<IDm%1IGK$Ar3"a/R3XW*)edIo1^a1.//ao2O!lR?=RhkK@i[hI\:(Z>&54sf,A=L60&(M`UY</ApS.,^_^'c's/8)8H0Y\
%!XO+k?("l];$oQEd9n)N`F/6r?S/)Yr&QqOli?)E<6MMF'5D$N65pHJ:'f=JQ?`_<.a+)^krcka\dDM'6F4FpZ\E@8M#@TC)gaFN
%H3c%>W,deN:GXZjVg\]][H8Xg$c*7nPET8eL>LoA(2Y7Jkr7;nS)lhg&oY,q*-.B56Ut.^Ht857hT@HM9V@,B764R[M1rP\+(ZfE
%m'F?F1sSIO0\U8\$TjgS^'m$M%Bs[,WjONqT[jg[8;Ag>8jfWK/gm4E@WB/J]O3;/,Se!Zi[KgGh%nB'FH+iB>GBBZc@E_RNFPJf
%+FWCb_4HDTJpQdQ,LHTB72hN4N+_7:j%mPkIXVF%_.F<+^MohDTZo1V)oQ6E'qt.3CI68q5ZMPl5N3q+5R\0!ZS1IGIsk-3N$WNe
%<b2i\D.;3q.l%GsD]qP1$uqPhJeNZF,1$$?8PIYo@Pu2DYa?ZC18iXuM'-aN9o$qsKdI.:GO-QCfPd![J5dtT38C.D6C)ahU*Nc^
%M+.S$d=U]KL#dga:fmk?&>)`#5^s&?=`Vgh>@il/9JBfW>+$SM<Al0u$>'J!e2Ja-Ct$n6LSdM@F02U2(^<6_@KfL,M0#RFA-h(A
%b#,sEDNtQ\rYI98')C)Gr5$UEiX8N@pd3M0<Js$ZN0K).;YNEW+;=oTgXQ?.Wo]LQ^QUSSWmaWt1:((O,20,Dd]bEWPV@4*J6PC'
%f;28[I6oTlZW]-^6-Ohuo()aoq!L(jp<Wcno"Y+'^\kRus7ZKfh&lXL5F]H\rV+)*rU9a+5Q(5)rVF,jI.s,fs7k@KrHDUtqj2g.
%=+C2'^]*'h2ZN$bn,Mmh+922@rp[NQ5Q:PpqAUQUZmu",TDbg?oB5$0k5PYmDqqf~>
%AI9_PrivateDataEnd
